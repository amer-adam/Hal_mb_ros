
Hal_mb_ros.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b7e0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000036c  0800b970  0800b970  0001b970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bcdc  0800bcdc  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800bcdc  0800bcdc  0001bcdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bce4  0800bce4  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800bce4  0800bce4  0001bce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bcec  0800bcec  0001bcec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800bcf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002ad4  20000080  0800bd70  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002b54  0800bd70  00022b54  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   000263db  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000053a2  00000000  00000000  0004648b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019d8  00000000  00000000  0004b830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017e0  00000000  00000000  0004d208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000c2bb  00000000  00000000  0004e9e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022e7c  00000000  00000000  0005aca3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dffd8  00000000  00000000  0007db1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015daf7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007324  00000000  00000000  0015db48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b958 	.word	0x0800b958

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	0800b958 	.word	0x0800b958

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000584:	b480      	push	{r7}
 8000586:	b085      	sub	sp, #20
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
 800058c:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800058e:	683b      	ldr	r3, [r7, #0]
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	0a5a      	lsrs	r2, r3, #9
 8000594:	490f      	ldr	r1, [pc, #60]	; (80005d4 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000596:	fba1 1202 	umull	r1, r2, r1, r2
 800059a:	09d2      	lsrs	r2, r2, #7
 800059c:	490e      	ldr	r1, [pc, #56]	; (80005d8 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800059e:	fb01 f202 	mul.w	r2, r1, r2
 80005a2:	1a9b      	subs	r3, r3, r2
 80005a4:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 80005a6:	683b      	ldr	r3, [r7, #0]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	0a5b      	lsrs	r3, r3, #9
 80005ac:	4a09      	ldr	r2, [pc, #36]	; (80005d4 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80005ae:	fba2 2303 	umull	r2, r3, r2, r3
 80005b2:	09db      	lsrs	r3, r3, #7
 80005b4:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	681a      	ldr	r2, [r3, #0]
 80005ba:	68bb      	ldr	r3, [r7, #8]
 80005bc:	441a      	add	r2, r3
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 80005c2:	683b      	ldr	r3, [r7, #0]
 80005c4:	68fa      	ldr	r2, [r7, #12]
 80005c6:	601a      	str	r2, [r3, #0]
}
 80005c8:	bf00      	nop
 80005ca:	3714      	adds	r7, #20
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr
 80005d4:	00044b83 	.word	0x00044b83
 80005d8:	3b9aca00 	.word	0x3b9aca00

080005dc <ADC_DMAxInit>:
 * Function Return		: None
 * Function Example		: ADC_DMA_Init(&adc1,&hadc2,&hdma_adc1,DMA_CHANNEL_0,2,adc1_buf,0,0);
 */
void ADC_DMAxInit(ADC_t* ADC_t,ADC_HandleTypeDef* hadcx,DMA_HandleTypeDef* hdma_adcx,
		uint32_t ChannelNo, uint16_t dmapreemptionpriority,uint16_t dmasubpriority)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b088      	sub	sp, #32
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	60f8      	str	r0, [r7, #12]
 80005e4:	60b9      	str	r1, [r7, #8]
 80005e6:	607a      	str	r2, [r7, #4]
 80005e8:	603b      	str	r3, [r7, #0]


	IRQn_Type nvic;

	__HAL_RCC_DMA2_CLK_ENABLE();
 80005ea:	2300      	movs	r3, #0
 80005ec:	617b      	str	r3, [r7, #20]
 80005ee:	4b60      	ldr	r3, [pc, #384]	; (8000770 <ADC_DMAxInit+0x194>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	4a5f      	ldr	r2, [pc, #380]	; (8000770 <ADC_DMAxInit+0x194>)
 80005f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005f8:	6313      	str	r3, [r2, #48]	; 0x30
 80005fa:	4b5d      	ldr	r3, [pc, #372]	; (8000770 <ADC_DMAxInit+0x194>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000602:	617b      	str	r3, [r7, #20]
 8000604:	697b      	ldr	r3, [r7, #20]
	ADC_t->ADC_number = ChannelNo;
 8000606:	683b      	ldr	r3, [r7, #0]
 8000608:	b2da      	uxtb	r2, r3
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	711a      	strb	r2, [r3, #4]
	ADC_t->ADC_rank = 1;
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	2201      	movs	r2, #1
 8000612:	715a      	strb	r2, [r3, #5]
	ADC_t->ADC_valuep = ADC_t->ADC_value;
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	f103 020c 	add.w	r2, r3, #12
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	609a      	str	r2, [r3, #8]
	ADC_t->hadcx = hadcx;
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	68ba      	ldr	r2, [r7, #8]
 8000622:	601a      	str	r2, [r3, #0]



	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	if(hadcx == &hadc1){
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	4a53      	ldr	r2, [pc, #332]	; (8000774 <ADC_DMAxInit+0x198>)
 8000628:	4293      	cmp	r3, r2
 800062a:	d10a      	bne.n	8000642 <ADC_DMAxInit+0x66>
		hadcx->Instance = ADC1;
 800062c:	68bb      	ldr	r3, [r7, #8]
 800062e:	4a52      	ldr	r2, [pc, #328]	; (8000778 <ADC_DMAxInit+0x19c>)
 8000630:	601a      	str	r2, [r3, #0]
		hdma_adcx->Instance = DMA2_Stream0;
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	4a51      	ldr	r2, [pc, #324]	; (800077c <ADC_DMAxInit+0x1a0>)
 8000636:	601a      	str	r2, [r3, #0]
		nvic = DMA2_Stream0_IRQn;
 8000638:	2338      	movs	r3, #56	; 0x38
 800063a:	77fb      	strb	r3, [r7, #31]
		DMA_CHANNEL = DMA_CHANNEL_0;
 800063c:	2300      	movs	r3, #0
 800063e:	61bb      	str	r3, [r7, #24]
 8000640:	e01e      	b.n	8000680 <ADC_DMAxInit+0xa4>
	}else if(hadcx == &hadc2){
 8000642:	68bb      	ldr	r3, [r7, #8]
 8000644:	4a4e      	ldr	r2, [pc, #312]	; (8000780 <ADC_DMAxInit+0x1a4>)
 8000646:	4293      	cmp	r3, r2
 8000648:	d10b      	bne.n	8000662 <ADC_DMAxInit+0x86>
		hadcx->Instance = ADC2;
 800064a:	68bb      	ldr	r3, [r7, #8]
 800064c:	4a4d      	ldr	r2, [pc, #308]	; (8000784 <ADC_DMAxInit+0x1a8>)
 800064e:	601a      	str	r2, [r3, #0]
		hdma_adcx->Instance = DMA2_Stream2;
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	4a4d      	ldr	r2, [pc, #308]	; (8000788 <ADC_DMAxInit+0x1ac>)
 8000654:	601a      	str	r2, [r3, #0]
		nvic = DMA2_Stream2_IRQn;
 8000656:	233a      	movs	r3, #58	; 0x3a
 8000658:	77fb      	strb	r3, [r7, #31]
		DMA_CHANNEL = DMA_CHANNEL_1;
 800065a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800065e:	61bb      	str	r3, [r7, #24]
 8000660:	e00e      	b.n	8000680 <ADC_DMAxInit+0xa4>
	}else if (hadcx == &hadc3){
 8000662:	68bb      	ldr	r3, [r7, #8]
 8000664:	4a49      	ldr	r2, [pc, #292]	; (800078c <ADC_DMAxInit+0x1b0>)
 8000666:	4293      	cmp	r3, r2
 8000668:	d10a      	bne.n	8000680 <ADC_DMAxInit+0xa4>
		hadcx->Instance = ADC3;
 800066a:	68bb      	ldr	r3, [r7, #8]
 800066c:	4a48      	ldr	r2, [pc, #288]	; (8000790 <ADC_DMAxInit+0x1b4>)
 800066e:	601a      	str	r2, [r3, #0]
		hdma_adcx->Instance = DMA2_Stream1;
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	4a48      	ldr	r2, [pc, #288]	; (8000794 <ADC_DMAxInit+0x1b8>)
 8000674:	601a      	str	r2, [r3, #0]
		nvic = DMA2_Stream1_IRQn;
 8000676:	2339      	movs	r3, #57	; 0x39
 8000678:	77fb      	strb	r3, [r7, #31]
		DMA_CHANNEL = DMA_CHANNEL_2;
 800067a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800067e:	61bb      	str	r3, [r7, #24]
	}


	hadcx->Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000680:	68bb      	ldr	r3, [r7, #8]
 8000682:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000686:	605a      	str	r2, [r3, #4]
	hadcx->Init.Resolution = ADC_RESOLUTION_12B;
 8000688:	68bb      	ldr	r3, [r7, #8]
 800068a:	2200      	movs	r2, #0
 800068c:	609a      	str	r2, [r3, #8]
	hadcx->Init.ScanConvMode = ENABLE;
 800068e:	68bb      	ldr	r3, [r7, #8]
 8000690:	2201      	movs	r2, #1
 8000692:	611a      	str	r2, [r3, #16]
	hadcx->Init.ContinuousConvMode = ENABLE;
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	2201      	movs	r2, #1
 8000698:	761a      	strb	r2, [r3, #24]
	hadcx->Init.DiscontinuousConvMode = DISABLE;
 800069a:	68bb      	ldr	r3, [r7, #8]
 800069c:	2200      	movs	r2, #0
 800069e:	f883 2020 	strb.w	r2, [r3, #32]
	hadcx->Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006a2:	68bb      	ldr	r3, [r7, #8]
 80006a4:	2200      	movs	r2, #0
 80006a6:	62da      	str	r2, [r3, #44]	; 0x2c
	hadcx->Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006a8:	68bb      	ldr	r3, [r7, #8]
 80006aa:	4a3b      	ldr	r2, [pc, #236]	; (8000798 <ADC_DMAxInit+0x1bc>)
 80006ac:	629a      	str	r2, [r3, #40]	; 0x28
	hadcx->Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006ae:	68bb      	ldr	r3, [r7, #8]
 80006b0:	2200      	movs	r2, #0
 80006b2:	60da      	str	r2, [r3, #12]
	hadcx->Init.NbrOfConversion = ChannelNo;
 80006b4:	68bb      	ldr	r3, [r7, #8]
 80006b6:	683a      	ldr	r2, [r7, #0]
 80006b8:	61da      	str	r2, [r3, #28]
	hadcx->Init.DMAContinuousRequests = ENABLE;
 80006ba:	68bb      	ldr	r3, [r7, #8]
 80006bc:	2201      	movs	r2, #1
 80006be:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadcx->Init.EOCSelection = DISABLE;
 80006c2:	68bb      	ldr	r3, [r7, #8]
 80006c4:	2200      	movs	r2, #0
 80006c6:	615a      	str	r2, [r3, #20]
	hadcx->Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006c8:	68bb      	ldr	r3, [r7, #8]
 80006ca:	2201      	movs	r2, #1
 80006cc:	615a      	str	r2, [r3, #20]

	if (HAL_ADC_Init(hadcx) != HAL_OK)
 80006ce:	68b8      	ldr	r0, [r7, #8]
 80006d0:	f004 fd76 	bl	80051c0 <HAL_ADC_Init>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <ADC_DMAxInit+0x102>
	{
		Error_Handler();
 80006da:	f002 feab 	bl	8003434 <Error_Handler>
	}

	hdma_adcx->Init.Channel = DMA_CHANNEL;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	69ba      	ldr	r2, [r7, #24]
 80006e2:	605a      	str	r2, [r3, #4]
	hdma_adcx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	2200      	movs	r2, #0
 80006e8:	609a      	str	r2, [r3, #8]
	hdma_adcx->Init.PeriphInc = DMA_PINC_DISABLE;
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	2200      	movs	r2, #0
 80006ee:	60da      	str	r2, [r3, #12]
	hdma_adcx->Init.MemInc = DMA_MINC_ENABLE;
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006f6:	611a      	str	r2, [r3, #16]
	hdma_adcx->Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80006fe:	615a      	str	r2, [r3, #20]
	hdma_adcx->Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000706:	619a      	str	r2, [r3, #24]
	hdma_adcx->Init.Mode = DMA_CIRCULAR;
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800070e:	61da      	str	r2, [r3, #28]
	hdma_adcx->Init.Priority = DMA_PRIORITY_HIGH;
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000716:	621a      	str	r2, [r3, #32]
	hdma_adcx->Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	2200      	movs	r2, #0
 800071c:	625a      	str	r2, [r3, #36]	; 0x24
	hdma_adcx->Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	2203      	movs	r2, #3
 8000722:	629a      	str	r2, [r3, #40]	; 0x28
	hdma_adcx->Init.MemBurst = DMA_MBURST_INC4;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800072a:	62da      	str	r2, [r3, #44]	; 0x2c
	hdma_adcx->Init.PeriphBurst = DMA_PBURST_INC4;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000732:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_DMA_Init(hdma_adcx) != HAL_OK)
 8000734:	6878      	ldr	r0, [r7, #4]
 8000736:	f005 fd9d 	bl	8006274 <HAL_DMA_Init>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <ADC_DMAxInit+0x168>
	{
		Error_Handler();
 8000740:	f002 fe78 	bl	8003434 <Error_Handler>
	}

	__HAL_LINKDMA(hadcx,DMA_Handle,*hdma_adcx);
 8000744:	68bb      	ldr	r3, [r7, #8]
 8000746:	687a      	ldr	r2, [r7, #4]
 8000748:	639a      	str	r2, [r3, #56]	; 0x38
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	68ba      	ldr	r2, [r7, #8]
 800074e:	639a      	str	r2, [r3, #56]	; 0x38

	HAL_NVIC_SetPriority(nvic, dmapreemptionpriority ,dmasubpriority);
 8000750:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8000752:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000754:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000758:	4618      	mov	r0, r3
 800075a:	f005 fd54 	bl	8006206 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(nvic);
 800075e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000762:	4618      	mov	r0, r3
 8000764:	f005 fd6b 	bl	800623e <HAL_NVIC_EnableIRQ>

}
 8000768:	bf00      	nop
 800076a:	3720      	adds	r7, #32
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	40023800 	.word	0x40023800
 8000774:	20000fcc 	.word	0x20000fcc
 8000778:	40012000 	.word	0x40012000
 800077c:	40026410 	.word	0x40026410
 8000780:	20000f24 	.word	0x20000f24
 8000784:	40012100 	.word	0x40012100
 8000788:	40026440 	.word	0x40026440
 800078c:	20001014 	.word	0x20001014
 8000790:	40012200 	.word	0x40012200
 8000794:	40026428 	.word	0x40026428
 8000798:	0f000001 	.word	0x0f000001

0800079c <ADC_Channel_Config>:
 * 						  DMA_GPIO_Pin				DMA pin
 * Function Return		: None
 * Function Example		: ADC_Channel_Config(&adc1,ADC_CHANNEL_10,IP16_Analog1_PIN);
 */
void ADC_Channel_Config(ADC_t* ADC_t,uint32_t ADC_Channel, GPIO_TypeDef* DMA_GPIOx, uint16_t DMA_GPIO_Pin)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b08a      	sub	sp, #40	; 0x28
 80007a0:	af02      	add	r7, sp, #8
 80007a2:	60f8      	str	r0, [r7, #12]
 80007a4:	60b9      	str	r1, [r7, #8]
 80007a6:	607a      	str	r2, [r7, #4]
 80007a8:	807b      	strh	r3, [r7, #2]

	GPIOPinsInit (DMA_GPIOx, DMA_GPIO_Pin, GPIO_MODE_ANALOG, GPIO_SPEED_FREQ_VERY_HIGH,  GPIO_NOPULL);
 80007aa:	8879      	ldrh	r1, [r7, #2]
 80007ac:	2300      	movs	r3, #0
 80007ae:	9300      	str	r3, [sp, #0]
 80007b0:	2303      	movs	r3, #3
 80007b2:	2203      	movs	r2, #3
 80007b4:	6878      	ldr	r0, [r7, #4]
 80007b6:	f000 f8df 	bl	8000978 <GPIOPinsInit>

	ADC_ChannelConfTypeDef sConfig = {0};
 80007ba:	f107 0310 	add.w	r3, r7, #16
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]
 80007c4:	609a      	str	r2, [r3, #8]
 80007c6:	60da      	str	r2, [r3, #12]

	sConfig.Channel = ADC_Channel;
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	613b      	str	r3, [r7, #16]
	sConfig.Rank = (ADC_t->ADC_rank)++;
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	795b      	ldrb	r3, [r3, #5]
 80007d0:	1c5a      	adds	r2, r3, #1
 80007d2:	b2d1      	uxtb	r1, r2
 80007d4:	68fa      	ldr	r2, [r7, #12]
 80007d6:	7151      	strb	r1, [r2, #5]
 80007d8:	617b      	str	r3, [r7, #20]
	sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES ;
 80007da:	2306      	movs	r3, #6
 80007dc:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(ADC_t->hadcx, &sConfig) != HAL_OK)
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	f107 0210 	add.w	r2, r7, #16
 80007e6:	4611      	mov	r1, r2
 80007e8:	4618      	mov	r0, r3
 80007ea:	f004 fe33 	bl	8005454 <HAL_ADC_ConfigChannel>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <ADC_Channel_Config+0x5c>
	{
		Error_Handler();
 80007f4:	f002 fe1e 	bl	8003434 <Error_Handler>
	}

	HAL_ADC_Start_DMA(ADC_t->hadcx, (uint32_t *)ADC_t->ADC_valuep, ADC_t->ADC_number);
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	6818      	ldr	r0, [r3, #0]
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	6899      	ldr	r1, [r3, #8]
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	791b      	ldrb	r3, [r3, #4]
 8000804:	461a      	mov	r2, r3
 8000806:	f004 fd1f 	bl	8005248 <HAL_ADC_Start_DMA>

}
 800080a:	bf00      	nop
 800080c:	3720      	adds	r7, #32
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
	...

08000814 <DMA2_Stream0_IRQHandler>:
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void DMA2_Stream0_IRQHandler(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0

	HAL_DMA_IRQHandler(&hdma_adc1);
 8000818:	4805      	ldr	r0, [pc, #20]	; (8000830 <DMA2_Stream0_IRQHandler+0x1c>)
 800081a:	f005 fe53 	bl	80064c4 <HAL_DMA_IRQHandler>
	HAL_DMA_IRQHandler(&hdma_adc2);
 800081e:	4805      	ldr	r0, [pc, #20]	; (8000834 <DMA2_Stream0_IRQHandler+0x20>)
 8000820:	f005 fe50 	bl	80064c4 <HAL_DMA_IRQHandler>
	HAL_DMA_IRQHandler(&hdma_adc3);
 8000824:	4804      	ldr	r0, [pc, #16]	; (8000838 <DMA2_Stream0_IRQHandler+0x24>)
 8000826:	f005 fe4d 	bl	80064c4 <HAL_DMA_IRQHandler>

}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	2000105c 	.word	0x2000105c
 8000834:	200010bc 	.word	0x200010bc
 8000838:	20000f6c 	.word	0x20000f6c

0800083c <DMA2_Stream1_IRQHandler>:
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void DMA2_Stream1_IRQHandler(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0

	HAL_DMA_IRQHandler(&hdma_adc1);
 8000840:	4805      	ldr	r0, [pc, #20]	; (8000858 <DMA2_Stream1_IRQHandler+0x1c>)
 8000842:	f005 fe3f 	bl	80064c4 <HAL_DMA_IRQHandler>
	HAL_DMA_IRQHandler(&hdma_adc2);
 8000846:	4805      	ldr	r0, [pc, #20]	; (800085c <DMA2_Stream1_IRQHandler+0x20>)
 8000848:	f005 fe3c 	bl	80064c4 <HAL_DMA_IRQHandler>
	HAL_DMA_IRQHandler(&hdma_adc3);
 800084c:	4804      	ldr	r0, [pc, #16]	; (8000860 <DMA2_Stream1_IRQHandler+0x24>)
 800084e:	f005 fe39 	bl	80064c4 <HAL_DMA_IRQHandler>

}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	2000105c 	.word	0x2000105c
 800085c:	200010bc 	.word	0x200010bc
 8000860:	20000f6c 	.word	0x20000f6c

08000864 <BDCInit>:
 * Function Return		: None
 * Function Example		: BDCInit(&BDC1, &htim3, TIM_CHANNEL_4, SHIFTREG, &(SR.cast[1]), Bit6, Bit7);
 * 						  BDCInit(&BDC2, &htim3, TIM_CHANNEL_1, GPIO, GPIOA, GPIO_Pin_9, GPIOA, GPIO_Pin_10);
 */

void BDCInit(BDC_t* bdc,TIM_HandleTypeDef* htimx,uint32_t Channel, BCDDIRPINType Dirpintype, ...){
 8000864:	b408      	push	{r3}
 8000866:	b580      	push	{r7, lr}
 8000868:	b089      	sub	sp, #36	; 0x24
 800086a:	af02      	add	r7, sp, #8
 800086c:	60f8      	str	r0, [r7, #12]
 800086e:	60b9      	str	r1, [r7, #8]
 8000870:	607a      	str	r2, [r7, #4]

	bdc->htim = htimx;
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	68ba      	ldr	r2, [r7, #8]
 8000876:	61da      	str	r2, [r3, #28]
	bdc->Channel = Channel;
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	687a      	ldr	r2, [r7, #4]
 800087c:	621a      	str	r2, [r3, #32]
	bdc->Dirpintype =  Dirpintype;
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000884:	701a      	strb	r2, [r3, #0]

	va_list pinconfig;
	va_start(pinconfig, Dirpintype);
 8000886:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800088a:	617b      	str	r3, [r7, #20]

	if( bdc->Dirpintype == GPIO){
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	2b01      	cmp	r3, #1
 8000892:	d12e      	bne.n	80008f2 <BDCInit+0x8e>

		bdc->GPIOx_DIR1 = va_arg(pinconfig, GPIO_TypeDef*);
 8000894:	697b      	ldr	r3, [r7, #20]
 8000896:	1d1a      	adds	r2, r3, #4
 8000898:	617a      	str	r2, [r7, #20]
 800089a:	681a      	ldr	r2, [r3, #0]
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	605a      	str	r2, [r3, #4]
		bdc->GPIO_Pin_DIR1	= va_arg(pinconfig, int);
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	1d1a      	adds	r2, r3, #4
 80008a4:	617a      	str	r2, [r7, #20]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	b29a      	uxth	r2, r3
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	811a      	strh	r2, [r3, #8]
		bdc->GPIOx_DIR2 = va_arg(pinconfig, GPIO_TypeDef*);
 80008ae:	697b      	ldr	r3, [r7, #20]
 80008b0:	1d1a      	adds	r2, r3, #4
 80008b2:	617a      	str	r2, [r7, #20]
 80008b4:	681a      	ldr	r2, [r3, #0]
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	60da      	str	r2, [r3, #12]
		bdc->GPIO_Pin_DIR2	= va_arg(pinconfig, int);
 80008ba:	697b      	ldr	r3, [r7, #20]
 80008bc:	1d1a      	adds	r2, r3, #4
 80008be:	617a      	str	r2, [r7, #20]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	b29a      	uxth	r2, r3
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	821a      	strh	r2, [r3, #16]



		GPIOPinsInit(bdc->GPIOx_DIR1, bdc->GPIO_Pin_DIR1,GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	6858      	ldr	r0, [r3, #4]
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	8919      	ldrh	r1, [r3, #8]
 80008d0:	2301      	movs	r3, #1
 80008d2:	9300      	str	r3, [sp, #0]
 80008d4:	2302      	movs	r3, #2
 80008d6:	2201      	movs	r2, #1
 80008d8:	f000 f84e 	bl	8000978 <GPIOPinsInit>
		GPIOPinsInit(bdc->GPIOx_DIR2, bdc->GPIO_Pin_DIR2,GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	68d8      	ldr	r0, [r3, #12]
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	8a19      	ldrh	r1, [r3, #16]
 80008e4:	2301      	movs	r3, #1
 80008e6:	9300      	str	r3, [sp, #0]
 80008e8:	2302      	movs	r3, #2
 80008ea:	2201      	movs	r2, #1
 80008ec:	f000 f844 	bl	8000978 <GPIOPinsInit>
 80008f0:	e017      	b.n	8000922 <BDCInit+0xbe>

	}else if(bdc->Dirpintype == SHIFTREG){
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d113      	bne.n	8000922 <BDCInit+0xbe>

		bdc->shiftreg = va_arg(pinconfig, byte_t *);
 80008fa:	697b      	ldr	r3, [r7, #20]
 80008fc:	1d1a      	adds	r2, r3, #4
 80008fe:	617a      	str	r2, [r7, #20]
 8000900:	681a      	ldr	r2, [r3, #0]
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	615a      	str	r2, [r3, #20]
		bdc->dir1 = va_arg(pinconfig, int);
 8000906:	697b      	ldr	r3, [r7, #20]
 8000908:	1d1a      	adds	r2, r3, #4
 800090a:	617a      	str	r2, [r7, #20]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	b2da      	uxtb	r2, r3
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	761a      	strb	r2, [r3, #24]
		bdc->dir2 = va_arg(pinconfig, int);
 8000914:	697b      	ldr	r3, [r7, #20]
 8000916:	1d1a      	adds	r2, r3, #4
 8000918:	617a      	str	r2, [r7, #20]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	b2da      	uxtb	r2, r3
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	765a      	strb	r2, [r3, #25]
	}

	va_end(pinconfig);
	__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), 0);
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	6a1b      	ldr	r3, [r3, #32]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d105      	bne.n	8000936 <BDCInit+0xd2>
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	69db      	ldr	r3, [r3, #28]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	2200      	movs	r2, #0
 8000932:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000934:	e018      	b.n	8000968 <BDCInit+0x104>
	__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), 0);
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	6a1b      	ldr	r3, [r3, #32]
 800093a:	2b04      	cmp	r3, #4
 800093c:	d105      	bne.n	800094a <BDCInit+0xe6>
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	69db      	ldr	r3, [r3, #28]
 8000942:	681a      	ldr	r2, [r3, #0]
 8000944:	2300      	movs	r3, #0
 8000946:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000948:	e00e      	b.n	8000968 <BDCInit+0x104>
	__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), 0);
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	6a1b      	ldr	r3, [r3, #32]
 800094e:	2b08      	cmp	r3, #8
 8000950:	d105      	bne.n	800095e <BDCInit+0xfa>
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	69db      	ldr	r3, [r3, #28]
 8000956:	681a      	ldr	r2, [r3, #0]
 8000958:	2300      	movs	r3, #0
 800095a:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800095c:	e004      	b.n	8000968 <BDCInit+0x104>
	__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), 0);
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	69db      	ldr	r3, [r3, #28]
 8000962:	681a      	ldr	r2, [r3, #0]
 8000964:	2300      	movs	r3, #0
 8000966:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000968:	bf00      	nop
 800096a:	371c      	adds	r7, #28
 800096c:	46bd      	mov	sp, r7
 800096e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000972:	b001      	add	sp, #4
 8000974:	4770      	bx	lr
	...

08000978 <GPIOPinsInit>:
 * Function Return		: None
 * Function Example		: GPIOPinsInit(GPIOA, GPIO_Pin_2, GPIO_Mode_OUT, GPIO_OType_PP, GPIO_Speed_50MHz, GPIO_PuPd_UP);
 */

void GPIOPinsInit (GPIO_TypeDef * GPIOx, uint16_t GPIO_Pin,uint32_t Mode, uint32_t GPIO_Speed,  uint32_t GPIO_PuPd)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b092      	sub	sp, #72	; 0x48
 800097c:	af00      	add	r7, sp, #0
 800097e:	60f8      	str	r0, [r7, #12]
 8000980:	607a      	str	r2, [r7, #4]
 8000982:	603b      	str	r3, [r7, #0]
 8000984:	460b      	mov	r3, r1
 8000986:	817b      	strh	r3, [r7, #10]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000988:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
 8000994:	60da      	str	r2, [r3, #12]
 8000996:	611a      	str	r2, [r3, #16]

	switch((uint32_t)GPIOx){
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	4a6a      	ldr	r2, [pc, #424]	; (8000b44 <GPIOPinsInit+0x1cc>)
 800099c:	4293      	cmp	r3, r2
 800099e:	f000 80af 	beq.w	8000b00 <GPIOPinsInit+0x188>
 80009a2:	4a68      	ldr	r2, [pc, #416]	; (8000b44 <GPIOPinsInit+0x1cc>)
 80009a4:	4293      	cmp	r3, r2
 80009a6:	f200 80ba 	bhi.w	8000b1e <GPIOPinsInit+0x1a6>
 80009aa:	4a67      	ldr	r2, [pc, #412]	; (8000b48 <GPIOPinsInit+0x1d0>)
 80009ac:	4293      	cmp	r3, r2
 80009ae:	f000 8098 	beq.w	8000ae2 <GPIOPinsInit+0x16a>
 80009b2:	4a65      	ldr	r2, [pc, #404]	; (8000b48 <GPIOPinsInit+0x1d0>)
 80009b4:	4293      	cmp	r3, r2
 80009b6:	f200 80b2 	bhi.w	8000b1e <GPIOPinsInit+0x1a6>
 80009ba:	4a64      	ldr	r2, [pc, #400]	; (8000b4c <GPIOPinsInit+0x1d4>)
 80009bc:	4293      	cmp	r3, r2
 80009be:	f000 8081 	beq.w	8000ac4 <GPIOPinsInit+0x14c>
 80009c2:	4a62      	ldr	r2, [pc, #392]	; (8000b4c <GPIOPinsInit+0x1d4>)
 80009c4:	4293      	cmp	r3, r2
 80009c6:	f200 80aa 	bhi.w	8000b1e <GPIOPinsInit+0x1a6>
 80009ca:	4a61      	ldr	r2, [pc, #388]	; (8000b50 <GPIOPinsInit+0x1d8>)
 80009cc:	4293      	cmp	r3, r2
 80009ce:	d06a      	beq.n	8000aa6 <GPIOPinsInit+0x12e>
 80009d0:	4a5f      	ldr	r2, [pc, #380]	; (8000b50 <GPIOPinsInit+0x1d8>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	f200 80a3 	bhi.w	8000b1e <GPIOPinsInit+0x1a6>
 80009d8:	4a5e      	ldr	r2, [pc, #376]	; (8000b54 <GPIOPinsInit+0x1dc>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d054      	beq.n	8000a88 <GPIOPinsInit+0x110>
 80009de:	4a5d      	ldr	r2, [pc, #372]	; (8000b54 <GPIOPinsInit+0x1dc>)
 80009e0:	4293      	cmp	r3, r2
 80009e2:	f200 809c 	bhi.w	8000b1e <GPIOPinsInit+0x1a6>
 80009e6:	4a5c      	ldr	r2, [pc, #368]	; (8000b58 <GPIOPinsInit+0x1e0>)
 80009e8:	4293      	cmp	r3, r2
 80009ea:	d03e      	beq.n	8000a6a <GPIOPinsInit+0xf2>
 80009ec:	4a5a      	ldr	r2, [pc, #360]	; (8000b58 <GPIOPinsInit+0x1e0>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	f200 8095 	bhi.w	8000b1e <GPIOPinsInit+0x1a6>
 80009f4:	4a59      	ldr	r2, [pc, #356]	; (8000b5c <GPIOPinsInit+0x1e4>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d028      	beq.n	8000a4c <GPIOPinsInit+0xd4>
 80009fa:	4a58      	ldr	r2, [pc, #352]	; (8000b5c <GPIOPinsInit+0x1e4>)
 80009fc:	4293      	cmp	r3, r2
 80009fe:	f200 808e 	bhi.w	8000b1e <GPIOPinsInit+0x1a6>
 8000a02:	4a57      	ldr	r2, [pc, #348]	; (8000b60 <GPIOPinsInit+0x1e8>)
 8000a04:	4293      	cmp	r3, r2
 8000a06:	d003      	beq.n	8000a10 <GPIOPinsInit+0x98>
 8000a08:	4a56      	ldr	r2, [pc, #344]	; (8000b64 <GPIOPinsInit+0x1ec>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d00f      	beq.n	8000a2e <GPIOPinsInit+0xb6>
	break;

	case GPIOI_BASE:	__HAL_RCC_GPIOI_CLK_ENABLE();
	break;

	default: break;
 8000a0e:	e086      	b.n	8000b1e <GPIOPinsInit+0x1a6>
	case GPIOA_BASE:	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a10:	2300      	movs	r3, #0
 8000a12:	633b      	str	r3, [r7, #48]	; 0x30
 8000a14:	4b54      	ldr	r3, [pc, #336]	; (8000b68 <GPIOPinsInit+0x1f0>)
 8000a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a18:	4a53      	ldr	r2, [pc, #332]	; (8000b68 <GPIOPinsInit+0x1f0>)
 8000a1a:	f043 0301 	orr.w	r3, r3, #1
 8000a1e:	6313      	str	r3, [r2, #48]	; 0x30
 8000a20:	4b51      	ldr	r3, [pc, #324]	; (8000b68 <GPIOPinsInit+0x1f0>)
 8000a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a24:	f003 0301 	and.w	r3, r3, #1
 8000a28:	633b      	str	r3, [r7, #48]	; 0x30
 8000a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
	break;
 8000a2c:	e078      	b.n	8000b20 <GPIOPinsInit+0x1a8>
	case GPIOB_BASE:	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a32:	4b4d      	ldr	r3, [pc, #308]	; (8000b68 <GPIOPinsInit+0x1f0>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	4a4c      	ldr	r2, [pc, #304]	; (8000b68 <GPIOPinsInit+0x1f0>)
 8000a38:	f043 0302 	orr.w	r3, r3, #2
 8000a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3e:	4b4a      	ldr	r3, [pc, #296]	; (8000b68 <GPIOPinsInit+0x1f0>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	f003 0302 	and.w	r3, r3, #2
 8000a46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	break;
 8000a4a:	e069      	b.n	8000b20 <GPIOPinsInit+0x1a8>
	case GPIOC_BASE:	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a50:	4b45      	ldr	r3, [pc, #276]	; (8000b68 <GPIOPinsInit+0x1f0>)
 8000a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a54:	4a44      	ldr	r2, [pc, #272]	; (8000b68 <GPIOPinsInit+0x1f0>)
 8000a56:	f043 0304 	orr.w	r3, r3, #4
 8000a5a:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5c:	4b42      	ldr	r3, [pc, #264]	; (8000b68 <GPIOPinsInit+0x1f0>)
 8000a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a60:	f003 0304 	and.w	r3, r3, #4
 8000a64:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
	break;
 8000a68:	e05a      	b.n	8000b20 <GPIOPinsInit+0x1a8>
	case GPIOD_BASE:	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	627b      	str	r3, [r7, #36]	; 0x24
 8000a6e:	4b3e      	ldr	r3, [pc, #248]	; (8000b68 <GPIOPinsInit+0x1f0>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	4a3d      	ldr	r2, [pc, #244]	; (8000b68 <GPIOPinsInit+0x1f0>)
 8000a74:	f043 0308 	orr.w	r3, r3, #8
 8000a78:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7a:	4b3b      	ldr	r3, [pc, #236]	; (8000b68 <GPIOPinsInit+0x1f0>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	f003 0308 	and.w	r3, r3, #8
 8000a82:	627b      	str	r3, [r7, #36]	; 0x24
 8000a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	break;
 8000a86:	e04b      	b.n	8000b20 <GPIOPinsInit+0x1a8>
	case GPIOE_BASE:	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000a88:	2300      	movs	r3, #0
 8000a8a:	623b      	str	r3, [r7, #32]
 8000a8c:	4b36      	ldr	r3, [pc, #216]	; (8000b68 <GPIOPinsInit+0x1f0>)
 8000a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a90:	4a35      	ldr	r2, [pc, #212]	; (8000b68 <GPIOPinsInit+0x1f0>)
 8000a92:	f043 0310 	orr.w	r3, r3, #16
 8000a96:	6313      	str	r3, [r2, #48]	; 0x30
 8000a98:	4b33      	ldr	r3, [pc, #204]	; (8000b68 <GPIOPinsInit+0x1f0>)
 8000a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9c:	f003 0310 	and.w	r3, r3, #16
 8000aa0:	623b      	str	r3, [r7, #32]
 8000aa2:	6a3b      	ldr	r3, [r7, #32]
	break;
 8000aa4:	e03c      	b.n	8000b20 <GPIOPinsInit+0x1a8>
	case GPIOF_BASE:	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	61fb      	str	r3, [r7, #28]
 8000aaa:	4b2f      	ldr	r3, [pc, #188]	; (8000b68 <GPIOPinsInit+0x1f0>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	4a2e      	ldr	r2, [pc, #184]	; (8000b68 <GPIOPinsInit+0x1f0>)
 8000ab0:	f043 0320 	orr.w	r3, r3, #32
 8000ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab6:	4b2c      	ldr	r3, [pc, #176]	; (8000b68 <GPIOPinsInit+0x1f0>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	f003 0320 	and.w	r3, r3, #32
 8000abe:	61fb      	str	r3, [r7, #28]
 8000ac0:	69fb      	ldr	r3, [r7, #28]
	break;
 8000ac2:	e02d      	b.n	8000b20 <GPIOPinsInit+0x1a8>
	case GPIOG_BASE:	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	61bb      	str	r3, [r7, #24]
 8000ac8:	4b27      	ldr	r3, [pc, #156]	; (8000b68 <GPIOPinsInit+0x1f0>)
 8000aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000acc:	4a26      	ldr	r2, [pc, #152]	; (8000b68 <GPIOPinsInit+0x1f0>)
 8000ace:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ad2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad4:	4b24      	ldr	r3, [pc, #144]	; (8000b68 <GPIOPinsInit+0x1f0>)
 8000ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000adc:	61bb      	str	r3, [r7, #24]
 8000ade:	69bb      	ldr	r3, [r7, #24]
	break;
 8000ae0:	e01e      	b.n	8000b20 <GPIOPinsInit+0x1a8>
	case GPIOH_BASE:	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	617b      	str	r3, [r7, #20]
 8000ae6:	4b20      	ldr	r3, [pc, #128]	; (8000b68 <GPIOPinsInit+0x1f0>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	4a1f      	ldr	r2, [pc, #124]	; (8000b68 <GPIOPinsInit+0x1f0>)
 8000aec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000af0:	6313      	str	r3, [r2, #48]	; 0x30
 8000af2:	4b1d      	ldr	r3, [pc, #116]	; (8000b68 <GPIOPinsInit+0x1f0>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000afa:	617b      	str	r3, [r7, #20]
 8000afc:	697b      	ldr	r3, [r7, #20]
	break;
 8000afe:	e00f      	b.n	8000b20 <GPIOPinsInit+0x1a8>
	case GPIOI_BASE:	__HAL_RCC_GPIOI_CLK_ENABLE();
 8000b00:	2300      	movs	r3, #0
 8000b02:	613b      	str	r3, [r7, #16]
 8000b04:	4b18      	ldr	r3, [pc, #96]	; (8000b68 <GPIOPinsInit+0x1f0>)
 8000b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b08:	4a17      	ldr	r2, [pc, #92]	; (8000b68 <GPIOPinsInit+0x1f0>)
 8000b0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b0e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b10:	4b15      	ldr	r3, [pc, #84]	; (8000b68 <GPIOPinsInit+0x1f0>)
 8000b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b18:	613b      	str	r3, [r7, #16]
 8000b1a:	693b      	ldr	r3, [r7, #16]
	break;
 8000b1c:	e000      	b.n	8000b20 <GPIOPinsInit+0x1a8>
	default: break;
 8000b1e:	bf00      	nop
	}


	GPIO_InitStruct.Pin = GPIO_Pin;
 8000b20:	897b      	ldrh	r3, [r7, #10]
 8000b22:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Mode = Mode;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_PuPd;
 8000b28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_Speed;
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	643b      	str	r3, [r7, #64]	; 0x40
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000b30:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b34:	4619      	mov	r1, r3
 8000b36:	68f8      	ldr	r0, [r7, #12]
 8000b38:	f005 ff3c 	bl	80069b4 <HAL_GPIO_Init>

}
 8000b3c:	bf00      	nop
 8000b3e:	3748      	adds	r7, #72	; 0x48
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	40022000 	.word	0x40022000
 8000b48:	40021c00 	.word	0x40021c00
 8000b4c:	40021800 	.word	0x40021800
 8000b50:	40021400 	.word	0x40021400
 8000b54:	40021000 	.word	0x40021000
 8000b58:	40020c00 	.word	0x40020c00
 8000b5c:	40020800 	.word	0x40020800
 8000b60:	40020000 	.word	0x40020000
 8000b64:	40020400 	.word	0x40020400
 8000b68:	40023800 	.word	0x40023800

08000b6c <MUXInit>:
 * Function Example		: MUXInit(&mux1, GPIOD, GPIO_Pin_0, GPIOD, GPIO_Pin_1, GPIOD, GPIO_Pin_2, GPIOD, GPIO_Pin_3);
 */
void MUXInit(MUX_t* mux,GPIO_TypeDef *GPIOx_Input,uint16_t GPIO_Pin_Input,GPIO_TypeDef *GPIOx_S0,
		uint16_t GPIO_Pin_S0,GPIO_TypeDef *GPIOx_S1,uint16_t GPIO_Pin_S1,GPIO_TypeDef *GPIOx_S2,
		uint16_t GPIO_Pin_S2)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b086      	sub	sp, #24
 8000b70:	af02      	add	r7, sp, #8
 8000b72:	60f8      	str	r0, [r7, #12]
 8000b74:	60b9      	str	r1, [r7, #8]
 8000b76:	603b      	str	r3, [r7, #0]
 8000b78:	4613      	mov	r3, r2
 8000b7a:	80fb      	strh	r3, [r7, #6]
	mux->GPIOx_Input = GPIOx_Input;
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	68ba      	ldr	r2, [r7, #8]
 8000b80:	601a      	str	r2, [r3, #0]
	mux->GPIO_Pin_Input = GPIO_Pin_Input;
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	88fa      	ldrh	r2, [r7, #6]
 8000b86:	809a      	strh	r2, [r3, #4]
	mux->GPIOx_S0 = GPIOx_S0;
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	683a      	ldr	r2, [r7, #0]
 8000b8c:	609a      	str	r2, [r3, #8]
	mux->GPIO_Pin_S0 = GPIO_Pin_S0;
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	8b3a      	ldrh	r2, [r7, #24]
 8000b92:	819a      	strh	r2, [r3, #12]
	mux->GPIOx_S1 = GPIOx_S1;
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	69fa      	ldr	r2, [r7, #28]
 8000b98:	611a      	str	r2, [r3, #16]
	mux->GPIO_Pin_S1 = GPIO_Pin_S1;
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	8c3a      	ldrh	r2, [r7, #32]
 8000b9e:	829a      	strh	r2, [r3, #20]
	mux->GPIOx_S2 = GPIOx_S2;
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ba4:	619a      	str	r2, [r3, #24]
	mux->GPIO_Pin_S2 = GPIO_Pin_S2;
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000baa:	839a      	strh	r2, [r3, #28]

	GPIOPinsInit(mux->GPIOx_Input,mux->GPIO_Pin_Input,GPIO_MODE_INPUT,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	6818      	ldr	r0, [r3, #0]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	8899      	ldrh	r1, [r3, #4]
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	9300      	str	r3, [sp, #0]
 8000bb8:	2302      	movs	r3, #2
 8000bba:	2200      	movs	r2, #0
 8000bbc:	f7ff fedc 	bl	8000978 <GPIOPinsInit>
	GPIOPinsInit(mux->GPIOx_S0,mux->GPIO_Pin_S0, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	6898      	ldr	r0, [r3, #8]
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	8999      	ldrh	r1, [r3, #12]
 8000bc8:	2301      	movs	r3, #1
 8000bca:	9300      	str	r3, [sp, #0]
 8000bcc:	2302      	movs	r3, #2
 8000bce:	2201      	movs	r2, #1
 8000bd0:	f7ff fed2 	bl	8000978 <GPIOPinsInit>
	GPIOPinsInit(mux->GPIOx_S1,mux->GPIO_Pin_S1, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	6918      	ldr	r0, [r3, #16]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	8a99      	ldrh	r1, [r3, #20]
 8000bdc:	2301      	movs	r3, #1
 8000bde:	9300      	str	r3, [sp, #0]
 8000be0:	2302      	movs	r3, #2
 8000be2:	2201      	movs	r2, #1
 8000be4:	f7ff fec8 	bl	8000978 <GPIOPinsInit>
	GPIOPinsInit(mux->GPIOx_S2,mux->GPIO_Pin_S2, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	6998      	ldr	r0, [r3, #24]
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	8b99      	ldrh	r1, [r3, #28]
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	9300      	str	r3, [sp, #0]
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	f7ff febe 	bl	8000978 <GPIOPinsInit>

}
 8000bfc:	bf00      	nop
 8000bfe:	3710      	adds	r7, #16
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <MUXSelect>:
 * 						  select	selected input channel of multiplexer
 * Function Return		: Read data bit from multiplexer
 * Function Example		: mux->bit0 = MUXSelect(&mux, 0);
 */
uint8_t MUXSelect(MUX_t* mux, uint8_t select)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
 8000c0c:	460b      	mov	r3, r1
 8000c0e:	70fb      	strb	r3, [r7, #3]
	mux->select = select;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	78fa      	ldrb	r2, [r7, #3]
 8000c14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	(mux->s0 == 1) ? HAL_GPIO_WritePin(mux->GPIOx_S0, mux->GPIO_Pin_S0, GPIO_PIN_SET) : HAL_GPIO_WritePin(mux->GPIOx_S0, mux->GPIO_Pin_S0, GPIO_PIN_RESET);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000c1e:	f003 0301 	and.w	r3, r3, #1
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d008      	beq.n	8000c3a <MUXSelect+0x36>
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	6898      	ldr	r0, [r3, #8]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	899b      	ldrh	r3, [r3, #12]
 8000c30:	2201      	movs	r2, #1
 8000c32:	4619      	mov	r1, r3
 8000c34:	f006 f872 	bl	8006d1c <HAL_GPIO_WritePin>
 8000c38:	e007      	b.n	8000c4a <MUXSelect+0x46>
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6898      	ldr	r0, [r3, #8]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	899b      	ldrh	r3, [r3, #12]
 8000c42:	2200      	movs	r2, #0
 8000c44:	4619      	mov	r1, r3
 8000c46:	f006 f869 	bl	8006d1c <HAL_GPIO_WritePin>
	(mux->s1 == 1) ? HAL_GPIO_WritePin(mux->GPIOx_S1, mux->GPIO_Pin_S1, GPIO_PIN_SET) : HAL_GPIO_WritePin(mux->GPIOx_S1, mux->GPIO_Pin_S1, GPIO_PIN_RESET);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000c50:	f003 0302 	and.w	r3, r3, #2
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d008      	beq.n	8000c6c <MUXSelect+0x68>
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6918      	ldr	r0, [r3, #16]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	8a9b      	ldrh	r3, [r3, #20]
 8000c62:	2201      	movs	r2, #1
 8000c64:	4619      	mov	r1, r3
 8000c66:	f006 f859 	bl	8006d1c <HAL_GPIO_WritePin>
 8000c6a:	e007      	b.n	8000c7c <MUXSelect+0x78>
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	6918      	ldr	r0, [r3, #16]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	8a9b      	ldrh	r3, [r3, #20]
 8000c74:	2200      	movs	r2, #0
 8000c76:	4619      	mov	r1, r3
 8000c78:	f006 f850 	bl	8006d1c <HAL_GPIO_WritePin>
	(mux->s2 == 1) ? HAL_GPIO_WritePin(mux->GPIOx_S2, mux->GPIO_Pin_S2, GPIO_PIN_SET) : HAL_GPIO_WritePin(mux->GPIOx_S2, mux->GPIO_Pin_S2, GPIO_PIN_RESET);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000c82:	f003 0304 	and.w	r3, r3, #4
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d008      	beq.n	8000c9e <MUXSelect+0x9a>
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	6998      	ldr	r0, [r3, #24]
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	8b9b      	ldrh	r3, [r3, #28]
 8000c94:	2201      	movs	r2, #1
 8000c96:	4619      	mov	r1, r3
 8000c98:	f006 f840 	bl	8006d1c <HAL_GPIO_WritePin>
 8000c9c:	e007      	b.n	8000cae <MUXSelect+0xaa>
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6998      	ldr	r0, [r3, #24]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	8b9b      	ldrh	r3, [r3, #28]
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	4619      	mov	r1, r3
 8000caa:	f006 f837 	bl	8006d1c <HAL_GPIO_WritePin>

	return HAL_GPIO_ReadPin(mux->GPIOx_Input, mux->GPIO_Pin_Input);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	889b      	ldrh	r3, [r3, #4]
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4610      	mov	r0, r2
 8000cba:	f006 f817 	bl	8006cec <HAL_GPIO_ReadPin>
 8000cbe:	4603      	mov	r3, r0
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <MUXUpdate>:
 * Function Remarks		: None
 * Function Arguments	: mux	pointer to structure
 * Function Return		: None
 * Function Example		: MUXUpdate(&mux1);
 */
void MUXUpdate(MUX_t* mux){
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]

	for(int i = 0; i < 8 ; i++){
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	60fb      	str	r3, [r7, #12]
 8000cd4:	e0aa      	b.n	8000e2c <MUXUpdate+0x164>

		switch(i){
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	2b07      	cmp	r3, #7
 8000cda:	f200 80a3 	bhi.w	8000e24 <MUXUpdate+0x15c>
 8000cde:	a201      	add	r2, pc, #4	; (adr r2, 8000ce4 <MUXUpdate+0x1c>)
 8000ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ce4:	08000d05 	.word	0x08000d05
 8000ce8:	08000d29 	.word	0x08000d29
 8000cec:	08000d4d 	.word	0x08000d4d
 8000cf0:	08000d71 	.word	0x08000d71
 8000cf4:	08000d95 	.word	0x08000d95
 8000cf8:	08000db9 	.word	0x08000db9
 8000cfc:	08000ddd 	.word	0x08000ddd
 8000d00:	08000e01 	.word	0x08000e01

			case 0 : mux->mux_data.bit0 = MUXSelect(mux, i);
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	4619      	mov	r1, r3
 8000d0a:	6878      	ldr	r0, [r7, #4]
 8000d0c:	f7ff ff7a 	bl	8000c04 <MUXSelect>
 8000d10:	4603      	mov	r3, r0
 8000d12:	f003 0301 	and.w	r3, r3, #1
 8000d16:	b2d9      	uxtb	r1, r3
 8000d18:	687a      	ldr	r2, [r7, #4]
 8000d1a:	f892 3020 	ldrb.w	r3, [r2, #32]
 8000d1e:	f361 0300 	bfi	r3, r1, #0, #1
 8000d22:	f882 3020 	strb.w	r3, [r2, #32]
				break;
 8000d26:	e07e      	b.n	8000e26 <MUXUpdate+0x15e>

			case 1 : mux->mux_data.bit1 = MUXSelect(mux, i);
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	6878      	ldr	r0, [r7, #4]
 8000d30:	f7ff ff68 	bl	8000c04 <MUXSelect>
 8000d34:	4603      	mov	r3, r0
 8000d36:	f003 0301 	and.w	r3, r3, #1
 8000d3a:	b2d9      	uxtb	r1, r3
 8000d3c:	687a      	ldr	r2, [r7, #4]
 8000d3e:	f892 3020 	ldrb.w	r3, [r2, #32]
 8000d42:	f361 0341 	bfi	r3, r1, #1, #1
 8000d46:	f882 3020 	strb.w	r3, [r2, #32]
				break;
 8000d4a:	e06c      	b.n	8000e26 <MUXUpdate+0x15e>

			case 2 : mux->mux_data.bit2 = MUXSelect(mux, i);
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	b2db      	uxtb	r3, r3
 8000d50:	4619      	mov	r1, r3
 8000d52:	6878      	ldr	r0, [r7, #4]
 8000d54:	f7ff ff56 	bl	8000c04 <MUXSelect>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	f003 0301 	and.w	r3, r3, #1
 8000d5e:	b2d9      	uxtb	r1, r3
 8000d60:	687a      	ldr	r2, [r7, #4]
 8000d62:	f892 3020 	ldrb.w	r3, [r2, #32]
 8000d66:	f361 0382 	bfi	r3, r1, #2, #1
 8000d6a:	f882 3020 	strb.w	r3, [r2, #32]
				break;
 8000d6e:	e05a      	b.n	8000e26 <MUXUpdate+0x15e>

			case 3 : mux->mux_data.bit3 = MUXSelect(mux, i);
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	4619      	mov	r1, r3
 8000d76:	6878      	ldr	r0, [r7, #4]
 8000d78:	f7ff ff44 	bl	8000c04 <MUXSelect>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	f003 0301 	and.w	r3, r3, #1
 8000d82:	b2d9      	uxtb	r1, r3
 8000d84:	687a      	ldr	r2, [r7, #4]
 8000d86:	f892 3020 	ldrb.w	r3, [r2, #32]
 8000d8a:	f361 03c3 	bfi	r3, r1, #3, #1
 8000d8e:	f882 3020 	strb.w	r3, [r2, #32]
				break;
 8000d92:	e048      	b.n	8000e26 <MUXUpdate+0x15e>

			case 4 : mux->mux_data.bit4 = MUXSelect(mux, i);
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	4619      	mov	r1, r3
 8000d9a:	6878      	ldr	r0, [r7, #4]
 8000d9c:	f7ff ff32 	bl	8000c04 <MUXSelect>
 8000da0:	4603      	mov	r3, r0
 8000da2:	f003 0301 	and.w	r3, r3, #1
 8000da6:	b2d9      	uxtb	r1, r3
 8000da8:	687a      	ldr	r2, [r7, #4]
 8000daa:	f892 3020 	ldrb.w	r3, [r2, #32]
 8000dae:	f361 1304 	bfi	r3, r1, #4, #1
 8000db2:	f882 3020 	strb.w	r3, [r2, #32]
				break;
 8000db6:	e036      	b.n	8000e26 <MUXUpdate+0x15e>

			case 5 : mux->mux_data.bit5 = MUXSelect(mux, i);
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	6878      	ldr	r0, [r7, #4]
 8000dc0:	f7ff ff20 	bl	8000c04 <MUXSelect>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	f003 0301 	and.w	r3, r3, #1
 8000dca:	b2d9      	uxtb	r1, r3
 8000dcc:	687a      	ldr	r2, [r7, #4]
 8000dce:	f892 3020 	ldrb.w	r3, [r2, #32]
 8000dd2:	f361 1345 	bfi	r3, r1, #5, #1
 8000dd6:	f882 3020 	strb.w	r3, [r2, #32]
				break;
 8000dda:	e024      	b.n	8000e26 <MUXUpdate+0x15e>

			case 6 : mux->mux_data.bit6 = MUXSelect(mux, i);
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	4619      	mov	r1, r3
 8000de2:	6878      	ldr	r0, [r7, #4]
 8000de4:	f7ff ff0e 	bl	8000c04 <MUXSelect>
 8000de8:	4603      	mov	r3, r0
 8000dea:	f003 0301 	and.w	r3, r3, #1
 8000dee:	b2d9      	uxtb	r1, r3
 8000df0:	687a      	ldr	r2, [r7, #4]
 8000df2:	f892 3020 	ldrb.w	r3, [r2, #32]
 8000df6:	f361 1386 	bfi	r3, r1, #6, #1
 8000dfa:	f882 3020 	strb.w	r3, [r2, #32]
				break;
 8000dfe:	e012      	b.n	8000e26 <MUXUpdate+0x15e>

			case 7 : mux->mux_data.bit7 = MUXSelect(mux, i);
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	4619      	mov	r1, r3
 8000e06:	6878      	ldr	r0, [r7, #4]
 8000e08:	f7ff fefc 	bl	8000c04 <MUXSelect>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	f003 0301 	and.w	r3, r3, #1
 8000e12:	b2d9      	uxtb	r1, r3
 8000e14:	687a      	ldr	r2, [r7, #4]
 8000e16:	f892 3020 	ldrb.w	r3, [r2, #32]
 8000e1a:	f361 13c7 	bfi	r3, r1, #7, #1
 8000e1e:	f882 3020 	strb.w	r3, [r2, #32]
				break;
 8000e22:	e000      	b.n	8000e26 <MUXUpdate+0x15e>

			default:
				break;
 8000e24:	bf00      	nop
	for(int i = 0; i < 8 ; i++){
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	3301      	adds	r3, #1
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	2b07      	cmp	r3, #7
 8000e30:	f77f af51 	ble.w	8000cd6 <MUXUpdate+0xe>
		}

	}

}
 8000e34:	bf00      	nop
 8000e36:	bf00      	nop
 8000e38:	3710      	adds	r7, #16
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop

08000e40 <PWMTimeBaseInit>:
 * 						  Prescaler 	Prescaler value to divide TIM clock (1 to 65535)
 * Function Return		: None
 * Function Example		: PWMTimeBaseInit(&htim3, 20000, 84);
 */
void PWMTimeBaseInit(TIM_HandleTypeDef* htimx, uint32_t Period, uint32_t Prescaler)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b08a      	sub	sp, #40	; 0x28
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	607a      	str	r2, [r7, #4]

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e4c:	f107 0318 	add.w	r3, r7, #24
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e5a:	f107 0310 	add.w	r3, r7, #16
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	605a      	str	r2, [r3, #4]


	if(htimx == &htim1){
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	4a52      	ldr	r2, [pc, #328]	; (8000fb0 <PWMTimeBaseInit+0x170>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d103      	bne.n	8000e74 <PWMTimeBaseInit+0x34>
		htimx->Instance = TIM1;
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	4a51      	ldr	r2, [pc, #324]	; (8000fb4 <PWMTimeBaseInit+0x174>)
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	e057      	b.n	8000f24 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim2)	{
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	4a50      	ldr	r2, [pc, #320]	; (8000fb8 <PWMTimeBaseInit+0x178>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d104      	bne.n	8000e86 <PWMTimeBaseInit+0x46>
		htimx->Instance = TIM2;
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	e04e      	b.n	8000f24 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim3)	{
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	4a4c      	ldr	r2, [pc, #304]	; (8000fbc <PWMTimeBaseInit+0x17c>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d103      	bne.n	8000e96 <PWMTimeBaseInit+0x56>
		htimx->Instance = TIM3;
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	4a4b      	ldr	r2, [pc, #300]	; (8000fc0 <PWMTimeBaseInit+0x180>)
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	e046      	b.n	8000f24 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim4)	{
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	4a4a      	ldr	r2, [pc, #296]	; (8000fc4 <PWMTimeBaseInit+0x184>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d103      	bne.n	8000ea6 <PWMTimeBaseInit+0x66>
		htimx->Instance = TIM4;
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	4a49      	ldr	r2, [pc, #292]	; (8000fc8 <PWMTimeBaseInit+0x188>)
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	e03e      	b.n	8000f24 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim5)	{
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	4a48      	ldr	r2, [pc, #288]	; (8000fcc <PWMTimeBaseInit+0x18c>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d103      	bne.n	8000eb6 <PWMTimeBaseInit+0x76>
		htimx->Instance = TIM5;
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	4a47      	ldr	r2, [pc, #284]	; (8000fd0 <PWMTimeBaseInit+0x190>)
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	e036      	b.n	8000f24 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim8)	{
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	4a46      	ldr	r2, [pc, #280]	; (8000fd4 <PWMTimeBaseInit+0x194>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d103      	bne.n	8000ec6 <PWMTimeBaseInit+0x86>
		htimx->Instance = TIM8;
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	4a45      	ldr	r2, [pc, #276]	; (8000fd8 <PWMTimeBaseInit+0x198>)
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	e02e      	b.n	8000f24 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim9)	{
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	4a44      	ldr	r2, [pc, #272]	; (8000fdc <PWMTimeBaseInit+0x19c>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d103      	bne.n	8000ed6 <PWMTimeBaseInit+0x96>
		htimx->Instance = TIM9;
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	4a43      	ldr	r2, [pc, #268]	; (8000fe0 <PWMTimeBaseInit+0x1a0>)
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	e026      	b.n	8000f24 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim10)	{
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	4a42      	ldr	r2, [pc, #264]	; (8000fe4 <PWMTimeBaseInit+0x1a4>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d103      	bne.n	8000ee6 <PWMTimeBaseInit+0xa6>
		htimx->Instance = TIM10;
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	4a41      	ldr	r2, [pc, #260]	; (8000fe8 <PWMTimeBaseInit+0x1a8>)
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	e01e      	b.n	8000f24 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim11)	{
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	4a40      	ldr	r2, [pc, #256]	; (8000fec <PWMTimeBaseInit+0x1ac>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d103      	bne.n	8000ef6 <PWMTimeBaseInit+0xb6>
		htimx->Instance = TIM11;
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	4a3f      	ldr	r2, [pc, #252]	; (8000ff0 <PWMTimeBaseInit+0x1b0>)
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	e016      	b.n	8000f24 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim12)	{
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	4a3e      	ldr	r2, [pc, #248]	; (8000ff4 <PWMTimeBaseInit+0x1b4>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d103      	bne.n	8000f06 <PWMTimeBaseInit+0xc6>
		htimx->Instance = TIM12;
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	4a3d      	ldr	r2, [pc, #244]	; (8000ff8 <PWMTimeBaseInit+0x1b8>)
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	e00e      	b.n	8000f24 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim13)	{
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	4a3c      	ldr	r2, [pc, #240]	; (8000ffc <PWMTimeBaseInit+0x1bc>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d103      	bne.n	8000f16 <PWMTimeBaseInit+0xd6>
		htimx->Instance = TIM13;
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	4a3b      	ldr	r2, [pc, #236]	; (8001000 <PWMTimeBaseInit+0x1c0>)
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	e006      	b.n	8000f24 <PWMTimeBaseInit+0xe4>
		}
	else if(htimx == &htim14)	{
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	4a3a      	ldr	r2, [pc, #232]	; (8001004 <PWMTimeBaseInit+0x1c4>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d102      	bne.n	8000f24 <PWMTimeBaseInit+0xe4>
		htimx->Instance = TIM14;
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	4a39      	ldr	r2, [pc, #228]	; (8001008 <PWMTimeBaseInit+0x1c8>)
 8000f22:	601a      	str	r2, [r3, #0]
		}

	htimx->Init.Prescaler = Prescaler - 1;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	1e5a      	subs	r2, r3, #1
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	605a      	str	r2, [r3, #4]
	htimx->Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	2200      	movs	r2, #0
 8000f30:	609a      	str	r2, [r3, #8]
	htimx->Init.Period = Period - 1;
 8000f32:	68bb      	ldr	r3, [r7, #8]
 8000f34:	1e5a      	subs	r2, r3, #1
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	60da      	str	r2, [r3, #12]
	htimx->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	611a      	str	r2, [r3, #16]
	htimx->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	2280      	movs	r2, #128	; 0x80
 8000f44:	619a      	str	r2, [r3, #24]
	 if (HAL_TIM_Base_Init(htimx) != HAL_OK)
 8000f46:	68f8      	ldr	r0, [r7, #12]
 8000f48:	f008 f964 	bl	8009214 <HAL_TIM_Base_Init>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <PWMTimeBaseInit+0x116>
	  {
	    Error_Handler();
 8000f52:	f002 fa6f 	bl	8003434 <Error_Handler>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f5a:	61bb      	str	r3, [r7, #24]
	  if (HAL_TIM_ConfigClockSource(htimx, &sClockSourceConfig) != HAL_OK)
 8000f5c:	f107 0318 	add.w	r3, r7, #24
 8000f60:	4619      	mov	r1, r3
 8000f62:	68f8      	ldr	r0, [r7, #12]
 8000f64:	f008 fc00 	bl	8009768 <HAL_TIM_ConfigClockSource>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <PWMTimeBaseInit+0x132>
	  {
	    Error_Handler();
 8000f6e:	f002 fa61 	bl	8003434 <Error_Handler>
	  }
	if (HAL_TIM_PWM_Init(htimx) != HAL_OK)
 8000f72:	68f8      	ldr	r0, [r7, #12]
 8000f74:	f008 f9c1 	bl	80092fa <HAL_TIM_PWM_Init>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <PWMTimeBaseInit+0x142>
		{
			Error_Handler();
 8000f7e:	f002 fa59 	bl	8003434 <Error_Handler>
		}

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f82:	2300      	movs	r3, #0
 8000f84:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f86:	2300      	movs	r3, #0
 8000f88:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(htimx, &sMasterConfig) != HAL_OK)
 8000f8a:	f107 0310 	add.w	r3, r7, #16
 8000f8e:	4619      	mov	r1, r3
 8000f90:	68f8      	ldr	r0, [r7, #12]
 8000f92:	f008 ffef 	bl	8009f74 <HAL_TIMEx_MasterConfigSynchronization>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <PWMTimeBaseInit+0x160>
	{
		Error_Handler();
 8000f9c:	f002 fa4a 	bl	8003434 <Error_Handler>
	}


    HAL_TIM_Base_Start(htimx);
 8000fa0:	68f8      	ldr	r0, [r7, #12]
 8000fa2:	f008 f962 	bl	800926a <HAL_TIM_Base_Start>

}
 8000fa6:	bf00      	nop
 8000fa8:	3728      	adds	r7, #40	; 0x28
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	2000134c 	.word	0x2000134c
 8000fb4:	40010000 	.word	0x40010000
 8000fb8:	200013cc 	.word	0x200013cc
 8000fbc:	2000124c 	.word	0x2000124c
 8000fc0:	40000400 	.word	0x40000400
 8000fc4:	2000118c 	.word	0x2000118c
 8000fc8:	40000800 	.word	0x40000800
 8000fcc:	2000120c 	.word	0x2000120c
 8000fd0:	40000c00 	.word	0x40000c00
 8000fd4:	2000114c 	.word	0x2000114c
 8000fd8:	40010400 	.word	0x40010400
 8000fdc:	2000138c 	.word	0x2000138c
 8000fe0:	40014000 	.word	0x40014000
 8000fe4:	200011cc 	.word	0x200011cc
 8000fe8:	40014400 	.word	0x40014400
 8000fec:	200012cc 	.word	0x200012cc
 8000ff0:	40014800 	.word	0x40014800
 8000ff4:	2000144c 	.word	0x2000144c
 8000ff8:	40001800 	.word	0x40001800
 8000ffc:	2000128c 	.word	0x2000128c
 8001000:	40001c00 	.word	0x40001c00
 8001004:	2000140c 	.word	0x2000140c
 8001008:	40002000 	.word	0x40002000

0800100c <PWMChannelConfig>:
 * 						  GPIO_Pin_x	GPIO_Pin_x of PWM pin(x = 0,1,2,...or 15)
 * Function Return		: None
 * Function Example		: PWMChannelConfig(&htim3, TIM_CHANNEL_3, TIM3_CHANNEL3_PIN);
 */

void PWMChannelConfig(TIM_HandleTypeDef* htimx, uint32_t Channel , GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin_x){
 800100c:	b580      	push	{r7, lr}
 800100e:	b09a      	sub	sp, #104	; 0x68
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
 8001018:	807b      	strh	r3, [r7, #2]

	TIM_OC_InitTypeDef sConfigOC = {0};
 800101a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	605a      	str	r2, [r3, #4]
 8001024:	609a      	str	r2, [r3, #8]
 8001026:	60da      	str	r2, [r3, #12]
 8001028:	611a      	str	r2, [r3, #16]
 800102a:	615a      	str	r2, [r3, #20]
 800102c:	619a      	str	r2, [r3, #24]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
 8001036:	605a      	str	r2, [r3, #4]
 8001038:	609a      	str	r2, [r3, #8]
 800103a:	60da      	str	r2, [r3, #12]
 800103c:	611a      	str	r2, [r3, #16]

	sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800103e:	2370      	movs	r3, #112	; 0x70
 8001040:	64fb      	str	r3, [r7, #76]	; 0x4c
	sConfigOC.Pulse = 0;
 8001042:	2300      	movs	r3, #0
 8001044:	653b      	str	r3, [r7, #80]	; 0x50
	sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001046:	2302      	movs	r3, #2
 8001048:	657b      	str	r3, [r7, #84]	; 0x54
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 800104a:	2308      	movs	r3, #8
 800104c:	65bb      	str	r3, [r7, #88]	; 0x58
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800104e:	2300      	movs	r3, #0
 8001050:	65fb      	str	r3, [r7, #92]	; 0x5c
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001052:	2300      	movs	r3, #0
 8001054:	663b      	str	r3, [r7, #96]	; 0x60
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001056:	2300      	movs	r3, #0
 8001058:	667b      	str	r3, [r7, #100]	; 0x64


	if (HAL_TIM_PWM_ConfigChannel(htimx, &sConfigOC, Channel) != HAL_OK)
 800105a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800105e:	68ba      	ldr	r2, [r7, #8]
 8001060:	4619      	mov	r1, r3
 8001062:	68f8      	ldr	r0, [r7, #12]
 8001064:	f008 faba 	bl	80095dc <HAL_TIM_PWM_ConfigChannel>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <PWMChannelConfig+0x66>
	{
		Error_Handler();
 800106e:	f002 f9e1 	bl	8003434 <Error_Handler>
	}

	switch((uint32_t)GPIOx){
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a95      	ldr	r2, [pc, #596]	; (80012cc <PWMChannelConfig+0x2c0>)
 8001076:	4293      	cmp	r3, r2
 8001078:	f000 80af 	beq.w	80011da <PWMChannelConfig+0x1ce>
 800107c:	4a93      	ldr	r2, [pc, #588]	; (80012cc <PWMChannelConfig+0x2c0>)
 800107e:	4293      	cmp	r3, r2
 8001080:	f200 80ba 	bhi.w	80011f8 <PWMChannelConfig+0x1ec>
 8001084:	4a92      	ldr	r2, [pc, #584]	; (80012d0 <PWMChannelConfig+0x2c4>)
 8001086:	4293      	cmp	r3, r2
 8001088:	f000 8098 	beq.w	80011bc <PWMChannelConfig+0x1b0>
 800108c:	4a90      	ldr	r2, [pc, #576]	; (80012d0 <PWMChannelConfig+0x2c4>)
 800108e:	4293      	cmp	r3, r2
 8001090:	f200 80b2 	bhi.w	80011f8 <PWMChannelConfig+0x1ec>
 8001094:	4a8f      	ldr	r2, [pc, #572]	; (80012d4 <PWMChannelConfig+0x2c8>)
 8001096:	4293      	cmp	r3, r2
 8001098:	f000 8081 	beq.w	800119e <PWMChannelConfig+0x192>
 800109c:	4a8d      	ldr	r2, [pc, #564]	; (80012d4 <PWMChannelConfig+0x2c8>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	f200 80aa 	bhi.w	80011f8 <PWMChannelConfig+0x1ec>
 80010a4:	4a8c      	ldr	r2, [pc, #560]	; (80012d8 <PWMChannelConfig+0x2cc>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d06a      	beq.n	8001180 <PWMChannelConfig+0x174>
 80010aa:	4a8b      	ldr	r2, [pc, #556]	; (80012d8 <PWMChannelConfig+0x2cc>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	f200 80a3 	bhi.w	80011f8 <PWMChannelConfig+0x1ec>
 80010b2:	4a8a      	ldr	r2, [pc, #552]	; (80012dc <PWMChannelConfig+0x2d0>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d054      	beq.n	8001162 <PWMChannelConfig+0x156>
 80010b8:	4a88      	ldr	r2, [pc, #544]	; (80012dc <PWMChannelConfig+0x2d0>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	f200 809c 	bhi.w	80011f8 <PWMChannelConfig+0x1ec>
 80010c0:	4a87      	ldr	r2, [pc, #540]	; (80012e0 <PWMChannelConfig+0x2d4>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d03e      	beq.n	8001144 <PWMChannelConfig+0x138>
 80010c6:	4a86      	ldr	r2, [pc, #536]	; (80012e0 <PWMChannelConfig+0x2d4>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	f200 8095 	bhi.w	80011f8 <PWMChannelConfig+0x1ec>
 80010ce:	4a85      	ldr	r2, [pc, #532]	; (80012e4 <PWMChannelConfig+0x2d8>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d028      	beq.n	8001126 <PWMChannelConfig+0x11a>
 80010d4:	4a83      	ldr	r2, [pc, #524]	; (80012e4 <PWMChannelConfig+0x2d8>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	f200 808e 	bhi.w	80011f8 <PWMChannelConfig+0x1ec>
 80010dc:	4a82      	ldr	r2, [pc, #520]	; (80012e8 <PWMChannelConfig+0x2dc>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d003      	beq.n	80010ea <PWMChannelConfig+0xde>
 80010e2:	4a82      	ldr	r2, [pc, #520]	; (80012ec <PWMChannelConfig+0x2e0>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d00f      	beq.n	8001108 <PWMChannelConfig+0xfc>
		break;

		case GPIOI_BASE:	__HAL_RCC_GPIOI_CLK_ENABLE();
		break;

		default: break;
 80010e8:	e086      	b.n	80011f8 <PWMChannelConfig+0x1ec>
		case GPIOA_BASE:	  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	637b      	str	r3, [r7, #52]	; 0x34
 80010ee:	4b80      	ldr	r3, [pc, #512]	; (80012f0 <PWMChannelConfig+0x2e4>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	4a7f      	ldr	r2, [pc, #508]	; (80012f0 <PWMChannelConfig+0x2e4>)
 80010f4:	f043 0301 	orr.w	r3, r3, #1
 80010f8:	6313      	str	r3, [r2, #48]	; 0x30
 80010fa:	4b7d      	ldr	r3, [pc, #500]	; (80012f0 <PWMChannelConfig+0x2e4>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	637b      	str	r3, [r7, #52]	; 0x34
 8001104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
		break;
 8001106:	e078      	b.n	80011fa <PWMChannelConfig+0x1ee>
		case GPIOB_BASE:	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001108:	2300      	movs	r3, #0
 800110a:	633b      	str	r3, [r7, #48]	; 0x30
 800110c:	4b78      	ldr	r3, [pc, #480]	; (80012f0 <PWMChannelConfig+0x2e4>)
 800110e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001110:	4a77      	ldr	r2, [pc, #476]	; (80012f0 <PWMChannelConfig+0x2e4>)
 8001112:	f043 0302 	orr.w	r3, r3, #2
 8001116:	6313      	str	r3, [r2, #48]	; 0x30
 8001118:	4b75      	ldr	r3, [pc, #468]	; (80012f0 <PWMChannelConfig+0x2e4>)
 800111a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111c:	f003 0302 	and.w	r3, r3, #2
 8001120:	633b      	str	r3, [r7, #48]	; 0x30
 8001122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
		break;
 8001124:	e069      	b.n	80011fa <PWMChannelConfig+0x1ee>
		case GPIOC_BASE:	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	62fb      	str	r3, [r7, #44]	; 0x2c
 800112a:	4b71      	ldr	r3, [pc, #452]	; (80012f0 <PWMChannelConfig+0x2e4>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	4a70      	ldr	r2, [pc, #448]	; (80012f0 <PWMChannelConfig+0x2e4>)
 8001130:	f043 0304 	orr.w	r3, r3, #4
 8001134:	6313      	str	r3, [r2, #48]	; 0x30
 8001136:	4b6e      	ldr	r3, [pc, #440]	; (80012f0 <PWMChannelConfig+0x2e4>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	f003 0304 	and.w	r3, r3, #4
 800113e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
		break;
 8001142:	e05a      	b.n	80011fa <PWMChannelConfig+0x1ee>
		case GPIOD_BASE:	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001144:	2300      	movs	r3, #0
 8001146:	62bb      	str	r3, [r7, #40]	; 0x28
 8001148:	4b69      	ldr	r3, [pc, #420]	; (80012f0 <PWMChannelConfig+0x2e4>)
 800114a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114c:	4a68      	ldr	r2, [pc, #416]	; (80012f0 <PWMChannelConfig+0x2e4>)
 800114e:	f043 0308 	orr.w	r3, r3, #8
 8001152:	6313      	str	r3, [r2, #48]	; 0x30
 8001154:	4b66      	ldr	r3, [pc, #408]	; (80012f0 <PWMChannelConfig+0x2e4>)
 8001156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001158:	f003 0308 	and.w	r3, r3, #8
 800115c:	62bb      	str	r3, [r7, #40]	; 0x28
 800115e:	6abb      	ldr	r3, [r7, #40]	; 0x28
		break;
 8001160:	e04b      	b.n	80011fa <PWMChannelConfig+0x1ee>
		case GPIOE_BASE:	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	627b      	str	r3, [r7, #36]	; 0x24
 8001166:	4b62      	ldr	r3, [pc, #392]	; (80012f0 <PWMChannelConfig+0x2e4>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	4a61      	ldr	r2, [pc, #388]	; (80012f0 <PWMChannelConfig+0x2e4>)
 800116c:	f043 0310 	orr.w	r3, r3, #16
 8001170:	6313      	str	r3, [r2, #48]	; 0x30
 8001172:	4b5f      	ldr	r3, [pc, #380]	; (80012f0 <PWMChannelConfig+0x2e4>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	f003 0310 	and.w	r3, r3, #16
 800117a:	627b      	str	r3, [r7, #36]	; 0x24
 800117c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		break;
 800117e:	e03c      	b.n	80011fa <PWMChannelConfig+0x1ee>
		case GPIOF_BASE:	__HAL_RCC_GPIOF_CLK_ENABLE();
 8001180:	2300      	movs	r3, #0
 8001182:	623b      	str	r3, [r7, #32]
 8001184:	4b5a      	ldr	r3, [pc, #360]	; (80012f0 <PWMChannelConfig+0x2e4>)
 8001186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001188:	4a59      	ldr	r2, [pc, #356]	; (80012f0 <PWMChannelConfig+0x2e4>)
 800118a:	f043 0320 	orr.w	r3, r3, #32
 800118e:	6313      	str	r3, [r2, #48]	; 0x30
 8001190:	4b57      	ldr	r3, [pc, #348]	; (80012f0 <PWMChannelConfig+0x2e4>)
 8001192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001194:	f003 0320 	and.w	r3, r3, #32
 8001198:	623b      	str	r3, [r7, #32]
 800119a:	6a3b      	ldr	r3, [r7, #32]
		break;
 800119c:	e02d      	b.n	80011fa <PWMChannelConfig+0x1ee>
		case GPIOG_BASE:	__HAL_RCC_GPIOG_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	61fb      	str	r3, [r7, #28]
 80011a2:	4b53      	ldr	r3, [pc, #332]	; (80012f0 <PWMChannelConfig+0x2e4>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	4a52      	ldr	r2, [pc, #328]	; (80012f0 <PWMChannelConfig+0x2e4>)
 80011a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011ac:	6313      	str	r3, [r2, #48]	; 0x30
 80011ae:	4b50      	ldr	r3, [pc, #320]	; (80012f0 <PWMChannelConfig+0x2e4>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011b6:	61fb      	str	r3, [r7, #28]
 80011b8:	69fb      	ldr	r3, [r7, #28]
		break;
 80011ba:	e01e      	b.n	80011fa <PWMChannelConfig+0x1ee>
		case GPIOH_BASE:	__HAL_RCC_GPIOH_CLK_ENABLE();
 80011bc:	2300      	movs	r3, #0
 80011be:	61bb      	str	r3, [r7, #24]
 80011c0:	4b4b      	ldr	r3, [pc, #300]	; (80012f0 <PWMChannelConfig+0x2e4>)
 80011c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c4:	4a4a      	ldr	r2, [pc, #296]	; (80012f0 <PWMChannelConfig+0x2e4>)
 80011c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011ca:	6313      	str	r3, [r2, #48]	; 0x30
 80011cc:	4b48      	ldr	r3, [pc, #288]	; (80012f0 <PWMChannelConfig+0x2e4>)
 80011ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011d4:	61bb      	str	r3, [r7, #24]
 80011d6:	69bb      	ldr	r3, [r7, #24]
		break;
 80011d8:	e00f      	b.n	80011fa <PWMChannelConfig+0x1ee>
		case GPIOI_BASE:	__HAL_RCC_GPIOI_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	617b      	str	r3, [r7, #20]
 80011de:	4b44      	ldr	r3, [pc, #272]	; (80012f0 <PWMChannelConfig+0x2e4>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	4a43      	ldr	r2, [pc, #268]	; (80012f0 <PWMChannelConfig+0x2e4>)
 80011e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011e8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ea:	4b41      	ldr	r3, [pc, #260]	; (80012f0 <PWMChannelConfig+0x2e4>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011f2:	617b      	str	r3, [r7, #20]
 80011f4:	697b      	ldr	r3, [r7, #20]
		break;
 80011f6:	e000      	b.n	80011fa <PWMChannelConfig+0x1ee>
		default: break;
 80011f8:	bf00      	nop
		}

	    GPIO_InitStruct.Pin = GPIO_Pin_x;
 80011fa:	887b      	ldrh	r3, [r7, #2]
 80011fc:	63bb      	str	r3, [r7, #56]	; 0x38
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fe:	2302      	movs	r3, #2
 8001200:	63fb      	str	r3, [r7, #60]	; 0x3c
	    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001202:	2301      	movs	r3, #1
 8001204:	643b      	str	r3, [r7, #64]	; 0x40
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001206:	2303      	movs	r3, #3
 8001208:	647b      	str	r3, [r7, #68]	; 0x44
		if(htimx == &htim1){
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	4a39      	ldr	r2, [pc, #228]	; (80012f4 <PWMChannelConfig+0x2e8>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d102      	bne.n	8001218 <PWMChannelConfig+0x20c>
			GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001212:	2301      	movs	r3, #1
 8001214:	64bb      	str	r3, [r7, #72]	; 0x48
 8001216:	e04b      	b.n	80012b0 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim2)	{
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	4a37      	ldr	r2, [pc, #220]	; (80012f8 <PWMChannelConfig+0x2ec>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d102      	bne.n	8001226 <PWMChannelConfig+0x21a>
			GPIO_InitStruct.Alternate = GPIO_AF1_TIM2 ;
 8001220:	2301      	movs	r3, #1
 8001222:	64bb      	str	r3, [r7, #72]	; 0x48
 8001224:	e044      	b.n	80012b0 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim3)	{
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	4a34      	ldr	r2, [pc, #208]	; (80012fc <PWMChannelConfig+0x2f0>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d102      	bne.n	8001234 <PWMChannelConfig+0x228>
			GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800122e:	2302      	movs	r3, #2
 8001230:	64bb      	str	r3, [r7, #72]	; 0x48
 8001232:	e03d      	b.n	80012b0 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim4)	{
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	4a32      	ldr	r2, [pc, #200]	; (8001300 <PWMChannelConfig+0x2f4>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d102      	bne.n	8001242 <PWMChannelConfig+0x236>
			GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800123c:	2302      	movs	r3, #2
 800123e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001240:	e036      	b.n	80012b0 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim5)	{
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	4a2f      	ldr	r2, [pc, #188]	; (8001304 <PWMChannelConfig+0x2f8>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d102      	bne.n	8001250 <PWMChannelConfig+0x244>
			GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800124a:	2302      	movs	r3, #2
 800124c:	64bb      	str	r3, [r7, #72]	; 0x48
 800124e:	e02f      	b.n	80012b0 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim8)	{
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	4a2d      	ldr	r2, [pc, #180]	; (8001308 <PWMChannelConfig+0x2fc>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d102      	bne.n	800125e <PWMChannelConfig+0x252>
			GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001258:	2303      	movs	r3, #3
 800125a:	64bb      	str	r3, [r7, #72]	; 0x48
 800125c:	e028      	b.n	80012b0 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim9)	{
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	4a2a      	ldr	r2, [pc, #168]	; (800130c <PWMChannelConfig+0x300>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d102      	bne.n	800126c <PWMChannelConfig+0x260>
			GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001266:	2303      	movs	r3, #3
 8001268:	64bb      	str	r3, [r7, #72]	; 0x48
 800126a:	e021      	b.n	80012b0 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim10)	{
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	4a28      	ldr	r2, [pc, #160]	; (8001310 <PWMChannelConfig+0x304>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d102      	bne.n	800127a <PWMChannelConfig+0x26e>
			GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001274:	2303      	movs	r3, #3
 8001276:	64bb      	str	r3, [r7, #72]	; 0x48
 8001278:	e01a      	b.n	80012b0 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim11)	{
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	4a25      	ldr	r2, [pc, #148]	; (8001314 <PWMChannelConfig+0x308>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d102      	bne.n	8001288 <PWMChannelConfig+0x27c>
			GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8001282:	2303      	movs	r3, #3
 8001284:	64bb      	str	r3, [r7, #72]	; 0x48
 8001286:	e013      	b.n	80012b0 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim12)	{
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	4a23      	ldr	r2, [pc, #140]	; (8001318 <PWMChannelConfig+0x30c>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d102      	bne.n	8001296 <PWMChannelConfig+0x28a>
			GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001290:	2309      	movs	r3, #9
 8001292:	64bb      	str	r3, [r7, #72]	; 0x48
 8001294:	e00c      	b.n	80012b0 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim13)	{
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	4a20      	ldr	r2, [pc, #128]	; (800131c <PWMChannelConfig+0x310>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d102      	bne.n	80012a4 <PWMChannelConfig+0x298>
			GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 800129e:	2309      	movs	r3, #9
 80012a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80012a2:	e005      	b.n	80012b0 <PWMChannelConfig+0x2a4>
			}
		else if(htimx == &htim14)	{
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	4a1e      	ldr	r2, [pc, #120]	; (8001320 <PWMChannelConfig+0x314>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d101      	bne.n	80012b0 <PWMChannelConfig+0x2a4>
			GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 80012ac:	2309      	movs	r3, #9
 80012ae:	64bb      	str	r3, [r7, #72]	; 0x48
			}

	    HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80012b0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80012b4:	4619      	mov	r1, r3
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f005 fb7c 	bl	80069b4 <HAL_GPIO_Init>


	    HAL_TIM_PWM_Start(htimx,Channel);
 80012bc:	68b9      	ldr	r1, [r7, #8]
 80012be:	68f8      	ldr	r0, [r7, #12]
 80012c0:	f008 f846 	bl	8009350 <HAL_TIM_PWM_Start>

}
 80012c4:	bf00      	nop
 80012c6:	3768      	adds	r7, #104	; 0x68
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	40022000 	.word	0x40022000
 80012d0:	40021c00 	.word	0x40021c00
 80012d4:	40021800 	.word	0x40021800
 80012d8:	40021400 	.word	0x40021400
 80012dc:	40021000 	.word	0x40021000
 80012e0:	40020c00 	.word	0x40020c00
 80012e4:	40020800 	.word	0x40020800
 80012e8:	40020000 	.word	0x40020000
 80012ec:	40020400 	.word	0x40020400
 80012f0:	40023800 	.word	0x40023800
 80012f4:	2000134c 	.word	0x2000134c
 80012f8:	200013cc 	.word	0x200013cc
 80012fc:	2000124c 	.word	0x2000124c
 8001300:	2000118c 	.word	0x2000118c
 8001304:	2000120c 	.word	0x2000120c
 8001308:	2000114c 	.word	0x2000114c
 800130c:	2000138c 	.word	0x2000138c
 8001310:	200011cc 	.word	0x200011cc
 8001314:	200012cc 	.word	0x200012cc
 8001318:	2000144c 	.word	0x2000144c
 800131c:	2000128c 	.word	0x2000128c
 8001320:	2000140c 	.word	0x2000140c

08001324 <QEIDelay>:
 * Function Return		: None
 * Function Example		: QEIDelay(100);
 */

void QEIDelay(uint8_t value)
{
 8001324:	b480      	push	{r7}
 8001326:	b085      	sub	sp, #20
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	71fb      	strb	r3, [r7, #7]
	uint8_t currentvalues;
	value = value * 8400;
 800132e:	79fb      	ldrb	r3, [r7, #7]
 8001330:	461a      	mov	r2, r3
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	011b      	lsls	r3, r3, #4
 8001338:	71fb      	strb	r3, [r7, #7]
	while(currentvalues < value)
 800133a:	e002      	b.n	8001342 <QEIDelay+0x1e>
	{
		currentvalues++;
 800133c:	7bfb      	ldrb	r3, [r7, #15]
 800133e:	3301      	adds	r3, #1
 8001340:	73fb      	strb	r3, [r7, #15]
	while(currentvalues < value)
 8001342:	7bfa      	ldrb	r2, [r7, #15]
 8001344:	79fb      	ldrb	r3, [r7, #7]
 8001346:	429a      	cmp	r2, r3
 8001348:	d3f8      	bcc.n	800133c <QEIDelay+0x18>
	}
	currentvalues = 0;
 800134a:	2300      	movs	r3, #0
 800134c:	73fb      	strb	r3, [r7, #15]
}
 800134e:	bf00      	nop
 8001350:	3714      	adds	r7, #20
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr

0800135a <SHIFTREGInit>:
 * Function Return		: None
 * Function Example		: SHIFTREGInit(&shiftreg, CASCADE_1, GPIOD, GPIO_Pin_0, GPIOD, GPIO_Pin_1, GPIOD, GPIO_Pin_2);
 */

void SHIFTREGInit (shiftreg_t* shiftreg, fSR cascade, GPIO_TypeDef *GPIOx_sck, uint16_t GPIO_Pin_sck,
		           GPIO_TypeDef *GPIOx_rck , uint16_t GPIO_Pin_rck,GPIO_TypeDef *GPIOx_si, uint16_t GPIO_Pin_si){
 800135a:	b580      	push	{r7, lr}
 800135c:	b086      	sub	sp, #24
 800135e:	af02      	add	r7, sp, #8
 8001360:	60f8      	str	r0, [r7, #12]
 8001362:	607a      	str	r2, [r7, #4]
 8001364:	461a      	mov	r2, r3
 8001366:	460b      	mov	r3, r1
 8001368:	72fb      	strb	r3, [r7, #11]
 800136a:	4613      	mov	r3, r2
 800136c:	813b      	strh	r3, [r7, #8]

	shiftreg->flag = cascade;
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	7afa      	ldrb	r2, [r7, #11]
 8001372:	759a      	strb	r2, [r3, #22]

	shiftreg->GPIOx_sck = GPIOx_sck;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	601a      	str	r2, [r3, #0]
	shiftreg->GPIO_Pin_sck = GPIO_Pin_sck;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	893a      	ldrh	r2, [r7, #8]
 800137e:	809a      	strh	r2, [r3, #4]

	shiftreg->GPIOx_rck = GPIOx_rck;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	69ba      	ldr	r2, [r7, #24]
 8001384:	609a      	str	r2, [r3, #8]
	shiftreg->GPIO_Pin_rck = GPIO_Pin_rck;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	8bba      	ldrh	r2, [r7, #28]
 800138a:	819a      	strh	r2, [r3, #12]

	shiftreg->GPIOx_si = GPIOx_si;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	6a3a      	ldr	r2, [r7, #32]
 8001390:	611a      	str	r2, [r3, #16]
	shiftreg->GPIO_Pin_si = GPIO_Pin_si;
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001396:	829a      	strh	r2, [r3, #20]

	GPIOPinsInit(shiftreg->GPIOx_sck, shiftreg->GPIO_Pin_sck, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	6818      	ldr	r0, [r3, #0]
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	8899      	ldrh	r1, [r3, #4]
 80013a0:	2301      	movs	r3, #1
 80013a2:	9300      	str	r3, [sp, #0]
 80013a4:	2302      	movs	r3, #2
 80013a6:	2201      	movs	r2, #1
 80013a8:	f7ff fae6 	bl	8000978 <GPIOPinsInit>
	GPIOPinsInit(shiftreg->GPIOx_rck, shiftreg->GPIO_Pin_rck, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	6898      	ldr	r0, [r3, #8]
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	8999      	ldrh	r1, [r3, #12]
 80013b4:	2301      	movs	r3, #1
 80013b6:	9300      	str	r3, [sp, #0]
 80013b8:	2302      	movs	r3, #2
 80013ba:	2201      	movs	r2, #1
 80013bc:	f7ff fadc 	bl	8000978 <GPIOPinsInit>
	GPIOPinsInit(shiftreg->GPIOx_si, shiftreg->GPIO_Pin_si , GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	6918      	ldr	r0, [r3, #16]
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	8a99      	ldrh	r1, [r3, #20]
 80013c8:	2301      	movs	r3, #1
 80013ca:	9300      	str	r3, [sp, #0]
 80013cc:	2302      	movs	r3, #2
 80013ce:	2201      	movs	r2, #1
 80013d0:	f7ff fad2 	bl	8000978 <GPIOPinsInit>

}
 80013d4:	bf00      	nop
 80013d6:	3710      	adds	r7, #16
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}

080013dc <SHIFTREGShift>:
 * Function Arguments	: shiftreg			pointer to structure
 * Function Return		: None
 * Function Example		: SHIFTREGShift (&shiftreg);
 */

void SHIFTREGShift(shiftreg_t* shiftreg){
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]

	uint8_t out, i, j;

	i = shiftreg->flag;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	7d9b      	ldrb	r3, [r3, #22]
 80013e8:	73bb      	strb	r3, [r7, #14]

	HAL_GPIO_WritePin(shiftreg->GPIOx_sck , shiftreg->GPIO_Pin_sck, GPIO_PIN_RESET);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6818      	ldr	r0, [r3, #0]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	889b      	ldrh	r3, [r3, #4]
 80013f2:	2200      	movs	r2, #0
 80013f4:	4619      	mov	r1, r3
 80013f6:	f005 fc91 	bl	8006d1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(shiftreg->GPIOx_rck , shiftreg->GPIO_Pin_rck, GPIO_PIN_RESET);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6898      	ldr	r0, [r3, #8]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	899b      	ldrh	r3, [r3, #12]
 8001402:	2200      	movs	r2, #0
 8001404:	4619      	mov	r1, r3
 8001406:	f005 fc89 	bl	8006d1c <HAL_GPIO_WritePin>

	do{
		out = shiftreg->cast[i].Byte;
 800140a:	7bba      	ldrb	r2, [r7, #14]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	3206      	adds	r2, #6
 8001410:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 8001414:	73fb      	strb	r3, [r7, #15]
		for (j = 8; j; j--){
 8001416:	2308      	movs	r3, #8
 8001418:	737b      	strb	r3, [r7, #13]
 800141a:	e02a      	b.n	8001472 <SHIFTREGShift+0x96>
			(out & 0x80) ? HAL_GPIO_WritePin(shiftreg->GPIOx_si , shiftreg->GPIO_Pin_si, GPIO_PIN_SET) : HAL_GPIO_WritePin(shiftreg->GPIOx_si , shiftreg->GPIO_Pin_si, GPIO_PIN_RESET);
 800141c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001420:	2b00      	cmp	r3, #0
 8001422:	da08      	bge.n	8001436 <SHIFTREGShift+0x5a>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6918      	ldr	r0, [r3, #16]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	8a9b      	ldrh	r3, [r3, #20]
 800142c:	2201      	movs	r2, #1
 800142e:	4619      	mov	r1, r3
 8001430:	f005 fc74 	bl	8006d1c <HAL_GPIO_WritePin>
 8001434:	e007      	b.n	8001446 <SHIFTREGShift+0x6a>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6918      	ldr	r0, [r3, #16]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	8a9b      	ldrh	r3, [r3, #20]
 800143e:	2200      	movs	r2, #0
 8001440:	4619      	mov	r1, r3
 8001442:	f005 fc6b 	bl	8006d1c <HAL_GPIO_WritePin>
			out <<= 1;
 8001446:	7bfb      	ldrb	r3, [r7, #15]
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	73fb      	strb	r3, [r7, #15]
			HAL_GPIO_WritePin(shiftreg->GPIOx_sck , shiftreg->GPIO_Pin_sck, GPIO_PIN_SET);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6818      	ldr	r0, [r3, #0]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	889b      	ldrh	r3, [r3, #4]
 8001454:	2201      	movs	r2, #1
 8001456:	4619      	mov	r1, r3
 8001458:	f005 fc60 	bl	8006d1c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(shiftreg->GPIOx_sck , shiftreg->GPIO_Pin_sck, GPIO_PIN_RESET);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6818      	ldr	r0, [r3, #0]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	889b      	ldrh	r3, [r3, #4]
 8001464:	2200      	movs	r2, #0
 8001466:	4619      	mov	r1, r3
 8001468:	f005 fc58 	bl	8006d1c <HAL_GPIO_WritePin>
		for (j = 8; j; j--){
 800146c:	7b7b      	ldrb	r3, [r7, #13]
 800146e:	3b01      	subs	r3, #1
 8001470:	737b      	strb	r3, [r7, #13]
 8001472:	7b7b      	ldrb	r3, [r7, #13]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d1d1      	bne.n	800141c <SHIFTREGShift+0x40>
		}
	}while(i--);
 8001478:	7bbb      	ldrb	r3, [r7, #14]
 800147a:	1e5a      	subs	r2, r3, #1
 800147c:	73ba      	strb	r2, [r7, #14]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d1c3      	bne.n	800140a <SHIFTREGShift+0x2e>

	HAL_GPIO_WritePin(shiftreg->GPIOx_rck , shiftreg->GPIO_Pin_rck, GPIO_PIN_SET);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6898      	ldr	r0, [r3, #8]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	899b      	ldrh	r3, [r3, #12]
 800148a:	2201      	movs	r2, #1
 800148c:	4619      	mov	r1, r3
 800148e:	f005 fc45 	bl	8006d1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(shiftreg->GPIOx_rck , shiftreg->GPIO_Pin_rck, GPIO_PIN_RESET);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6898      	ldr	r0, [r3, #8]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	899b      	ldrh	r3, [r3, #12]
 800149a:	2200      	movs	r2, #0
 800149c:	4619      	mov	r1, r3
 800149e:	f005 fc3d 	bl	8006d1c <HAL_GPIO_WritePin>

}
 80014a2:	bf00      	nop
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
	...

080014ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	607b      	str	r3, [r7, #4]
 80014b6:	4b10      	ldr	r3, [pc, #64]	; (80014f8 <HAL_MspInit+0x4c>)
 80014b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ba:	4a0f      	ldr	r2, [pc, #60]	; (80014f8 <HAL_MspInit+0x4c>)
 80014bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014c0:	6453      	str	r3, [r2, #68]	; 0x44
 80014c2:	4b0d      	ldr	r3, [pc, #52]	; (80014f8 <HAL_MspInit+0x4c>)
 80014c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014ca:	607b      	str	r3, [r7, #4]
 80014cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	603b      	str	r3, [r7, #0]
 80014d2:	4b09      	ldr	r3, [pc, #36]	; (80014f8 <HAL_MspInit+0x4c>)
 80014d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d6:	4a08      	ldr	r2, [pc, #32]	; (80014f8 <HAL_MspInit+0x4c>)
 80014d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014dc:	6413      	str	r3, [r2, #64]	; 0x40
 80014de:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <HAL_MspInit+0x4c>)
 80014e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014e6:	603b      	str	r3, [r7, #0]
 80014e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ea:	bf00      	nop
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	40023800 	.word	0x40023800

080014fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b087      	sub	sp, #28
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]

  if(hadc->Instance==ADC1)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a1f      	ldr	r2, [pc, #124]	; (8001588 <HAL_ADC_MspInit+0x8c>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d10e      	bne.n	800152c <HAL_ADC_MspInit+0x30>
  {
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	617b      	str	r3, [r7, #20]
 8001512:	4b1e      	ldr	r3, [pc, #120]	; (800158c <HAL_ADC_MspInit+0x90>)
 8001514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001516:	4a1d      	ldr	r2, [pc, #116]	; (800158c <HAL_ADC_MspInit+0x90>)
 8001518:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800151c:	6453      	str	r3, [r2, #68]	; 0x44
 800151e:	4b1b      	ldr	r3, [pc, #108]	; (800158c <HAL_ADC_MspInit+0x90>)
 8001520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001526:	617b      	str	r3, [r7, #20]
 8001528:	697b      	ldr	r3, [r7, #20]
	  /* Peripheral clock enable */
	  __HAL_RCC_ADC3_CLK_ENABLE();

  }

}
 800152a:	e026      	b.n	800157a <HAL_ADC_MspInit+0x7e>
  }else if(hadc->Instance==ADC2 ){
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a17      	ldr	r2, [pc, #92]	; (8001590 <HAL_ADC_MspInit+0x94>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d10e      	bne.n	8001554 <HAL_ADC_MspInit+0x58>
	  __HAL_RCC_ADC2_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	613b      	str	r3, [r7, #16]
 800153a:	4b14      	ldr	r3, [pc, #80]	; (800158c <HAL_ADC_MspInit+0x90>)
 800153c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153e:	4a13      	ldr	r2, [pc, #76]	; (800158c <HAL_ADC_MspInit+0x90>)
 8001540:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001544:	6453      	str	r3, [r2, #68]	; 0x44
 8001546:	4b11      	ldr	r3, [pc, #68]	; (800158c <HAL_ADC_MspInit+0x90>)
 8001548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800154e:	613b      	str	r3, [r7, #16]
 8001550:	693b      	ldr	r3, [r7, #16]
}
 8001552:	e012      	b.n	800157a <HAL_ADC_MspInit+0x7e>
  }else if (hadc->Instance==ADC3){
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a0e      	ldr	r2, [pc, #56]	; (8001594 <HAL_ADC_MspInit+0x98>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d10d      	bne.n	800157a <HAL_ADC_MspInit+0x7e>
	  __HAL_RCC_ADC3_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	60fb      	str	r3, [r7, #12]
 8001562:	4b0a      	ldr	r3, [pc, #40]	; (800158c <HAL_ADC_MspInit+0x90>)
 8001564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001566:	4a09      	ldr	r2, [pc, #36]	; (800158c <HAL_ADC_MspInit+0x90>)
 8001568:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800156c:	6453      	str	r3, [r2, #68]	; 0x44
 800156e:	4b07      	ldr	r3, [pc, #28]	; (800158c <HAL_ADC_MspInit+0x90>)
 8001570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001572:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	68fb      	ldr	r3, [r7, #12]
}
 800157a:	bf00      	nop
 800157c:	371c      	adds	r7, #28
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	40012000 	.word	0x40012000
 800158c:	40023800 	.word	0x40023800
 8001590:	40012100 	.word	0x40012100
 8001594:	40012200 	.word	0x40012200

08001598 <HAL_TIM_PWM_MspInit>:

}


void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001598:	b480      	push	{r7}
 800159a:	b091      	sub	sp, #68	; 0x44
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
	if(htim_pwm->Instance==TIM1)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a8d      	ldr	r2, [pc, #564]	; (80017dc <HAL_TIM_PWM_MspInit+0x244>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d10e      	bne.n	80015c8 <HAL_TIM_PWM_MspInit+0x30>
		{
			/* Peripheral clock enable */
			__HAL_RCC_TIM1_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80015ae:	4b8c      	ldr	r3, [pc, #560]	; (80017e0 <HAL_TIM_PWM_MspInit+0x248>)
 80015b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b2:	4a8b      	ldr	r2, [pc, #556]	; (80017e0 <HAL_TIM_PWM_MspInit+0x248>)
 80015b4:	f043 0301 	orr.w	r3, r3, #1
 80015b8:	6453      	str	r3, [r2, #68]	; 0x44
 80015ba:	4b89      	ldr	r3, [pc, #548]	; (80017e0 <HAL_TIM_PWM_MspInit+0x248>)
 80015bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015be:	f003 0301 	and.w	r3, r3, #1
 80015c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80015c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
	  {
	    /* Peripheral clock enable */
	    __HAL_RCC_TIM14_CLK_ENABLE();
	  }

}
 80015c6:	e102      	b.n	80017ce <HAL_TIM_PWM_MspInit+0x236>
		else if(htim_pwm->Instance==TIM2)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015d0:	d10e      	bne.n	80015f0 <HAL_TIM_PWM_MspInit+0x58>
			__HAL_RCC_TIM2_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80015d6:	4b82      	ldr	r3, [pc, #520]	; (80017e0 <HAL_TIM_PWM_MspInit+0x248>)
 80015d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015da:	4a81      	ldr	r2, [pc, #516]	; (80017e0 <HAL_TIM_PWM_MspInit+0x248>)
 80015dc:	f043 0301 	orr.w	r3, r3, #1
 80015e0:	6413      	str	r3, [r2, #64]	; 0x40
 80015e2:	4b7f      	ldr	r3, [pc, #508]	; (80017e0 <HAL_TIM_PWM_MspInit+0x248>)
 80015e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80015ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80015ee:	e0ee      	b.n	80017ce <HAL_TIM_PWM_MspInit+0x236>
		else if(htim_pwm->Instance==TIM3)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a7b      	ldr	r2, [pc, #492]	; (80017e4 <HAL_TIM_PWM_MspInit+0x24c>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d10e      	bne.n	8001618 <HAL_TIM_PWM_MspInit+0x80>
			__HAL_RCC_TIM3_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	637b      	str	r3, [r7, #52]	; 0x34
 80015fe:	4b78      	ldr	r3, [pc, #480]	; (80017e0 <HAL_TIM_PWM_MspInit+0x248>)
 8001600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001602:	4a77      	ldr	r2, [pc, #476]	; (80017e0 <HAL_TIM_PWM_MspInit+0x248>)
 8001604:	f043 0302 	orr.w	r3, r3, #2
 8001608:	6413      	str	r3, [r2, #64]	; 0x40
 800160a:	4b75      	ldr	r3, [pc, #468]	; (80017e0 <HAL_TIM_PWM_MspInit+0x248>)
 800160c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	637b      	str	r3, [r7, #52]	; 0x34
 8001614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8001616:	e0da      	b.n	80017ce <HAL_TIM_PWM_MspInit+0x236>
		else if(htim_pwm->Instance==TIM4)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a72      	ldr	r2, [pc, #456]	; (80017e8 <HAL_TIM_PWM_MspInit+0x250>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d10e      	bne.n	8001640 <HAL_TIM_PWM_MspInit+0xa8>
			__HAL_RCC_TIM4_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	633b      	str	r3, [r7, #48]	; 0x30
 8001626:	4b6e      	ldr	r3, [pc, #440]	; (80017e0 <HAL_TIM_PWM_MspInit+0x248>)
 8001628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162a:	4a6d      	ldr	r2, [pc, #436]	; (80017e0 <HAL_TIM_PWM_MspInit+0x248>)
 800162c:	f043 0304 	orr.w	r3, r3, #4
 8001630:	6413      	str	r3, [r2, #64]	; 0x40
 8001632:	4b6b      	ldr	r3, [pc, #428]	; (80017e0 <HAL_TIM_PWM_MspInit+0x248>)
 8001634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001636:	f003 0304 	and.w	r3, r3, #4
 800163a:	633b      	str	r3, [r7, #48]	; 0x30
 800163c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800163e:	e0c6      	b.n	80017ce <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM5)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a69      	ldr	r2, [pc, #420]	; (80017ec <HAL_TIM_PWM_MspInit+0x254>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d10e      	bne.n	8001668 <HAL_TIM_PWM_MspInit+0xd0>
	    __HAL_RCC_TIM5_CLK_ENABLE();
 800164a:	2300      	movs	r3, #0
 800164c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800164e:	4b64      	ldr	r3, [pc, #400]	; (80017e0 <HAL_TIM_PWM_MspInit+0x248>)
 8001650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001652:	4a63      	ldr	r2, [pc, #396]	; (80017e0 <HAL_TIM_PWM_MspInit+0x248>)
 8001654:	f043 0308 	orr.w	r3, r3, #8
 8001658:	6413      	str	r3, [r2, #64]	; 0x40
 800165a:	4b61      	ldr	r3, [pc, #388]	; (80017e0 <HAL_TIM_PWM_MspInit+0x248>)
 800165c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165e:	f003 0308 	and.w	r3, r3, #8
 8001662:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8001666:	e0b2      	b.n	80017ce <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM6)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a60      	ldr	r2, [pc, #384]	; (80017f0 <HAL_TIM_PWM_MspInit+0x258>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d10e      	bne.n	8001690 <HAL_TIM_PWM_MspInit+0xf8>
	    __HAL_RCC_TIM6_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	62bb      	str	r3, [r7, #40]	; 0x28
 8001676:	4b5a      	ldr	r3, [pc, #360]	; (80017e0 <HAL_TIM_PWM_MspInit+0x248>)
 8001678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167a:	4a59      	ldr	r2, [pc, #356]	; (80017e0 <HAL_TIM_PWM_MspInit+0x248>)
 800167c:	f043 0310 	orr.w	r3, r3, #16
 8001680:	6413      	str	r3, [r2, #64]	; 0x40
 8001682:	4b57      	ldr	r3, [pc, #348]	; (80017e0 <HAL_TIM_PWM_MspInit+0x248>)
 8001684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001686:	f003 0310 	and.w	r3, r3, #16
 800168a:	62bb      	str	r3, [r7, #40]	; 0x28
 800168c:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800168e:	e09e      	b.n	80017ce <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM7)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a57      	ldr	r2, [pc, #348]	; (80017f4 <HAL_TIM_PWM_MspInit+0x25c>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d10e      	bne.n	80016b8 <HAL_TIM_PWM_MspInit+0x120>
	     __HAL_RCC_TIM7_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	627b      	str	r3, [r7, #36]	; 0x24
 800169e:	4b50      	ldr	r3, [pc, #320]	; (80017e0 <HAL_TIM_PWM_MspInit+0x248>)
 80016a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a2:	4a4f      	ldr	r2, [pc, #316]	; (80017e0 <HAL_TIM_PWM_MspInit+0x248>)
 80016a4:	f043 0320 	orr.w	r3, r3, #32
 80016a8:	6413      	str	r3, [r2, #64]	; 0x40
 80016aa:	4b4d      	ldr	r3, [pc, #308]	; (80017e0 <HAL_TIM_PWM_MspInit+0x248>)
 80016ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ae:	f003 0320 	and.w	r3, r3, #32
 80016b2:	627b      	str	r3, [r7, #36]	; 0x24
 80016b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80016b6:	e08a      	b.n	80017ce <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM8)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a4e      	ldr	r2, [pc, #312]	; (80017f8 <HAL_TIM_PWM_MspInit+0x260>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d10e      	bne.n	80016e0 <HAL_TIM_PWM_MspInit+0x148>
	     __HAL_RCC_TIM8_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	623b      	str	r3, [r7, #32]
 80016c6:	4b46      	ldr	r3, [pc, #280]	; (80017e0 <HAL_TIM_PWM_MspInit+0x248>)
 80016c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ca:	4a45      	ldr	r2, [pc, #276]	; (80017e0 <HAL_TIM_PWM_MspInit+0x248>)
 80016cc:	f043 0302 	orr.w	r3, r3, #2
 80016d0:	6453      	str	r3, [r2, #68]	; 0x44
 80016d2:	4b43      	ldr	r3, [pc, #268]	; (80017e0 <HAL_TIM_PWM_MspInit+0x248>)
 80016d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d6:	f003 0302 	and.w	r3, r3, #2
 80016da:	623b      	str	r3, [r7, #32]
 80016dc:	6a3b      	ldr	r3, [r7, #32]
}
 80016de:	e076      	b.n	80017ce <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM9)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a45      	ldr	r2, [pc, #276]	; (80017fc <HAL_TIM_PWM_MspInit+0x264>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d10e      	bne.n	8001708 <HAL_TIM_PWM_MspInit+0x170>
	    __HAL_RCC_TIM9_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	61fb      	str	r3, [r7, #28]
 80016ee:	4b3c      	ldr	r3, [pc, #240]	; (80017e0 <HAL_TIM_PWM_MspInit+0x248>)
 80016f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f2:	4a3b      	ldr	r2, [pc, #236]	; (80017e0 <HAL_TIM_PWM_MspInit+0x248>)
 80016f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016f8:	6453      	str	r3, [r2, #68]	; 0x44
 80016fa:	4b39      	ldr	r3, [pc, #228]	; (80017e0 <HAL_TIM_PWM_MspInit+0x248>)
 80016fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001702:	61fb      	str	r3, [r7, #28]
 8001704:	69fb      	ldr	r3, [r7, #28]
}
 8001706:	e062      	b.n	80017ce <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM10)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a3c      	ldr	r2, [pc, #240]	; (8001800 <HAL_TIM_PWM_MspInit+0x268>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d10e      	bne.n	8001730 <HAL_TIM_PWM_MspInit+0x198>
	    __HAL_RCC_TIM10_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	61bb      	str	r3, [r7, #24]
 8001716:	4b32      	ldr	r3, [pc, #200]	; (80017e0 <HAL_TIM_PWM_MspInit+0x248>)
 8001718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171a:	4a31      	ldr	r2, [pc, #196]	; (80017e0 <HAL_TIM_PWM_MspInit+0x248>)
 800171c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001720:	6453      	str	r3, [r2, #68]	; 0x44
 8001722:	4b2f      	ldr	r3, [pc, #188]	; (80017e0 <HAL_TIM_PWM_MspInit+0x248>)
 8001724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800172a:	61bb      	str	r3, [r7, #24]
 800172c:	69bb      	ldr	r3, [r7, #24]
}
 800172e:	e04e      	b.n	80017ce <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM11)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a33      	ldr	r2, [pc, #204]	; (8001804 <HAL_TIM_PWM_MspInit+0x26c>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d10e      	bne.n	8001758 <HAL_TIM_PWM_MspInit+0x1c0>
	    __HAL_RCC_TIM11_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	617b      	str	r3, [r7, #20]
 800173e:	4b28      	ldr	r3, [pc, #160]	; (80017e0 <HAL_TIM_PWM_MspInit+0x248>)
 8001740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001742:	4a27      	ldr	r2, [pc, #156]	; (80017e0 <HAL_TIM_PWM_MspInit+0x248>)
 8001744:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001748:	6453      	str	r3, [r2, #68]	; 0x44
 800174a:	4b25      	ldr	r3, [pc, #148]	; (80017e0 <HAL_TIM_PWM_MspInit+0x248>)
 800174c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001752:	617b      	str	r3, [r7, #20]
 8001754:	697b      	ldr	r3, [r7, #20]
}
 8001756:	e03a      	b.n	80017ce <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM12)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a2a      	ldr	r2, [pc, #168]	; (8001808 <HAL_TIM_PWM_MspInit+0x270>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d10e      	bne.n	8001780 <HAL_TIM_PWM_MspInit+0x1e8>
	    __HAL_RCC_TIM12_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	613b      	str	r3, [r7, #16]
 8001766:	4b1e      	ldr	r3, [pc, #120]	; (80017e0 <HAL_TIM_PWM_MspInit+0x248>)
 8001768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176a:	4a1d      	ldr	r2, [pc, #116]	; (80017e0 <HAL_TIM_PWM_MspInit+0x248>)
 800176c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001770:	6413      	str	r3, [r2, #64]	; 0x40
 8001772:	4b1b      	ldr	r3, [pc, #108]	; (80017e0 <HAL_TIM_PWM_MspInit+0x248>)
 8001774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800177a:	613b      	str	r3, [r7, #16]
 800177c:	693b      	ldr	r3, [r7, #16]
}
 800177e:	e026      	b.n	80017ce <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM13)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a21      	ldr	r2, [pc, #132]	; (800180c <HAL_TIM_PWM_MspInit+0x274>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d10e      	bne.n	80017a8 <HAL_TIM_PWM_MspInit+0x210>
	    __HAL_RCC_TIM13_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	60fb      	str	r3, [r7, #12]
 800178e:	4b14      	ldr	r3, [pc, #80]	; (80017e0 <HAL_TIM_PWM_MspInit+0x248>)
 8001790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001792:	4a13      	ldr	r2, [pc, #76]	; (80017e0 <HAL_TIM_PWM_MspInit+0x248>)
 8001794:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001798:	6413      	str	r3, [r2, #64]	; 0x40
 800179a:	4b11      	ldr	r3, [pc, #68]	; (80017e0 <HAL_TIM_PWM_MspInit+0x248>)
 800179c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017a2:	60fb      	str	r3, [r7, #12]
 80017a4:	68fb      	ldr	r3, [r7, #12]
}
 80017a6:	e012      	b.n	80017ce <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM14)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a18      	ldr	r2, [pc, #96]	; (8001810 <HAL_TIM_PWM_MspInit+0x278>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d10d      	bne.n	80017ce <HAL_TIM_PWM_MspInit+0x236>
	    __HAL_RCC_TIM14_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	60bb      	str	r3, [r7, #8]
 80017b6:	4b0a      	ldr	r3, [pc, #40]	; (80017e0 <HAL_TIM_PWM_MspInit+0x248>)
 80017b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ba:	4a09      	ldr	r2, [pc, #36]	; (80017e0 <HAL_TIM_PWM_MspInit+0x248>)
 80017bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017c0:	6413      	str	r3, [r2, #64]	; 0x40
 80017c2:	4b07      	ldr	r3, [pc, #28]	; (80017e0 <HAL_TIM_PWM_MspInit+0x248>)
 80017c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ca:	60bb      	str	r3, [r7, #8]
 80017cc:	68bb      	ldr	r3, [r7, #8]
}
 80017ce:	bf00      	nop
 80017d0:	3744      	adds	r7, #68	; 0x44
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	40010000 	.word	0x40010000
 80017e0:	40023800 	.word	0x40023800
 80017e4:	40000400 	.word	0x40000400
 80017e8:	40000800 	.word	0x40000800
 80017ec:	40000c00 	.word	0x40000c00
 80017f0:	40001000 	.word	0x40001000
 80017f4:	40001400 	.word	0x40001400
 80017f8:	40010400 	.word	0x40010400
 80017fc:	40014000 	.word	0x40014000
 8001800:	40014400 	.word	0x40014400
 8001804:	40014800 	.word	0x40014800
 8001808:	40001800 	.word	0x40001800
 800180c:	40001c00 	.word	0x40001c00
 8001810:	40002000 	.word	0x40002000

08001814 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001814:	b480      	push	{r7}
 8001816:	b091      	sub	sp, #68	; 0x44
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]

	if(htim_base->Instance==TIM1)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a8d      	ldr	r2, [pc, #564]	; (8001a58 <HAL_TIM_Base_MspInit+0x244>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d10e      	bne.n	8001844 <HAL_TIM_Base_MspInit+0x30>
	{
		/* Peripheral clock enable */
		__HAL_RCC_TIM1_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	63fb      	str	r3, [r7, #60]	; 0x3c
 800182a:	4b8c      	ldr	r3, [pc, #560]	; (8001a5c <HAL_TIM_Base_MspInit+0x248>)
 800182c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182e:	4a8b      	ldr	r2, [pc, #556]	; (8001a5c <HAL_TIM_Base_MspInit+0x248>)
 8001830:	f043 0301 	orr.w	r3, r3, #1
 8001834:	6453      	str	r3, [r2, #68]	; 0x44
 8001836:	4b89      	ldr	r3, [pc, #548]	; (8001a5c <HAL_TIM_Base_MspInit+0x248>)
 8001838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001840:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  else if(htim_base->Instance==TIM14)
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
  }
}
 8001842:	e102      	b.n	8001a4a <HAL_TIM_Base_MspInit+0x236>
	else if(htim_base->Instance==TIM2)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800184c:	d10e      	bne.n	800186c <HAL_TIM_Base_MspInit+0x58>
		__HAL_RCC_TIM2_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	63bb      	str	r3, [r7, #56]	; 0x38
 8001852:	4b82      	ldr	r3, [pc, #520]	; (8001a5c <HAL_TIM_Base_MspInit+0x248>)
 8001854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001856:	4a81      	ldr	r2, [pc, #516]	; (8001a5c <HAL_TIM_Base_MspInit+0x248>)
 8001858:	f043 0301 	orr.w	r3, r3, #1
 800185c:	6413      	str	r3, [r2, #64]	; 0x40
 800185e:	4b7f      	ldr	r3, [pc, #508]	; (8001a5c <HAL_TIM_Base_MspInit+0x248>)
 8001860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001862:	f003 0301 	and.w	r3, r3, #1
 8001866:	63bb      	str	r3, [r7, #56]	; 0x38
 8001868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800186a:	e0ee      	b.n	8001a4a <HAL_TIM_Base_MspInit+0x236>
	else if(htim_base->Instance==TIM3)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a7b      	ldr	r2, [pc, #492]	; (8001a60 <HAL_TIM_Base_MspInit+0x24c>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d10e      	bne.n	8001894 <HAL_TIM_Base_MspInit+0x80>
		__HAL_RCC_TIM3_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	637b      	str	r3, [r7, #52]	; 0x34
 800187a:	4b78      	ldr	r3, [pc, #480]	; (8001a5c <HAL_TIM_Base_MspInit+0x248>)
 800187c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187e:	4a77      	ldr	r2, [pc, #476]	; (8001a5c <HAL_TIM_Base_MspInit+0x248>)
 8001880:	f043 0302 	orr.w	r3, r3, #2
 8001884:	6413      	str	r3, [r2, #64]	; 0x40
 8001886:	4b75      	ldr	r3, [pc, #468]	; (8001a5c <HAL_TIM_Base_MspInit+0x248>)
 8001888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188a:	f003 0302 	and.w	r3, r3, #2
 800188e:	637b      	str	r3, [r7, #52]	; 0x34
 8001890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8001892:	e0da      	b.n	8001a4a <HAL_TIM_Base_MspInit+0x236>
	else if(htim_base->Instance==TIM4)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a72      	ldr	r2, [pc, #456]	; (8001a64 <HAL_TIM_Base_MspInit+0x250>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d10e      	bne.n	80018bc <HAL_TIM_Base_MspInit+0xa8>
		__HAL_RCC_TIM4_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	633b      	str	r3, [r7, #48]	; 0x30
 80018a2:	4b6e      	ldr	r3, [pc, #440]	; (8001a5c <HAL_TIM_Base_MspInit+0x248>)
 80018a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a6:	4a6d      	ldr	r2, [pc, #436]	; (8001a5c <HAL_TIM_Base_MspInit+0x248>)
 80018a8:	f043 0304 	orr.w	r3, r3, #4
 80018ac:	6413      	str	r3, [r2, #64]	; 0x40
 80018ae:	4b6b      	ldr	r3, [pc, #428]	; (8001a5c <HAL_TIM_Base_MspInit+0x248>)
 80018b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b2:	f003 0304 	and.w	r3, r3, #4
 80018b6:	633b      	str	r3, [r7, #48]	; 0x30
 80018b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80018ba:	e0c6      	b.n	8001a4a <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM5)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a69      	ldr	r2, [pc, #420]	; (8001a68 <HAL_TIM_Base_MspInit+0x254>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d10e      	bne.n	80018e4 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018ca:	4b64      	ldr	r3, [pc, #400]	; (8001a5c <HAL_TIM_Base_MspInit+0x248>)
 80018cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ce:	4a63      	ldr	r2, [pc, #396]	; (8001a5c <HAL_TIM_Base_MspInit+0x248>)
 80018d0:	f043 0308 	orr.w	r3, r3, #8
 80018d4:	6413      	str	r3, [r2, #64]	; 0x40
 80018d6:	4b61      	ldr	r3, [pc, #388]	; (8001a5c <HAL_TIM_Base_MspInit+0x248>)
 80018d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018da:	f003 0308 	and.w	r3, r3, #8
 80018de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80018e2:	e0b2      	b.n	8001a4a <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM6)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a60      	ldr	r2, [pc, #384]	; (8001a6c <HAL_TIM_Base_MspInit+0x258>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d10e      	bne.n	800190c <HAL_TIM_Base_MspInit+0xf8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80018ee:	2300      	movs	r3, #0
 80018f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80018f2:	4b5a      	ldr	r3, [pc, #360]	; (8001a5c <HAL_TIM_Base_MspInit+0x248>)
 80018f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f6:	4a59      	ldr	r2, [pc, #356]	; (8001a5c <HAL_TIM_Base_MspInit+0x248>)
 80018f8:	f043 0310 	orr.w	r3, r3, #16
 80018fc:	6413      	str	r3, [r2, #64]	; 0x40
 80018fe:	4b57      	ldr	r3, [pc, #348]	; (8001a5c <HAL_TIM_Base_MspInit+0x248>)
 8001900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001902:	f003 0310 	and.w	r3, r3, #16
 8001906:	62bb      	str	r3, [r7, #40]	; 0x28
 8001908:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800190a:	e09e      	b.n	8001a4a <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM7)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a57      	ldr	r2, [pc, #348]	; (8001a70 <HAL_TIM_Base_MspInit+0x25c>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d10e      	bne.n	8001934 <HAL_TIM_Base_MspInit+0x120>
     __HAL_RCC_TIM7_CLK_ENABLE();
 8001916:	2300      	movs	r3, #0
 8001918:	627b      	str	r3, [r7, #36]	; 0x24
 800191a:	4b50      	ldr	r3, [pc, #320]	; (8001a5c <HAL_TIM_Base_MspInit+0x248>)
 800191c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191e:	4a4f      	ldr	r2, [pc, #316]	; (8001a5c <HAL_TIM_Base_MspInit+0x248>)
 8001920:	f043 0320 	orr.w	r3, r3, #32
 8001924:	6413      	str	r3, [r2, #64]	; 0x40
 8001926:	4b4d      	ldr	r3, [pc, #308]	; (8001a5c <HAL_TIM_Base_MspInit+0x248>)
 8001928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192a:	f003 0320 	and.w	r3, r3, #32
 800192e:	627b      	str	r3, [r7, #36]	; 0x24
 8001930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001932:	e08a      	b.n	8001a4a <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM8)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a4e      	ldr	r2, [pc, #312]	; (8001a74 <HAL_TIM_Base_MspInit+0x260>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d10e      	bne.n	800195c <HAL_TIM_Base_MspInit+0x148>
     __HAL_RCC_TIM8_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	623b      	str	r3, [r7, #32]
 8001942:	4b46      	ldr	r3, [pc, #280]	; (8001a5c <HAL_TIM_Base_MspInit+0x248>)
 8001944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001946:	4a45      	ldr	r2, [pc, #276]	; (8001a5c <HAL_TIM_Base_MspInit+0x248>)
 8001948:	f043 0302 	orr.w	r3, r3, #2
 800194c:	6453      	str	r3, [r2, #68]	; 0x44
 800194e:	4b43      	ldr	r3, [pc, #268]	; (8001a5c <HAL_TIM_Base_MspInit+0x248>)
 8001950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	623b      	str	r3, [r7, #32]
 8001958:	6a3b      	ldr	r3, [r7, #32]
}
 800195a:	e076      	b.n	8001a4a <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM9)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a45      	ldr	r2, [pc, #276]	; (8001a78 <HAL_TIM_Base_MspInit+0x264>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d10e      	bne.n	8001984 <HAL_TIM_Base_MspInit+0x170>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001966:	2300      	movs	r3, #0
 8001968:	61fb      	str	r3, [r7, #28]
 800196a:	4b3c      	ldr	r3, [pc, #240]	; (8001a5c <HAL_TIM_Base_MspInit+0x248>)
 800196c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196e:	4a3b      	ldr	r2, [pc, #236]	; (8001a5c <HAL_TIM_Base_MspInit+0x248>)
 8001970:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001974:	6453      	str	r3, [r2, #68]	; 0x44
 8001976:	4b39      	ldr	r3, [pc, #228]	; (8001a5c <HAL_TIM_Base_MspInit+0x248>)
 8001978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800197a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800197e:	61fb      	str	r3, [r7, #28]
 8001980:	69fb      	ldr	r3, [r7, #28]
}
 8001982:	e062      	b.n	8001a4a <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM10)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a3c      	ldr	r2, [pc, #240]	; (8001a7c <HAL_TIM_Base_MspInit+0x268>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d10e      	bne.n	80019ac <HAL_TIM_Base_MspInit+0x198>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800198e:	2300      	movs	r3, #0
 8001990:	61bb      	str	r3, [r7, #24]
 8001992:	4b32      	ldr	r3, [pc, #200]	; (8001a5c <HAL_TIM_Base_MspInit+0x248>)
 8001994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001996:	4a31      	ldr	r2, [pc, #196]	; (8001a5c <HAL_TIM_Base_MspInit+0x248>)
 8001998:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800199c:	6453      	str	r3, [r2, #68]	; 0x44
 800199e:	4b2f      	ldr	r3, [pc, #188]	; (8001a5c <HAL_TIM_Base_MspInit+0x248>)
 80019a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a6:	61bb      	str	r3, [r7, #24]
 80019a8:	69bb      	ldr	r3, [r7, #24]
}
 80019aa:	e04e      	b.n	8001a4a <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM11)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a33      	ldr	r2, [pc, #204]	; (8001a80 <HAL_TIM_Base_MspInit+0x26c>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d10e      	bne.n	80019d4 <HAL_TIM_Base_MspInit+0x1c0>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80019b6:	2300      	movs	r3, #0
 80019b8:	617b      	str	r3, [r7, #20]
 80019ba:	4b28      	ldr	r3, [pc, #160]	; (8001a5c <HAL_TIM_Base_MspInit+0x248>)
 80019bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019be:	4a27      	ldr	r2, [pc, #156]	; (8001a5c <HAL_TIM_Base_MspInit+0x248>)
 80019c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019c4:	6453      	str	r3, [r2, #68]	; 0x44
 80019c6:	4b25      	ldr	r3, [pc, #148]	; (8001a5c <HAL_TIM_Base_MspInit+0x248>)
 80019c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019ce:	617b      	str	r3, [r7, #20]
 80019d0:	697b      	ldr	r3, [r7, #20]
}
 80019d2:	e03a      	b.n	8001a4a <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM12)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a2a      	ldr	r2, [pc, #168]	; (8001a84 <HAL_TIM_Base_MspInit+0x270>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d10e      	bne.n	80019fc <HAL_TIM_Base_MspInit+0x1e8>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	613b      	str	r3, [r7, #16]
 80019e2:	4b1e      	ldr	r3, [pc, #120]	; (8001a5c <HAL_TIM_Base_MspInit+0x248>)
 80019e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e6:	4a1d      	ldr	r2, [pc, #116]	; (8001a5c <HAL_TIM_Base_MspInit+0x248>)
 80019e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019ec:	6413      	str	r3, [r2, #64]	; 0x40
 80019ee:	4b1b      	ldr	r3, [pc, #108]	; (8001a5c <HAL_TIM_Base_MspInit+0x248>)
 80019f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019f6:	613b      	str	r3, [r7, #16]
 80019f8:	693b      	ldr	r3, [r7, #16]
}
 80019fa:	e026      	b.n	8001a4a <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM13)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a21      	ldr	r2, [pc, #132]	; (8001a88 <HAL_TIM_Base_MspInit+0x274>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d10e      	bne.n	8001a24 <HAL_TIM_Base_MspInit+0x210>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001a06:	2300      	movs	r3, #0
 8001a08:	60fb      	str	r3, [r7, #12]
 8001a0a:	4b14      	ldr	r3, [pc, #80]	; (8001a5c <HAL_TIM_Base_MspInit+0x248>)
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0e:	4a13      	ldr	r2, [pc, #76]	; (8001a5c <HAL_TIM_Base_MspInit+0x248>)
 8001a10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a14:	6413      	str	r3, [r2, #64]	; 0x40
 8001a16:	4b11      	ldr	r3, [pc, #68]	; (8001a5c <HAL_TIM_Base_MspInit+0x248>)
 8001a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a1e:	60fb      	str	r3, [r7, #12]
 8001a20:	68fb      	ldr	r3, [r7, #12]
}
 8001a22:	e012      	b.n	8001a4a <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM14)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a18      	ldr	r2, [pc, #96]	; (8001a8c <HAL_TIM_Base_MspInit+0x278>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d10d      	bne.n	8001a4a <HAL_TIM_Base_MspInit+0x236>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60bb      	str	r3, [r7, #8]
 8001a32:	4b0a      	ldr	r3, [pc, #40]	; (8001a5c <HAL_TIM_Base_MspInit+0x248>)
 8001a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a36:	4a09      	ldr	r2, [pc, #36]	; (8001a5c <HAL_TIM_Base_MspInit+0x248>)
 8001a38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a3e:	4b07      	ldr	r3, [pc, #28]	; (8001a5c <HAL_TIM_Base_MspInit+0x248>)
 8001a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a46:	60bb      	str	r3, [r7, #8]
 8001a48:	68bb      	ldr	r3, [r7, #8]
}
 8001a4a:	bf00      	nop
 8001a4c:	3744      	adds	r7, #68	; 0x44
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	40010000 	.word	0x40010000
 8001a5c:	40023800 	.word	0x40023800
 8001a60:	40000400 	.word	0x40000400
 8001a64:	40000800 	.word	0x40000800
 8001a68:	40000c00 	.word	0x40000c00
 8001a6c:	40001000 	.word	0x40001000
 8001a70:	40001400 	.word	0x40001400
 8001a74:	40010400 	.word	0x40010400
 8001a78:	40014000 	.word	0x40014000
 8001a7c:	40014400 	.word	0x40014400
 8001a80:	40014800 	.word	0x40014800
 8001a84:	40001800 	.word	0x40001800
 8001a88:	40001c00 	.word	0x40001c00
 8001a8c:	40002000 	.word	0x40002000

08001a90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b094      	sub	sp, #80	; 0x50
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a98:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	605a      	str	r2, [r3, #4]
 8001aa2:	609a      	str	r2, [r3, #8]
 8001aa4:	60da      	str	r2, [r3, #12]
 8001aa6:	611a      	str	r2, [r3, #16]

  if(huart->Instance==USART1)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a8c      	ldr	r2, [pc, #560]	; (8001ce0 <HAL_UART_MspInit+0x250>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d12d      	bne.n	8001b0e <HAL_UART_MspInit+0x7e>
    {
	  __HAL_RCC_USART1_CLK_ENABLE();
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ab6:	4b8b      	ldr	r3, [pc, #556]	; (8001ce4 <HAL_UART_MspInit+0x254>)
 8001ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aba:	4a8a      	ldr	r2, [pc, #552]	; (8001ce4 <HAL_UART_MspInit+0x254>)
 8001abc:	f043 0310 	orr.w	r3, r3, #16
 8001ac0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ac2:	4b88      	ldr	r3, [pc, #544]	; (8001ce4 <HAL_UART_MspInit+0x254>)
 8001ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac6:	f003 0310 	and.w	r3, r3, #16
 8001aca:	63bb      	str	r3, [r7, #56]	; 0x38
 8001acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38

	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ace:	2300      	movs	r3, #0
 8001ad0:	637b      	str	r3, [r7, #52]	; 0x34
 8001ad2:	4b84      	ldr	r3, [pc, #528]	; (8001ce4 <HAL_UART_MspInit+0x254>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad6:	4a83      	ldr	r2, [pc, #524]	; (8001ce4 <HAL_UART_MspInit+0x254>)
 8001ad8:	f043 0301 	orr.w	r3, r3, #1
 8001adc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ade:	4b81      	ldr	r3, [pc, #516]	; (8001ce4 <HAL_UART_MspInit+0x254>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	637b      	str	r3, [r7, #52]	; 0x34
 8001ae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	  /**USART1 GPIO Configuration
	      PA9     ------> USART1_TX
	      PA10     ------> USART1_RX
	   */
	  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001aea:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001aee:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af0:	2302      	movs	r3, #2
 8001af2:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af4:	2300      	movs	r3, #0
 8001af6:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af8:	2303      	movs	r3, #3
 8001afa:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001afc:	2307      	movs	r3, #7
 8001afe:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b00:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001b04:	4619      	mov	r1, r3
 8001b06:	4878      	ldr	r0, [pc, #480]	; (8001ce8 <HAL_UART_MspInit+0x258>)
 8001b08:	f004 ff54 	bl	80069b4 <HAL_GPIO_Init>
   /* USER CODE BEGIN USART6_MspInit 1 */

   /* USER CODE END USART6_MspInit 1 */
   }

}
 8001b0c:	e12b      	b.n	8001d66 <HAL_UART_MspInit+0x2d6>
  else if(huart->Instance==USART2)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a76      	ldr	r2, [pc, #472]	; (8001cec <HAL_UART_MspInit+0x25c>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d12c      	bne.n	8001b72 <HAL_UART_MspInit+0xe2>
      __HAL_RCC_USART2_CLK_ENABLE();
 8001b18:	2300      	movs	r3, #0
 8001b1a:	633b      	str	r3, [r7, #48]	; 0x30
 8001b1c:	4b71      	ldr	r3, [pc, #452]	; (8001ce4 <HAL_UART_MspInit+0x254>)
 8001b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b20:	4a70      	ldr	r2, [pc, #448]	; (8001ce4 <HAL_UART_MspInit+0x254>)
 8001b22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b26:	6413      	str	r3, [r2, #64]	; 0x40
 8001b28:	4b6e      	ldr	r3, [pc, #440]	; (8001ce4 <HAL_UART_MspInit+0x254>)
 8001b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b30:	633b      	str	r3, [r7, #48]	; 0x30
 8001b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b34:	2300      	movs	r3, #0
 8001b36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b38:	4b6a      	ldr	r3, [pc, #424]	; (8001ce4 <HAL_UART_MspInit+0x254>)
 8001b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3c:	4a69      	ldr	r2, [pc, #420]	; (8001ce4 <HAL_UART_MspInit+0x254>)
 8001b3e:	f043 0308 	orr.w	r3, r3, #8
 8001b42:	6313      	str	r3, [r2, #48]	; 0x30
 8001b44:	4b67      	ldr	r3, [pc, #412]	; (8001ce4 <HAL_UART_MspInit+0x254>)
 8001b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b48:	f003 0308 	and.w	r3, r3, #8
 8001b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001b50:	2360      	movs	r3, #96	; 0x60
 8001b52:	63fb      	str	r3, [r7, #60]	; 0x3c
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b54:	2302      	movs	r3, #2
 8001b56:	643b      	str	r3, [r7, #64]	; 0x40
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	647b      	str	r3, [r7, #68]	; 0x44
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	64bb      	str	r3, [r7, #72]	; 0x48
      GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b60:	2307      	movs	r3, #7
 8001b62:	64fb      	str	r3, [r7, #76]	; 0x4c
      HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b64:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4861      	ldr	r0, [pc, #388]	; (8001cf0 <HAL_UART_MspInit+0x260>)
 8001b6c:	f004 ff22 	bl	80069b4 <HAL_GPIO_Init>
}
 8001b70:	e0f9      	b.n	8001d66 <HAL_UART_MspInit+0x2d6>
  else if(huart->Instance==USART3)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a5f      	ldr	r2, [pc, #380]	; (8001cf4 <HAL_UART_MspInit+0x264>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d12d      	bne.n	8001bd8 <HAL_UART_MspInit+0x148>
      __HAL_RCC_USART3_CLK_ENABLE();
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b80:	4b58      	ldr	r3, [pc, #352]	; (8001ce4 <HAL_UART_MspInit+0x254>)
 8001b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b84:	4a57      	ldr	r2, [pc, #348]	; (8001ce4 <HAL_UART_MspInit+0x254>)
 8001b86:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b8a:	6413      	str	r3, [r2, #64]	; 0x40
 8001b8c:	4b55      	ldr	r3, [pc, #340]	; (8001ce4 <HAL_UART_MspInit+0x254>)
 8001b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b94:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
      __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b98:	2300      	movs	r3, #0
 8001b9a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b9c:	4b51      	ldr	r3, [pc, #324]	; (8001ce4 <HAL_UART_MspInit+0x254>)
 8001b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba0:	4a50      	ldr	r2, [pc, #320]	; (8001ce4 <HAL_UART_MspInit+0x254>)
 8001ba2:	f043 0308 	orr.w	r3, r3, #8
 8001ba6:	6313      	str	r3, [r2, #48]	; 0x30
 8001ba8:	4b4e      	ldr	r3, [pc, #312]	; (8001ce4 <HAL_UART_MspInit+0x254>)
 8001baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bac:	f003 0308 	and.w	r3, r3, #8
 8001bb0:	627b      	str	r3, [r7, #36]	; 0x24
 8001bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
      GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001bb4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bba:	2302      	movs	r3, #2
 8001bbc:	643b      	str	r3, [r7, #64]	; 0x40
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	647b      	str	r3, [r7, #68]	; 0x44
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	64bb      	str	r3, [r7, #72]	; 0x48
      GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001bc6:	2307      	movs	r3, #7
 8001bc8:	64fb      	str	r3, [r7, #76]	; 0x4c
      HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4847      	ldr	r0, [pc, #284]	; (8001cf0 <HAL_UART_MspInit+0x260>)
 8001bd2:	f004 feef 	bl	80069b4 <HAL_GPIO_Init>
}
 8001bd6:	e0c6      	b.n	8001d66 <HAL_UART_MspInit+0x2d6>
  else if(huart->Instance==UART4)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a46      	ldr	r2, [pc, #280]	; (8001cf8 <HAL_UART_MspInit+0x268>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d12d      	bne.n	8001c3e <HAL_UART_MspInit+0x1ae>
    __HAL_RCC_UART4_CLK_ENABLE();
 8001be2:	2300      	movs	r3, #0
 8001be4:	623b      	str	r3, [r7, #32]
 8001be6:	4b3f      	ldr	r3, [pc, #252]	; (8001ce4 <HAL_UART_MspInit+0x254>)
 8001be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bea:	4a3e      	ldr	r2, [pc, #248]	; (8001ce4 <HAL_UART_MspInit+0x254>)
 8001bec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001bf0:	6413      	str	r3, [r2, #64]	; 0x40
 8001bf2:	4b3c      	ldr	r3, [pc, #240]	; (8001ce4 <HAL_UART_MspInit+0x254>)
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bfa:	623b      	str	r3, [r7, #32]
 8001bfc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	61fb      	str	r3, [r7, #28]
 8001c02:	4b38      	ldr	r3, [pc, #224]	; (8001ce4 <HAL_UART_MspInit+0x254>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	4a37      	ldr	r2, [pc, #220]	; (8001ce4 <HAL_UART_MspInit+0x254>)
 8001c08:	f043 0304 	orr.w	r3, r3, #4
 8001c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c0e:	4b35      	ldr	r3, [pc, #212]	; (8001ce4 <HAL_UART_MspInit+0x254>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	f003 0304 	and.w	r3, r3, #4
 8001c16:	61fb      	str	r3, [r7, #28]
 8001c18:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001c1a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c20:	2302      	movs	r3, #2
 8001c22:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c24:	2301      	movs	r3, #1
 8001c26:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001c2c:	2308      	movs	r3, #8
 8001c2e:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c30:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001c34:	4619      	mov	r1, r3
 8001c36:	4831      	ldr	r0, [pc, #196]	; (8001cfc <HAL_UART_MspInit+0x26c>)
 8001c38:	f004 febc 	bl	80069b4 <HAL_GPIO_Init>
}
 8001c3c:	e093      	b.n	8001d66 <HAL_UART_MspInit+0x2d6>
  else if(huart->Instance==UART5)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a2f      	ldr	r2, [pc, #188]	; (8001d00 <HAL_UART_MspInit+0x270>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d15d      	bne.n	8001d04 <HAL_UART_MspInit+0x274>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001c48:	2300      	movs	r3, #0
 8001c4a:	61bb      	str	r3, [r7, #24]
 8001c4c:	4b25      	ldr	r3, [pc, #148]	; (8001ce4 <HAL_UART_MspInit+0x254>)
 8001c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c50:	4a24      	ldr	r2, [pc, #144]	; (8001ce4 <HAL_UART_MspInit+0x254>)
 8001c52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001c56:	6413      	str	r3, [r2, #64]	; 0x40
 8001c58:	4b22      	ldr	r3, [pc, #136]	; (8001ce4 <HAL_UART_MspInit+0x254>)
 8001c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c60:	61bb      	str	r3, [r7, #24]
 8001c62:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c64:	2300      	movs	r3, #0
 8001c66:	617b      	str	r3, [r7, #20]
 8001c68:	4b1e      	ldr	r3, [pc, #120]	; (8001ce4 <HAL_UART_MspInit+0x254>)
 8001c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6c:	4a1d      	ldr	r2, [pc, #116]	; (8001ce4 <HAL_UART_MspInit+0x254>)
 8001c6e:	f043 0304 	orr.w	r3, r3, #4
 8001c72:	6313      	str	r3, [r2, #48]	; 0x30
 8001c74:	4b1b      	ldr	r3, [pc, #108]	; (8001ce4 <HAL_UART_MspInit+0x254>)
 8001c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c78:	f003 0304 	and.w	r3, r3, #4
 8001c7c:	617b      	str	r3, [r7, #20]
 8001c7e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c80:	2300      	movs	r3, #0
 8001c82:	613b      	str	r3, [r7, #16]
 8001c84:	4b17      	ldr	r3, [pc, #92]	; (8001ce4 <HAL_UART_MspInit+0x254>)
 8001c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c88:	4a16      	ldr	r2, [pc, #88]	; (8001ce4 <HAL_UART_MspInit+0x254>)
 8001c8a:	f043 0308 	orr.w	r3, r3, #8
 8001c8e:	6313      	str	r3, [r2, #48]	; 0x30
 8001c90:	4b14      	ldr	r3, [pc, #80]	; (8001ce4 <HAL_UART_MspInit+0x254>)
 8001c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c94:	f003 0308 	and.w	r3, r3, #8
 8001c98:	613b      	str	r3, [r7, #16]
 8001c9a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001c9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001caa:	2303      	movs	r3, #3
 8001cac:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001cae:	2308      	movs	r3, #8
 8001cb0:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cb2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	4810      	ldr	r0, [pc, #64]	; (8001cfc <HAL_UART_MspInit+0x26c>)
 8001cba:	f004 fe7b 	bl	80069b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001cbe:	2304      	movs	r3, #4
 8001cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001cce:	2308      	movs	r3, #8
 8001cd0:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cd2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4805      	ldr	r0, [pc, #20]	; (8001cf0 <HAL_UART_MspInit+0x260>)
 8001cda:	f004 fe6b 	bl	80069b4 <HAL_GPIO_Init>
}
 8001cde:	e042      	b.n	8001d66 <HAL_UART_MspInit+0x2d6>
 8001ce0:	40011000 	.word	0x40011000
 8001ce4:	40023800 	.word	0x40023800
 8001ce8:	40020000 	.word	0x40020000
 8001cec:	40004400 	.word	0x40004400
 8001cf0:	40020c00 	.word	0x40020c00
 8001cf4:	40004800 	.word	0x40004800
 8001cf8:	40004c00 	.word	0x40004c00
 8001cfc:	40020800 	.word	0x40020800
 8001d00:	40005000 	.word	0x40005000
  else if(huart->Instance==USART6)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a19      	ldr	r2, [pc, #100]	; (8001d70 <HAL_UART_MspInit+0x2e0>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d12b      	bne.n	8001d66 <HAL_UART_MspInit+0x2d6>
     __HAL_RCC_USART6_CLK_ENABLE();
 8001d0e:	2300      	movs	r3, #0
 8001d10:	60fb      	str	r3, [r7, #12]
 8001d12:	4b18      	ldr	r3, [pc, #96]	; (8001d74 <HAL_UART_MspInit+0x2e4>)
 8001d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d16:	4a17      	ldr	r2, [pc, #92]	; (8001d74 <HAL_UART_MspInit+0x2e4>)
 8001d18:	f043 0320 	orr.w	r3, r3, #32
 8001d1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d1e:	4b15      	ldr	r3, [pc, #84]	; (8001d74 <HAL_UART_MspInit+0x2e4>)
 8001d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d22:	f003 0320 	and.w	r3, r3, #32
 8001d26:	60fb      	str	r3, [r7, #12]
 8001d28:	68fb      	ldr	r3, [r7, #12]
     __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	60bb      	str	r3, [r7, #8]
 8001d2e:	4b11      	ldr	r3, [pc, #68]	; (8001d74 <HAL_UART_MspInit+0x2e4>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d32:	4a10      	ldr	r2, [pc, #64]	; (8001d74 <HAL_UART_MspInit+0x2e4>)
 8001d34:	f043 0304 	orr.w	r3, r3, #4
 8001d38:	6313      	str	r3, [r2, #48]	; 0x30
 8001d3a:	4b0e      	ldr	r3, [pc, #56]	; (8001d74 <HAL_UART_MspInit+0x2e4>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	f003 0304 	and.w	r3, r3, #4
 8001d42:	60bb      	str	r3, [r7, #8]
 8001d44:	68bb      	ldr	r3, [r7, #8]
     GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d46:	23c0      	movs	r3, #192	; 0xc0
 8001d48:	63fb      	str	r3, [r7, #60]	; 0x3c
     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	643b      	str	r3, [r7, #64]	; 0x40
     GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	647b      	str	r3, [r7, #68]	; 0x44
     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d52:	2303      	movs	r3, #3
 8001d54:	64bb      	str	r3, [r7, #72]	; 0x48
     GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001d56:	2308      	movs	r3, #8
 8001d58:	64fb      	str	r3, [r7, #76]	; 0x4c
     HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d5a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001d5e:	4619      	mov	r1, r3
 8001d60:	4805      	ldr	r0, [pc, #20]	; (8001d78 <HAL_UART_MspInit+0x2e8>)
 8001d62:	f004 fe27 	bl	80069b4 <HAL_GPIO_Init>
}
 8001d66:	bf00      	nop
 8001d68:	3750      	adds	r7, #80	; 0x50
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	40011400 	.word	0x40011400
 8001d74:	40023800 	.word	0x40023800
 8001d78:	40020800 	.word	0x40020800

08001d7c <SystemClock_Config>:

	}
}

void SystemClock_Config(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b094      	sub	sp, #80	; 0x50
 8001d80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d82:	f107 0320 	add.w	r3, r7, #32
 8001d86:	2230      	movs	r2, #48	; 0x30
 8001d88:	2100      	movs	r1, #0
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f009 f932 	bl	800aff4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d90:	f107 030c 	add.w	r3, r7, #12
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]
 8001d98:	605a      	str	r2, [r3, #4]
 8001d9a:	609a      	str	r2, [r3, #8]
 8001d9c:	60da      	str	r2, [r3, #12]
 8001d9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001da0:	2300      	movs	r3, #0
 8001da2:	60bb      	str	r3, [r7, #8]
 8001da4:	4b29      	ldr	r3, [pc, #164]	; (8001e4c <SystemClock_Config+0xd0>)
 8001da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da8:	4a28      	ldr	r2, [pc, #160]	; (8001e4c <SystemClock_Config+0xd0>)
 8001daa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dae:	6413      	str	r3, [r2, #64]	; 0x40
 8001db0:	4b26      	ldr	r3, [pc, #152]	; (8001e4c <SystemClock_Config+0xd0>)
 8001db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db8:	60bb      	str	r3, [r7, #8]
 8001dba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	607b      	str	r3, [r7, #4]
 8001dc0:	4b23      	ldr	r3, [pc, #140]	; (8001e50 <SystemClock_Config+0xd4>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a22      	ldr	r2, [pc, #136]	; (8001e50 <SystemClock_Config+0xd4>)
 8001dc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dca:	6013      	str	r3, [r2, #0]
 8001dcc:	4b20      	ldr	r3, [pc, #128]	; (8001e50 <SystemClock_Config+0xd4>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dd4:	607b      	str	r3, [r7, #4]
 8001dd6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ddc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001de0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001de2:	2302      	movs	r3, #2
 8001de4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001de6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001dea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001dec:	2308      	movs	r3, #8
 8001dee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001df0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001df4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001df6:	2302      	movs	r3, #2
 8001df8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001dfa:	2304      	movs	r3, #4
 8001dfc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dfe:	f107 0320 	add.w	r3, r7, #32
 8001e02:	4618      	mov	r0, r3
 8001e04:	f006 fc4e 	bl	80086a4 <HAL_RCC_OscConfig>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001e0e:	f001 fb11 	bl	8003434 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e12:	230f      	movs	r3, #15
 8001e14:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e16:	2302      	movs	r3, #2
 8001e18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001e1e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001e22:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001e24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e28:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001e2a:	f107 030c 	add.w	r3, r7, #12
 8001e2e:	2105      	movs	r1, #5
 8001e30:	4618      	mov	r0, r3
 8001e32:	f006 fea5 	bl	8008b80 <HAL_RCC_ClockConfig>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001e3c:	f001 fafa 	bl	8003434 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8001e40:	f006 ff84 	bl	8008d4c <HAL_RCC_EnableCSS>
}
 8001e44:	bf00      	nop
 8001e46:	3750      	adds	r7, #80	; 0x50
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40023800 	.word	0x40023800
 8001e50:	40007000 	.word	0x40007000

08001e54 <TIMxInit>:
 * 						  BIOSTIMx_Init (&htim2, 1000, 84, 2, 0);  //1ms  interrupt
 * 						  BIOSTIMx_Init (&htim3, 20000, 84, 2, 1); //20ms interrupt
 */

void TIMxInit(TIM_HandleTypeDef* htimx, uint16_t period, uint16_t prescaler,uint16_t preemptionpriority,uint16_t subpriority)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b088      	sub	sp, #32
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	4608      	mov	r0, r1
 8001e5e:	4611      	mov	r1, r2
 8001e60:	461a      	mov	r2, r3
 8001e62:	4603      	mov	r3, r0
 8001e64:	817b      	strh	r3, [r7, #10]
 8001e66:	460b      	mov	r3, r1
 8001e68:	813b      	strh	r3, [r7, #8]
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	80fb      	strh	r3, [r7, #6]

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e6e:	f107 0314 	add.w	r3, r7, #20
 8001e72:	2200      	movs	r2, #0
 8001e74:	601a      	str	r2, [r3, #0]
 8001e76:	605a      	str	r2, [r3, #4]
  int nvic = 0;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	61fb      	str	r3, [r7, #28]

  if(htimx == &htim1){
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	4a62      	ldr	r2, [pc, #392]	; (8002008 <TIMxInit+0x1b4>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d105      	bne.n	8001e90 <TIMxInit+0x3c>
  		htimx->Instance = TIM1;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	4a61      	ldr	r2, [pc, #388]	; (800200c <TIMxInit+0x1b8>)
 8001e88:	601a      	str	r2, [r3, #0]
  		nvic = TIM1_UP_TIM10_IRQn;
 8001e8a:	2319      	movs	r3, #25
 8001e8c:	61fb      	str	r3, [r7, #28]
 8001e8e:	e081      	b.n	8001f94 <TIMxInit+0x140>
  	}
  	else if(htimx == &htim2)	{
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	4a5f      	ldr	r2, [pc, #380]	; (8002010 <TIMxInit+0x1bc>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d106      	bne.n	8001ea6 <TIMxInit+0x52>
  		htimx->Instance = TIM2;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e9e:	601a      	str	r2, [r3, #0]
  		nvic = TIM2_IRQn;
 8001ea0:	231c      	movs	r3, #28
 8001ea2:	61fb      	str	r3, [r7, #28]
 8001ea4:	e076      	b.n	8001f94 <TIMxInit+0x140>
  	}
  	else if(htimx == &htim3)	{
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	4a5a      	ldr	r2, [pc, #360]	; (8002014 <TIMxInit+0x1c0>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d105      	bne.n	8001eba <TIMxInit+0x66>
  		htimx->Instance = TIM3;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	4a59      	ldr	r2, [pc, #356]	; (8002018 <TIMxInit+0x1c4>)
 8001eb2:	601a      	str	r2, [r3, #0]
  		nvic = TIM3_IRQn;
 8001eb4:	231d      	movs	r3, #29
 8001eb6:	61fb      	str	r3, [r7, #28]
 8001eb8:	e06c      	b.n	8001f94 <TIMxInit+0x140>
  	}
  	else if(htimx == &htim4)	{
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	4a57      	ldr	r2, [pc, #348]	; (800201c <TIMxInit+0x1c8>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d105      	bne.n	8001ece <TIMxInit+0x7a>
  		htimx->Instance = TIM4;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	4a56      	ldr	r2, [pc, #344]	; (8002020 <TIMxInit+0x1cc>)
 8001ec6:	601a      	str	r2, [r3, #0]
  		nvic = TIM4_IRQn;
 8001ec8:	231e      	movs	r3, #30
 8001eca:	61fb      	str	r3, [r7, #28]
 8001ecc:	e062      	b.n	8001f94 <TIMxInit+0x140>
  	}
  	else if(htimx == &htim5)	{
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	4a54      	ldr	r2, [pc, #336]	; (8002024 <TIMxInit+0x1d0>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d105      	bne.n	8001ee2 <TIMxInit+0x8e>
  		htimx->Instance = TIM5;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	4a53      	ldr	r2, [pc, #332]	; (8002028 <TIMxInit+0x1d4>)
 8001eda:	601a      	str	r2, [r3, #0]
  		nvic = UART5_IRQn;
 8001edc:	2335      	movs	r3, #53	; 0x35
 8001ede:	61fb      	str	r3, [r7, #28]
 8001ee0:	e058      	b.n	8001f94 <TIMxInit+0x140>
  	}
  	else if(htimx == &htim6)	{
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	4a51      	ldr	r2, [pc, #324]	; (800202c <TIMxInit+0x1d8>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d105      	bne.n	8001ef6 <TIMxInit+0xa2>
  		htimx->Instance = TIM6;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	4a50      	ldr	r2, [pc, #320]	; (8002030 <TIMxInit+0x1dc>)
 8001eee:	601a      	str	r2, [r3, #0]
  		nvic = TIM6_DAC_IRQn;
 8001ef0:	2336      	movs	r3, #54	; 0x36
 8001ef2:	61fb      	str	r3, [r7, #28]
 8001ef4:	e04e      	b.n	8001f94 <TIMxInit+0x140>
  	}
  	else if(htimx == &htim7)	{
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	4a4e      	ldr	r2, [pc, #312]	; (8002034 <TIMxInit+0x1e0>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d105      	bne.n	8001f0a <TIMxInit+0xb6>
  		htimx->Instance = TIM7;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	4a4d      	ldr	r2, [pc, #308]	; (8002038 <TIMxInit+0x1e4>)
 8001f02:	601a      	str	r2, [r3, #0]
  		nvic = TIM7_IRQn;
 8001f04:	2337      	movs	r3, #55	; 0x37
 8001f06:	61fb      	str	r3, [r7, #28]
 8001f08:	e044      	b.n	8001f94 <TIMxInit+0x140>
  	}
  	else if(htimx == &htim8)	{
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	4a4b      	ldr	r2, [pc, #300]	; (800203c <TIMxInit+0x1e8>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d105      	bne.n	8001f1e <TIMxInit+0xca>
  		htimx->Instance = TIM8;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	4a4a      	ldr	r2, [pc, #296]	; (8002040 <TIMxInit+0x1ec>)
 8001f16:	601a      	str	r2, [r3, #0]
  		nvic = TIM8_CC_IRQn;
 8001f18:	232e      	movs	r3, #46	; 0x2e
 8001f1a:	61fb      	str	r3, [r7, #28]
 8001f1c:	e03a      	b.n	8001f94 <TIMxInit+0x140>
  	}
  	else if(htimx == &htim9)	{
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	4a48      	ldr	r2, [pc, #288]	; (8002044 <TIMxInit+0x1f0>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d105      	bne.n	8001f32 <TIMxInit+0xde>
  		htimx->Instance = TIM9;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	4a47      	ldr	r2, [pc, #284]	; (8002048 <TIMxInit+0x1f4>)
 8001f2a:	601a      	str	r2, [r3, #0]
  		nvic = TIM1_BRK_TIM9_IRQn;
 8001f2c:	2318      	movs	r3, #24
 8001f2e:	61fb      	str	r3, [r7, #28]
 8001f30:	e030      	b.n	8001f94 <TIMxInit+0x140>
  	}
  	else if(htimx == &htim10)	{
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	4a45      	ldr	r2, [pc, #276]	; (800204c <TIMxInit+0x1f8>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d105      	bne.n	8001f46 <TIMxInit+0xf2>
  		htimx->Instance = TIM10;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	4a44      	ldr	r2, [pc, #272]	; (8002050 <TIMxInit+0x1fc>)
 8001f3e:	601a      	str	r2, [r3, #0]
  		nvic = TIM1_UP_TIM10_IRQn;
 8001f40:	2319      	movs	r3, #25
 8001f42:	61fb      	str	r3, [r7, #28]
 8001f44:	e026      	b.n	8001f94 <TIMxInit+0x140>
  	}
  	else if(htimx == &htim11)	{
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	4a42      	ldr	r2, [pc, #264]	; (8002054 <TIMxInit+0x200>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d105      	bne.n	8001f5a <TIMxInit+0x106>
  		htimx->Instance = TIM11;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	4a41      	ldr	r2, [pc, #260]	; (8002058 <TIMxInit+0x204>)
 8001f52:	601a      	str	r2, [r3, #0]
  		nvic = TIM1_TRG_COM_TIM11_IRQn;
 8001f54:	231a      	movs	r3, #26
 8001f56:	61fb      	str	r3, [r7, #28]
 8001f58:	e01c      	b.n	8001f94 <TIMxInit+0x140>
  	}
  	else if(htimx == &htim12)	{
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	4a3f      	ldr	r2, [pc, #252]	; (800205c <TIMxInit+0x208>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d105      	bne.n	8001f6e <TIMxInit+0x11a>
  		htimx->Instance = TIM12;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	4a3e      	ldr	r2, [pc, #248]	; (8002060 <TIMxInit+0x20c>)
 8001f66:	601a      	str	r2, [r3, #0]
  		nvic = TIM8_BRK_TIM12_IRQn;
 8001f68:	232b      	movs	r3, #43	; 0x2b
 8001f6a:	61fb      	str	r3, [r7, #28]
 8001f6c:	e012      	b.n	8001f94 <TIMxInit+0x140>
  	}
  	else if(htimx == &htim13)	{
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	4a3c      	ldr	r2, [pc, #240]	; (8002064 <TIMxInit+0x210>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d105      	bne.n	8001f82 <TIMxInit+0x12e>
  		htimx->Instance = TIM13;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	4a3b      	ldr	r2, [pc, #236]	; (8002068 <TIMxInit+0x214>)
 8001f7a:	601a      	str	r2, [r3, #0]
  		nvic = TIM8_UP_TIM13_IRQn;
 8001f7c:	232c      	movs	r3, #44	; 0x2c
 8001f7e:	61fb      	str	r3, [r7, #28]
 8001f80:	e008      	b.n	8001f94 <TIMxInit+0x140>
  		}
  	else if(htimx == &htim14)	{
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	4a39      	ldr	r2, [pc, #228]	; (800206c <TIMxInit+0x218>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d104      	bne.n	8001f94 <TIMxInit+0x140>
  		htimx->Instance = TIM14;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	4a38      	ldr	r2, [pc, #224]	; (8002070 <TIMxInit+0x21c>)
 8001f8e:	601a      	str	r2, [r3, #0]
  		nvic = TIM8_TRG_COM_TIM14_IRQn;
 8001f90:	232d      	movs	r3, #45	; 0x2d
 8001f92:	61fb      	str	r3, [r7, #28]
  		}


  htimx->Init.Prescaler = prescaler;
 8001f94:	893a      	ldrh	r2, [r7, #8]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	605a      	str	r2, [r3, #4]
  htimx->Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	609a      	str	r2, [r3, #8]
  htimx->Init.Period = period;
 8001fa0:	897a      	ldrh	r2, [r7, #10]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	60da      	str	r2, [r3, #12]
  htimx->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(htimx) != HAL_OK)
 8001fac:	68f8      	ldr	r0, [r7, #12]
 8001fae:	f007 f931 	bl	8009214 <HAL_TIM_Base_Init>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d001      	beq.n	8001fbc <TIMxInit+0x168>
  {
    Error_Handler();
 8001fb8:	f001 fa3c 	bl	8003434 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(htimx, &sMasterConfig) != HAL_OK)
 8001fc4:	f107 0314 	add.w	r3, r7, #20
 8001fc8:	4619      	mov	r1, r3
 8001fca:	68f8      	ldr	r0, [r7, #12]
 8001fcc:	f007 ffd2 	bl	8009f74 <HAL_TIMEx_MasterConfigSynchronization>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <TIMxInit+0x186>
  {
    Error_Handler();
 8001fd6:	f001 fa2d 	bl	8003434 <Error_Handler>
  }


  HAL_NVIC_SetPriority(nvic, preemptionpriority, subpriority);
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	b25b      	sxtb	r3, r3
 8001fde:	88f9      	ldrh	r1, [r7, #6]
 8001fe0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f004 f90f 	bl	8006206 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(nvic);
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	b25b      	sxtb	r3, r3
 8001fec:	4618      	mov	r0, r3
 8001fee:	f004 f926 	bl	800623e <HAL_NVIC_EnableIRQ>

  HAL_TIM_Base_Start(htimx);
 8001ff2:	68f8      	ldr	r0, [r7, #12]
 8001ff4:	f007 f939 	bl	800926a <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(htimx);
 8001ff8:	68f8      	ldr	r0, [r7, #12]
 8001ffa:	f007 f95a 	bl	80092b2 <HAL_TIM_Base_Start_IT>

}
 8001ffe:	bf00      	nop
 8002000:	3720      	adds	r7, #32
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	2000134c 	.word	0x2000134c
 800200c:	40010000 	.word	0x40010000
 8002010:	200013cc 	.word	0x200013cc
 8002014:	2000124c 	.word	0x2000124c
 8002018:	40000400 	.word	0x40000400
 800201c:	2000118c 	.word	0x2000118c
 8002020:	40000800 	.word	0x40000800
 8002024:	2000120c 	.word	0x2000120c
 8002028:	40000c00 	.word	0x40000c00
 800202c:	2000130c 	.word	0x2000130c
 8002030:	40001000 	.word	0x40001000
 8002034:	2000148c 	.word	0x2000148c
 8002038:	40001400 	.word	0x40001400
 800203c:	2000114c 	.word	0x2000114c
 8002040:	40010400 	.word	0x40010400
 8002044:	2000138c 	.word	0x2000138c
 8002048:	40014000 	.word	0x40014000
 800204c:	200011cc 	.word	0x200011cc
 8002050:	40014400 	.word	0x40014400
 8002054:	200012cc 	.word	0x200012cc
 8002058:	40014800 	.word	0x40014800
 800205c:	2000144c 	.word	0x2000144c
 8002060:	40001800 	.word	0x40001800
 8002064:	2000128c 	.word	0x2000128c
 8002068:	40001c00 	.word	0x40001c00
 800206c:	2000140c 	.word	0x2000140c
 8002070:	40002000 	.word	0x40002000

08002074 <UARTInit>:
 * 						  						 subpriority, then the one comes first in the program will be executed first.
 * Function Return		: None
 * Function Example		: UARTxInit(&huart1, 115200, ENABLE, 0, 0);
 */
void UARTInit(UART_HandleTypeDef* huartx, uint32_t baudrate, FunctionalState rxstate, uint16_t preemptionpriority,uint16_t subpriority)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b086      	sub	sp, #24
 8002078:	af00      	add	r7, sp, #0
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	60b9      	str	r1, [r7, #8]
 800207e:	4611      	mov	r1, r2
 8002080:	461a      	mov	r2, r3
 8002082:	460b      	mov	r3, r1
 8002084:	71fb      	strb	r3, [r7, #7]
 8002086:	4613      	mov	r3, r2
 8002088:	80bb      	strh	r3, [r7, #4]
	IRQn_Type nvic;

	if (huartx == &huart1){
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	4a36      	ldr	r2, [pc, #216]	; (8002168 <UARTInit+0xf4>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d105      	bne.n	800209e <UARTInit+0x2a>
		huartx->Instance = USART1;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	4a35      	ldr	r2, [pc, #212]	; (800216c <UARTInit+0xf8>)
 8002096:	601a      	str	r2, [r3, #0]
		nvic = USART1_IRQn;
 8002098:	2325      	movs	r3, #37	; 0x25
 800209a:	75fb      	strb	r3, [r7, #23]
 800209c:	e02c      	b.n	80020f8 <UARTInit+0x84>
	}else if(huartx == &huart2){
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	4a33      	ldr	r2, [pc, #204]	; (8002170 <UARTInit+0xfc>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d105      	bne.n	80020b2 <UARTInit+0x3e>
		huartx->Instance = USART2;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	4a32      	ldr	r2, [pc, #200]	; (8002174 <UARTInit+0x100>)
 80020aa:	601a      	str	r2, [r3, #0]
		nvic = USART2_IRQn;
 80020ac:	2326      	movs	r3, #38	; 0x26
 80020ae:	75fb      	strb	r3, [r7, #23]
 80020b0:	e022      	b.n	80020f8 <UARTInit+0x84>
	}else if(huartx == &huart3){
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	4a30      	ldr	r2, [pc, #192]	; (8002178 <UARTInit+0x104>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d105      	bne.n	80020c6 <UARTInit+0x52>
		huartx->Instance = USART3;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	4a2f      	ldr	r2, [pc, #188]	; (800217c <UARTInit+0x108>)
 80020be:	601a      	str	r2, [r3, #0]
		nvic = USART3_IRQn;
 80020c0:	2327      	movs	r3, #39	; 0x27
 80020c2:	75fb      	strb	r3, [r7, #23]
 80020c4:	e018      	b.n	80020f8 <UARTInit+0x84>
	}else if(huartx == &huart4){
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	4a2d      	ldr	r2, [pc, #180]	; (8002180 <UARTInit+0x10c>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d105      	bne.n	80020da <UARTInit+0x66>
		huartx->Instance = UART4;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	4a2c      	ldr	r2, [pc, #176]	; (8002184 <UARTInit+0x110>)
 80020d2:	601a      	str	r2, [r3, #0]
		nvic = UART4_IRQn;
 80020d4:	2334      	movs	r3, #52	; 0x34
 80020d6:	75fb      	strb	r3, [r7, #23]
 80020d8:	e00e      	b.n	80020f8 <UARTInit+0x84>
	}else if(huartx == &huart5){
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	4a2a      	ldr	r2, [pc, #168]	; (8002188 <UARTInit+0x114>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d105      	bne.n	80020ee <UARTInit+0x7a>
		huartx->Instance = UART5;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	4a29      	ldr	r2, [pc, #164]	; (800218c <UARTInit+0x118>)
 80020e6:	601a      	str	r2, [r3, #0]
		nvic = UART5_IRQn;
 80020e8:	2335      	movs	r3, #53	; 0x35
 80020ea:	75fb      	strb	r3, [r7, #23]
 80020ec:	e004      	b.n	80020f8 <UARTInit+0x84>
	}else{
		huartx->Instance = USART6;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	4a27      	ldr	r2, [pc, #156]	; (8002190 <UARTInit+0x11c>)
 80020f2:	601a      	str	r2, [r3, #0]
		nvic = USART6_IRQn;
 80020f4:	2347      	movs	r3, #71	; 0x47
 80020f6:	75fb      	strb	r3, [r7, #23]
	}


	huartx->Init.BaudRate = baudrate;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	68ba      	ldr	r2, [r7, #8]
 80020fc:	605a      	str	r2, [r3, #4]
	huartx->Init.WordLength = UART_WORDLENGTH_8B;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2200      	movs	r2, #0
 8002102:	609a      	str	r2, [r3, #8]
	huartx->Init.StopBits = UART_STOPBITS_1;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2200      	movs	r2, #0
 8002108:	60da      	str	r2, [r3, #12]
	huartx->Init.Parity = UART_PARITY_NONE;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2200      	movs	r2, #0
 800210e:	611a      	str	r2, [r3, #16]
	huartx->Init.Mode = UART_MODE_TX_RX;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	220c      	movs	r2, #12
 8002114:	615a      	str	r2, [r3, #20]
	huartx->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2200      	movs	r2, #0
 800211a:	619a      	str	r2, [r3, #24]
	huartx->Init.OverSampling = UART_OVERSAMPLING_16;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2200      	movs	r2, #0
 8002120:	61da      	str	r2, [r3, #28]



	if (HAL_UART_Init(huartx) != HAL_OK)
 8002122:	68f8      	ldr	r0, [r7, #12]
 8002124:	f007 ffb6 	bl	800a094 <HAL_UART_Init>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <UARTInit+0xbe>
	{
		Error_Handler();
 800212e:	f001 f981 	bl	8003434 <Error_Handler>
	}

	if(rxstate == ENABLE){
 8002132:	79fb      	ldrb	r3, [r7, #7]
 8002134:	2b01      	cmp	r3, #1
 8002136:	d113      	bne.n	8002160 <UARTInit+0xec>
    HAL_NVIC_SetPriority(nvic, preemptionpriority, subpriority);
 8002138:	88b9      	ldrh	r1, [r7, #4]
 800213a:	8c3a      	ldrh	r2, [r7, #32]
 800213c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002140:	4618      	mov	r0, r3
 8002142:	f004 f860 	bl	8006206 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(nvic);
 8002146:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800214a:	4618      	mov	r0, r3
 800214c:	f004 f877 	bl	800623e <HAL_NVIC_EnableIRQ>
    __HAL_UART_ENABLE_IT(huartx, UART_IT_RXNE);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	68da      	ldr	r2, [r3, #12]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f042 0220 	orr.w	r2, r2, #32
 800215e:	60da      	str	r2, [r3, #12]
	}



}
 8002160:	bf00      	nop
 8002162:	3718      	adds	r7, #24
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	2000154c 	.word	0x2000154c
 800216c:	40011000 	.word	0x40011000
 8002170:	2000160c 	.word	0x2000160c
 8002174:	40004400 	.word	0x40004400
 8002178:	200014cc 	.word	0x200014cc
 800217c:	40004800 	.word	0x40004800
 8002180:	200015cc 	.word	0x200015cc
 8002184:	40004c00 	.word	0x40004c00
 8002188:	2000150c 	.word	0x2000150c
 800218c:	40005000 	.word	0x40005000
 8002190:	40011400 	.word	0x40011400

08002194 <I2C1_EV_IRQHandler>:
 * Function Remarks		: This interrupt handle slave receive mode, master receive mode and slave transmit mode.
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void I2C1_EV_IRQHandler(void){
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0

	HAL_I2C_EV_IRQHandler(&hi2c1);
 8002198:	4802      	ldr	r0, [pc, #8]	; (80021a4 <I2C1_EV_IRQHandler+0x10>)
 800219a:	f004 fdd8 	bl	8006d4e <HAL_I2C_EV_IRQHandler>

}
 800219e:	bf00      	nop
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	20001980 	.word	0x20001980

080021a8 <I2C1_ER_IRQHandler>:
 * Function Remarks		: This interrupt handle the error event of I2C1.
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void I2C1_ER_IRQHandler(void){
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0

	HAL_I2C_ER_IRQHandler(&hi2c1);
 80021ac:	4802      	ldr	r0, [pc, #8]	; (80021b8 <I2C1_ER_IRQHandler+0x10>)
 80021ae:	f004 ff3b 	bl	8007028 <HAL_I2C_ER_IRQHandler>

}
 80021b2:	bf00      	nop
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	20001980 	.word	0x20001980

080021bc <I2C2_EV_IRQHandler>:
 * Function Remarks		: This interrupt handle slave receive mode, master receive mode and slave transmit mode.
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void I2C2_EV_IRQHandler(void){
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0


	HAL_I2C_EV_IRQHandler(&hi2c2);
 80021c0:	4802      	ldr	r0, [pc, #8]	; (80021cc <I2C2_EV_IRQHandler+0x10>)
 80021c2:	f004 fdc4 	bl	8006d4e <HAL_I2C_EV_IRQHandler>


}
 80021c6:	bf00      	nop
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	200019d4 	.word	0x200019d4

080021d0 <I2C2_ER_IRQHandler>:
 * Function Remarks		: This interrupt handle the error event of I2C2.
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void I2C2_ER_IRQHandler(void){
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0

	HAL_I2C_ER_IRQHandler(&hi2c2);
 80021d4:	4802      	ldr	r0, [pc, #8]	; (80021e0 <I2C2_ER_IRQHandler+0x10>)
 80021d6:	f004 ff27 	bl	8007028 <HAL_I2C_ER_IRQHandler>


}
 80021da:	bf00      	nop
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	200019d4 	.word	0x200019d4

080021e4 <I2C3_EV_IRQHandler>:
 * Function Remarks		: This interrupt handle slave receive mode, master receive mode and slave transmit mode.
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void I2C3_EV_IRQHandler(void){
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0


	HAL_I2C_EV_IRQHandler(&hi2c3);
 80021e8:	4802      	ldr	r0, [pc, #8]	; (80021f4 <I2C3_EV_IRQHandler+0x10>)
 80021ea:	f004 fdb0 	bl	8006d4e <HAL_I2C_EV_IRQHandler>


}
 80021ee:	bf00      	nop
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	20001828 	.word	0x20001828

080021f8 <I2C3_ER_IRQHandler>:
 * Function Remarks		: This interrupt handle the error event of I2C3.
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void I2C3_ER_IRQHandler(void){
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0

	HAL_I2C_ER_IRQHandler(&hi2c1);
 80021fc:	4802      	ldr	r0, [pc, #8]	; (8002208 <I2C3_ER_IRQHandler+0x10>)
 80021fe:	f004 ff13 	bl	8007028 <HAL_I2C_ER_IRQHandler>

}
 8002202:	bf00      	nop
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	20001980 	.word	0x20001980

0800220c <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	4a04      	ldr	r2, [pc, #16]	; (8002228 <_ZN3ros3MsgC1Ev+0x1c>)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	601a      	str	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4618      	mov	r0, r3
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr
 8002228:	0800bc18 	.word	0x0800bc18

0800222c <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	4618      	mov	r0, r3
 8002238:	f7ff ffe8 	bl	800220c <_ZN3ros3MsgC1Ev>
 800223c:	4a06      	ldr	r2, [pc, #24]	; (8002258 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	601a      	str	r2, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	711a      	strb	r2, [r3, #4]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	4a04      	ldr	r2, [pc, #16]	; (800225c <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 800224c:	609a      	str	r2, [r3, #8]
    {
    }
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4618      	mov	r0, r3
 8002252:	3708      	adds	r7, #8
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	0800bc00 	.word	0x0800bc00
 800225c:	0800b970 	.word	0x0800b970

08002260 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800226a:	2300      	movs	r3, #0
 800226c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	683a      	ldr	r2, [r7, #0]
 8002272:	4413      	add	r3, r2
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	7912      	ldrb	r2, [r2, #4]
 8002278:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	3301      	adds	r3, #1
 800227e:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	4618      	mov	r0, r3
 8002286:	f7fd ffa3 	bl	80001d0 <strlen>
 800228a:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	683a      	ldr	r2, [r7, #0]
 8002290:	4413      	add	r3, r2
 8002292:	68b9      	ldr	r1, [r7, #8]
 8002294:	4618      	mov	r0, r3
 8002296:	f001 f8d4 	bl	8003442 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	3304      	adds	r3, #4
 800229e:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	683a      	ldr	r2, [r7, #0]
 80022a4:	18d0      	adds	r0, r2, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	68ba      	ldr	r2, [r7, #8]
 80022ac:	4619      	mov	r1, r3
 80022ae:	f008 fe93 	bl	800afd8 <memcpy>
      offset += length_msg;
 80022b2:	68fa      	ldr	r2, [r7, #12]
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	4413      	add	r3, r2
 80022b8:	60fb      	str	r3, [r7, #12]
      return offset;
 80022ba:	68fb      	ldr	r3, [r7, #12]
    }
 80022bc:	4618      	mov	r0, r3
 80022be:	3710      	adds	r7, #16
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b086      	sub	sp, #24
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80022ce:	2300      	movs	r3, #0
 80022d0:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	683a      	ldr	r2, [r7, #0]
 80022d6:	4413      	add	r3, r2
 80022d8:	781a      	ldrb	r2, [r3, #0]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	3301      	adds	r3, #1
 80022e2:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	683a      	ldr	r2, [r7, #0]
 80022e8:	441a      	add	r2, r3
 80022ea:	f107 030c 	add.w	r3, r7, #12
 80022ee:	4611      	mov	r1, r2
 80022f0:	4618      	mov	r0, r3
 80022f2:	f001 f8c4 	bl	800347e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	3304      	adds	r3, #4
 80022fa:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	617b      	str	r3, [r7, #20]
 8002300:	693a      	ldr	r2, [r7, #16]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	4413      	add	r3, r2
 8002306:	697a      	ldr	r2, [r7, #20]
 8002308:	429a      	cmp	r2, r3
 800230a:	d20c      	bcs.n	8002326 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 800230c:	683a      	ldr	r2, [r7, #0]
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	441a      	add	r2, r3
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	3b01      	subs	r3, #1
 8002316:	6839      	ldr	r1, [r7, #0]
 8002318:	440b      	add	r3, r1
 800231a:	7812      	ldrb	r2, [r2, #0]
 800231c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	3301      	adds	r3, #1
 8002322:	617b      	str	r3, [r7, #20]
 8002324:	e7ec      	b.n	8002300 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8002326:	693a      	ldr	r2, [r7, #16]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	4413      	add	r3, r2
 800232c:	3b01      	subs	r3, #1
 800232e:	683a      	ldr	r2, [r7, #0]
 8002330:	4413      	add	r3, r2
 8002332:	2200      	movs	r2, #0
 8002334:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	3b01      	subs	r3, #1
 800233a:	683a      	ldr	r2, [r7, #0]
 800233c:	441a      	add	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8002342:	693a      	ldr	r2, [r7, #16]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	4413      	add	r3, r2
 8002348:	613b      	str	r3, [r7, #16]
     return offset;
 800234a:	693b      	ldr	r3, [r7, #16]
    }
 800234c:	4618      	mov	r0, r3
 800234e:	3718      	adds	r7, #24
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}

08002354 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	4b03      	ldr	r3, [pc, #12]	; (800236c <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 800235e:	4618      	mov	r0, r3
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	0800b974 	.word	0x0800b974

08002370 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	4b03      	ldr	r3, [pc, #12]	; (8002388 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 800237a:	4618      	mov	r0, r3
 800237c:	370c      	adds	r7, #12
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	0800b988 	.word	0x0800b988

0800238c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	4618      	mov	r0, r3
 8002398:	f7ff ff38 	bl	800220c <_ZN3ros3MsgC1Ev>
 800239c:	4a0c      	ldr	r2, [pc, #48]	; (80023d0 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	601a      	str	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	605a      	str	r2, [r3, #4]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2200      	movs	r2, #0
 80023ac:	60da      	str	r2, [r3, #12]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	611a      	str	r2, [r3, #16]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	619a      	str	r2, [r3, #24]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	61da      	str	r2, [r3, #28]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2200      	movs	r2, #0
 80023c4:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4618      	mov	r0, r3
 80023ca:	3708      	adds	r7, #8
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	0800bbe8 	.word	0x0800bbe8

080023d4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b08a      	sub	sp, #40	; 0x28
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80023de:	2300      	movs	r3, #0
 80023e0:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6859      	ldr	r1, [r3, #4]
 80023e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e8:	683a      	ldr	r2, [r7, #0]
 80023ea:	4413      	add	r3, r2
 80023ec:	b2ca      	uxtb	r2, r1
 80023ee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	0a19      	lsrs	r1, r3, #8
 80023f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f8:	3301      	adds	r3, #1
 80023fa:	683a      	ldr	r2, [r7, #0]
 80023fc:	4413      	add	r3, r2
 80023fe:	b2ca      	uxtb	r2, r1
 8002400:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	0c19      	lsrs	r1, r3, #16
 8002408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240a:	3302      	adds	r3, #2
 800240c:	683a      	ldr	r2, [r7, #0]
 800240e:	4413      	add	r3, r2
 8002410:	b2ca      	uxtb	r2, r1
 8002412:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	0e19      	lsrs	r1, r3, #24
 800241a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241c:	3303      	adds	r3, #3
 800241e:	683a      	ldr	r2, [r7, #0]
 8002420:	4413      	add	r3, r2
 8002422:	b2ca      	uxtb	r2, r1
 8002424:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8002426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002428:	3304      	adds	r3, #4
 800242a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 800242c:	2300      	movs	r3, #0
 800242e:	623b      	str	r3, [r7, #32]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	6a3a      	ldr	r2, [r7, #32]
 8002436:	429a      	cmp	r2, r3
 8002438:	d22b      	bcs.n	8002492 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	68da      	ldr	r2, [r3, #12]
 800243e:	6a3b      	ldr	r3, [r7, #32]
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	4413      	add	r3, r2
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8002448:	6939      	ldr	r1, [r7, #16]
 800244a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244c:	683a      	ldr	r2, [r7, #0]
 800244e:	4413      	add	r3, r2
 8002450:	b2ca      	uxtb	r2, r1
 8002452:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	0a19      	lsrs	r1, r3, #8
 8002458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245a:	3301      	adds	r3, #1
 800245c:	683a      	ldr	r2, [r7, #0]
 800245e:	4413      	add	r3, r2
 8002460:	b2ca      	uxtb	r2, r1
 8002462:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	0c19      	lsrs	r1, r3, #16
 8002468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246a:	3302      	adds	r3, #2
 800246c:	683a      	ldr	r2, [r7, #0]
 800246e:	4413      	add	r3, r2
 8002470:	b2ca      	uxtb	r2, r1
 8002472:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	0e19      	lsrs	r1, r3, #24
 8002478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247a:	3303      	adds	r3, #3
 800247c:	683a      	ldr	r2, [r7, #0]
 800247e:	4413      	add	r3, r2
 8002480:	b2ca      	uxtb	r2, r1
 8002482:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8002484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002486:	3304      	adds	r3, #4
 8002488:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 800248a:	6a3b      	ldr	r3, [r7, #32]
 800248c:	3301      	adds	r3, #1
 800248e:	623b      	str	r3, [r7, #32]
 8002490:	e7ce      	b.n	8002430 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6919      	ldr	r1, [r3, #16]
 8002496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002498:	683a      	ldr	r2, [r7, #0]
 800249a:	4413      	add	r3, r2
 800249c:	b2ca      	uxtb	r2, r1
 800249e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	691b      	ldr	r3, [r3, #16]
 80024a4:	0a19      	lsrs	r1, r3, #8
 80024a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a8:	3301      	adds	r3, #1
 80024aa:	683a      	ldr	r2, [r7, #0]
 80024ac:	4413      	add	r3, r2
 80024ae:	b2ca      	uxtb	r2, r1
 80024b0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	0c19      	lsrs	r1, r3, #16
 80024b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ba:	3302      	adds	r3, #2
 80024bc:	683a      	ldr	r2, [r7, #0]
 80024be:	4413      	add	r3, r2
 80024c0:	b2ca      	uxtb	r2, r1
 80024c2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	691b      	ldr	r3, [r3, #16]
 80024c8:	0e19      	lsrs	r1, r3, #24
 80024ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024cc:	3303      	adds	r3, #3
 80024ce:	683a      	ldr	r2, [r7, #0]
 80024d0:	4413      	add	r3, r2
 80024d2:	b2ca      	uxtb	r2, r1
 80024d4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 80024d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d8:	3304      	adds	r3, #4
 80024da:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80024dc:	2300      	movs	r3, #0
 80024de:	61fb      	str	r3, [r7, #28]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	691b      	ldr	r3, [r3, #16]
 80024e4:	69fa      	ldr	r2, [r7, #28]
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d22b      	bcs.n	8002542 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	699a      	ldr	r2, [r3, #24]
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	4413      	add	r3, r2
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 80024f8:	68f9      	ldr	r1, [r7, #12]
 80024fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fc:	683a      	ldr	r2, [r7, #0]
 80024fe:	4413      	add	r3, r2
 8002500:	b2ca      	uxtb	r2, r1
 8002502:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	0a19      	lsrs	r1, r3, #8
 8002508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250a:	3301      	adds	r3, #1
 800250c:	683a      	ldr	r2, [r7, #0]
 800250e:	4413      	add	r3, r2
 8002510:	b2ca      	uxtb	r2, r1
 8002512:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	0c19      	lsrs	r1, r3, #16
 8002518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251a:	3302      	adds	r3, #2
 800251c:	683a      	ldr	r2, [r7, #0]
 800251e:	4413      	add	r3, r2
 8002520:	b2ca      	uxtb	r2, r1
 8002522:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	0e19      	lsrs	r1, r3, #24
 8002528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252a:	3303      	adds	r3, #3
 800252c:	683a      	ldr	r2, [r7, #0]
 800252e:	4413      	add	r3, r2
 8002530:	b2ca      	uxtb	r2, r1
 8002532:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8002534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002536:	3304      	adds	r3, #4
 8002538:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	3301      	adds	r3, #1
 800253e:	61fb      	str	r3, [r7, #28]
 8002540:	e7ce      	b.n	80024e0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	69d9      	ldr	r1, [r3, #28]
 8002546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002548:	683a      	ldr	r2, [r7, #0]
 800254a:	4413      	add	r3, r2
 800254c:	b2ca      	uxtb	r2, r1
 800254e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	69db      	ldr	r3, [r3, #28]
 8002554:	0a19      	lsrs	r1, r3, #8
 8002556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002558:	3301      	adds	r3, #1
 800255a:	683a      	ldr	r2, [r7, #0]
 800255c:	4413      	add	r3, r2
 800255e:	b2ca      	uxtb	r2, r1
 8002560:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	69db      	ldr	r3, [r3, #28]
 8002566:	0c19      	lsrs	r1, r3, #16
 8002568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256a:	3302      	adds	r3, #2
 800256c:	683a      	ldr	r2, [r7, #0]
 800256e:	4413      	add	r3, r2
 8002570:	b2ca      	uxtb	r2, r1
 8002572:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	69db      	ldr	r3, [r3, #28]
 8002578:	0e19      	lsrs	r1, r3, #24
 800257a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257c:	3303      	adds	r3, #3
 800257e:	683a      	ldr	r2, [r7, #0]
 8002580:	4413      	add	r3, r2
 8002582:	b2ca      	uxtb	r2, r1
 8002584:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8002586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002588:	3304      	adds	r3, #4
 800258a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 800258c:	2300      	movs	r3, #0
 800258e:	61bb      	str	r3, [r7, #24]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	69db      	ldr	r3, [r3, #28]
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	429a      	cmp	r2, r3
 8002598:	d228      	bcs.n	80025ec <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	4413      	add	r3, r2
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7fd fe12 	bl	80001d0 <strlen>
 80025ac:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 80025ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b0:	683a      	ldr	r2, [r7, #0]
 80025b2:	4413      	add	r3, r2
 80025b4:	6979      	ldr	r1, [r7, #20]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f000 ff43 	bl	8003442 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80025bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025be:	3304      	adds	r3, #4
 80025c0:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 80025c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c4:	683a      	ldr	r2, [r7, #0]
 80025c6:	18d0      	adds	r0, r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	4413      	add	r3, r2
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	697a      	ldr	r2, [r7, #20]
 80025d6:	4619      	mov	r1, r3
 80025d8:	f008 fcfe 	bl	800afd8 <memcpy>
      offset += length_stringsi;
 80025dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	4413      	add	r3, r2
 80025e2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	3301      	adds	r3, #1
 80025e8:	61bb      	str	r3, [r7, #24]
 80025ea:	e7d1      	b.n	8002590 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 80025ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80025ee:	4618      	mov	r0, r3
 80025f0:	3728      	adds	r7, #40	; 0x28
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}

080025f6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80025f6:	b580      	push	{r7, lr}
 80025f8:	b08e      	sub	sp, #56	; 0x38
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
 80025fe:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002600:	2300      	movs	r3, #0
 8002602:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002606:	683a      	ldr	r2, [r7, #0]
 8002608:	4413      	add	r3, r2
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800260e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002610:	3301      	adds	r3, #1
 8002612:	683a      	ldr	r2, [r7, #0]
 8002614:	4413      	add	r3, r2
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	021b      	lsls	r3, r3, #8
 800261a:	6a3a      	ldr	r2, [r7, #32]
 800261c:	4313      	orrs	r3, r2
 800261e:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002622:	3302      	adds	r3, #2
 8002624:	683a      	ldr	r2, [r7, #0]
 8002626:	4413      	add	r3, r2
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	041b      	lsls	r3, r3, #16
 800262c:	6a3a      	ldr	r2, [r7, #32]
 800262e:	4313      	orrs	r3, r2
 8002630:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002634:	3303      	adds	r3, #3
 8002636:	683a      	ldr	r2, [r7, #0]
 8002638:	4413      	add	r3, r2
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	061b      	lsls	r3, r3, #24
 800263e:	6a3a      	ldr	r2, [r7, #32]
 8002640:	4313      	orrs	r3, r2
 8002642:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8002644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002646:	3304      	adds	r3, #4
 8002648:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	6a3a      	ldr	r2, [r7, #32]
 8002650:	429a      	cmp	r2, r3
 8002652:	d90a      	bls.n	800266a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	68da      	ldr	r2, [r3, #12]
 8002658:	6a3b      	ldr	r3, [r7, #32]
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	4619      	mov	r1, r3
 800265e:	4610      	mov	r0, r2
 8002660:	f008 fcd0 	bl	800b004 <realloc>
 8002664:	4602      	mov	r2, r0
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a3a      	ldr	r2, [r7, #32]
 800266e:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8002670:	2300      	movs	r3, #0
 8002672:	633b      	str	r3, [r7, #48]	; 0x30
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800267a:	429a      	cmp	r2, r3
 800267c:	d236      	bcs.n	80026ec <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 800267e:	2300      	movs	r3, #0
 8002680:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002686:	6839      	ldr	r1, [r7, #0]
 8002688:	440a      	add	r2, r1
 800268a:	7812      	ldrb	r2, [r2, #0]
 800268c:	4313      	orrs	r3, r2
 800268e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002690:	697a      	ldr	r2, [r7, #20]
 8002692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002694:	3301      	adds	r3, #1
 8002696:	6839      	ldr	r1, [r7, #0]
 8002698:	440b      	add	r3, r1
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	021b      	lsls	r3, r3, #8
 800269e:	4313      	orrs	r3, r2
 80026a0:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80026a2:	697a      	ldr	r2, [r7, #20]
 80026a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026a6:	3302      	adds	r3, #2
 80026a8:	6839      	ldr	r1, [r7, #0]
 80026aa:	440b      	add	r3, r1
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	041b      	lsls	r3, r3, #16
 80026b0:	4313      	orrs	r3, r2
 80026b2:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80026b4:	697a      	ldr	r2, [r7, #20]
 80026b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026b8:	3303      	adds	r3, #3
 80026ba:	6839      	ldr	r1, [r7, #0]
 80026bc:	440b      	add	r3, r1
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	061b      	lsls	r3, r3, #24
 80026c2:	4313      	orrs	r3, r2
 80026c4:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 80026c6:	697a      	ldr	r2, [r7, #20]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 80026cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026ce:	3304      	adds	r3, #4
 80026d0:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	68da      	ldr	r2, [r3, #12]
 80026d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	4413      	add	r3, r2
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	3208      	adds	r2, #8
 80026e0:	6812      	ldr	r2, [r2, #0]
 80026e2:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 80026e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e6:	3301      	adds	r3, #1
 80026e8:	633b      	str	r3, [r7, #48]	; 0x30
 80026ea:	e7c3      	b.n	8002674 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80026ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026ee:	683a      	ldr	r2, [r7, #0]
 80026f0:	4413      	add	r3, r2
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80026f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026f8:	3301      	adds	r3, #1
 80026fa:	683a      	ldr	r2, [r7, #0]
 80026fc:	4413      	add	r3, r2
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	021b      	lsls	r3, r3, #8
 8002702:	69fa      	ldr	r2, [r7, #28]
 8002704:	4313      	orrs	r3, r2
 8002706:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800270a:	3302      	adds	r3, #2
 800270c:	683a      	ldr	r2, [r7, #0]
 800270e:	4413      	add	r3, r2
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	041b      	lsls	r3, r3, #16
 8002714:	69fa      	ldr	r2, [r7, #28]
 8002716:	4313      	orrs	r3, r2
 8002718:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800271a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800271c:	3303      	adds	r3, #3
 800271e:	683a      	ldr	r2, [r7, #0]
 8002720:	4413      	add	r3, r2
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	061b      	lsls	r3, r3, #24
 8002726:	69fa      	ldr	r2, [r7, #28]
 8002728:	4313      	orrs	r3, r2
 800272a:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 800272c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800272e:	3304      	adds	r3, #4
 8002730:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	69fa      	ldr	r2, [r7, #28]
 8002738:	429a      	cmp	r2, r3
 800273a:	d90a      	bls.n	8002752 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	699a      	ldr	r2, [r3, #24]
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	4619      	mov	r1, r3
 8002746:	4610      	mov	r0, r2
 8002748:	f008 fc5c 	bl	800b004 <realloc>
 800274c:	4602      	mov	r2, r0
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	69fa      	ldr	r2, [r7, #28]
 8002756:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8002758:	2300      	movs	r3, #0
 800275a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	691b      	ldr	r3, [r3, #16]
 8002760:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002762:	429a      	cmp	r2, r3
 8002764:	d236      	bcs.n	80027d4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8002766:	2300      	movs	r3, #0
 8002768:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800276e:	6839      	ldr	r1, [r7, #0]
 8002770:	440a      	add	r2, r1
 8002772:	7812      	ldrb	r2, [r2, #0]
 8002774:	4313      	orrs	r3, r2
 8002776:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002778:	693a      	ldr	r2, [r7, #16]
 800277a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800277c:	3301      	adds	r3, #1
 800277e:	6839      	ldr	r1, [r7, #0]
 8002780:	440b      	add	r3, r1
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	021b      	lsls	r3, r3, #8
 8002786:	4313      	orrs	r3, r2
 8002788:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800278a:	693a      	ldr	r2, [r7, #16]
 800278c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800278e:	3302      	adds	r3, #2
 8002790:	6839      	ldr	r1, [r7, #0]
 8002792:	440b      	add	r3, r1
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	041b      	lsls	r3, r3, #16
 8002798:	4313      	orrs	r3, r2
 800279a:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800279c:	693a      	ldr	r2, [r7, #16]
 800279e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027a0:	3303      	adds	r3, #3
 80027a2:	6839      	ldr	r1, [r7, #0]
 80027a4:	440b      	add	r3, r1
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	061b      	lsls	r3, r3, #24
 80027aa:	4313      	orrs	r3, r2
 80027ac:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 80027ae:	693a      	ldr	r2, [r7, #16]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 80027b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027b6:	3304      	adds	r3, #4
 80027b8:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	699a      	ldr	r2, [r3, #24]
 80027be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	4413      	add	r3, r2
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	3214      	adds	r2, #20
 80027c8:	6812      	ldr	r2, [r2, #0]
 80027ca:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 80027cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ce:	3301      	adds	r3, #1
 80027d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027d2:	e7c3      	b.n	800275c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80027d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027d6:	683a      	ldr	r2, [r7, #0]
 80027d8:	4413      	add	r3, r2
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80027de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027e0:	3301      	adds	r3, #1
 80027e2:	683a      	ldr	r2, [r7, #0]
 80027e4:	4413      	add	r3, r2
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	021b      	lsls	r3, r3, #8
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80027f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027f2:	3302      	adds	r3, #2
 80027f4:	683a      	ldr	r2, [r7, #0]
 80027f6:	4413      	add	r3, r2
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	041b      	lsls	r3, r3, #16
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	4313      	orrs	r3, r2
 8002800:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002804:	3303      	adds	r3, #3
 8002806:	683a      	ldr	r2, [r7, #0]
 8002808:	4413      	add	r3, r2
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	061b      	lsls	r3, r3, #24
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	4313      	orrs	r3, r2
 8002812:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8002814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002816:	3304      	adds	r3, #4
 8002818:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	69db      	ldr	r3, [r3, #28]
 800281e:	69ba      	ldr	r2, [r7, #24]
 8002820:	429a      	cmp	r2, r3
 8002822:	d90a      	bls.n	800283a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	4619      	mov	r1, r3
 800282e:	4610      	mov	r0, r2
 8002830:	f008 fbe8 	bl	800b004 <realloc>
 8002834:	4602      	mov	r2, r0
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8002840:	2300      	movs	r3, #0
 8002842:	62bb      	str	r3, [r7, #40]	; 0x28
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	69db      	ldr	r3, [r3, #28]
 8002848:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800284a:	429a      	cmp	r2, r3
 800284c:	d23f      	bcs.n	80028ce <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 800284e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002850:	683a      	ldr	r2, [r7, #0]
 8002852:	441a      	add	r2, r3
 8002854:	f107 030c 	add.w	r3, r7, #12
 8002858:	4611      	mov	r1, r2
 800285a:	4618      	mov	r0, r3
 800285c:	f000 fe0f 	bl	800347e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002862:	3304      	adds	r3, #4
 8002864:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002868:	627b      	str	r3, [r7, #36]	; 0x24
 800286a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	4413      	add	r3, r2
 8002870:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002872:	429a      	cmp	r2, r3
 8002874:	d20c      	bcs.n	8002890 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8002876:	683a      	ldr	r2, [r7, #0]
 8002878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287a:	441a      	add	r2, r3
 800287c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287e:	3b01      	subs	r3, #1
 8002880:	6839      	ldr	r1, [r7, #0]
 8002882:	440b      	add	r3, r1
 8002884:	7812      	ldrb	r2, [r2, #0]
 8002886:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288a:	3301      	adds	r3, #1
 800288c:	627b      	str	r3, [r7, #36]	; 0x24
 800288e:	e7ec      	b.n	800286a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8002890:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	4413      	add	r3, r2
 8002896:	3b01      	subs	r3, #1
 8002898:	683a      	ldr	r2, [r7, #0]
 800289a:	4413      	add	r3, r2
 800289c:	2200      	movs	r2, #0
 800289e:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 80028a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028a2:	3b01      	subs	r3, #1
 80028a4:	683a      	ldr	r2, [r7, #0]
 80028a6:	441a      	add	r2, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 80028ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	4413      	add	r3, r2
 80028b2:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	4413      	add	r3, r2
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	3220      	adds	r2, #32
 80028c2:	6812      	ldr	r2, [r2, #0]
 80028c4:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 80028c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028c8:	3301      	adds	r3, #1
 80028ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80028cc:	e7ba      	b.n	8002844 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 80028ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 80028d0:	4618      	mov	r0, r3
 80028d2:	3738      	adds	r7, #56	; 0x38
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	4b03      	ldr	r3, [pc, #12]	; (80028f0 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 80028e2:	4618      	mov	r0, r3
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	0800bb0c 	.word	0x0800bb0c

080028f4 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	4b03      	ldr	r3, [pc, #12]	; (800290c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 80028fe:	4618      	mov	r0, r3
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	0800b9ac 	.word	0x0800b9ac

08002910 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4618      	mov	r0, r3
 800291c:	f7ff fc76 	bl	800220c <_ZN3ros3MsgC1Ev>
 8002920:	4a0b      	ldr	r2, [pc, #44]	; (8002950 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	601a      	str	r2, [r3, #0]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	809a      	strh	r2, [r3, #4]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4a09      	ldr	r2, [pc, #36]	; (8002954 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8002930:	609a      	str	r2, [r3, #8]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a07      	ldr	r2, [pc, #28]	; (8002954 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8002936:	60da      	str	r2, [r3, #12]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	4a06      	ldr	r2, [pc, #24]	; (8002954 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800293c:	611a      	str	r2, [r3, #16]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	615a      	str	r2, [r3, #20]
    {
    }
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	4618      	mov	r0, r3
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	0800bbd0 	.word	0x0800bbd0
 8002954:	0800b970 	.word	0x0800b970

08002958 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002958:	b580      	push	{r7, lr}
 800295a:	b088      	sub	sp, #32
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002962:	2300      	movs	r3, #0
 8002964:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	8899      	ldrh	r1, [r3, #4]
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	683a      	ldr	r2, [r7, #0]
 800296e:	4413      	add	r3, r2
 8002970:	b2ca      	uxtb	r2, r1
 8002972:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	889b      	ldrh	r3, [r3, #4]
 8002978:	0a1b      	lsrs	r3, r3, #8
 800297a:	b299      	uxth	r1, r3
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	3301      	adds	r3, #1
 8002980:	683a      	ldr	r2, [r7, #0]
 8002982:	4413      	add	r3, r2
 8002984:	b2ca      	uxtb	r2, r1
 8002986:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	3302      	adds	r3, #2
 800298c:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	4618      	mov	r0, r3
 8002994:	f7fd fc1c 	bl	80001d0 <strlen>
 8002998:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	683a      	ldr	r2, [r7, #0]
 800299e:	4413      	add	r3, r2
 80029a0:	69b9      	ldr	r1, [r7, #24]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f000 fd4d 	bl	8003442 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	3304      	adds	r3, #4
 80029ac:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	683a      	ldr	r2, [r7, #0]
 80029b2:	18d0      	adds	r0, r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	69ba      	ldr	r2, [r7, #24]
 80029ba:	4619      	mov	r1, r3
 80029bc:	f008 fb0c 	bl	800afd8 <memcpy>
      offset += length_topic_name;
 80029c0:	69fa      	ldr	r2, [r7, #28]
 80029c2:	69bb      	ldr	r3, [r7, #24]
 80029c4:	4413      	add	r3, r2
 80029c6:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7fd fbff 	bl	80001d0 <strlen>
 80029d2:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	683a      	ldr	r2, [r7, #0]
 80029d8:	4413      	add	r3, r2
 80029da:	6979      	ldr	r1, [r7, #20]
 80029dc:	4618      	mov	r0, r3
 80029de:	f000 fd30 	bl	8003442 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	3304      	adds	r3, #4
 80029e6:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	683a      	ldr	r2, [r7, #0]
 80029ec:	18d0      	adds	r0, r2, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	697a      	ldr	r2, [r7, #20]
 80029f4:	4619      	mov	r1, r3
 80029f6:	f008 faef 	bl	800afd8 <memcpy>
      offset += length_message_type;
 80029fa:	69fa      	ldr	r2, [r7, #28]
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	4413      	add	r3, r2
 8002a00:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7fd fbe2 	bl	80001d0 <strlen>
 8002a0c:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	683a      	ldr	r2, [r7, #0]
 8002a12:	4413      	add	r3, r2
 8002a14:	6939      	ldr	r1, [r7, #16]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f000 fd13 	bl	8003442 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	3304      	adds	r3, #4
 8002a20:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	683a      	ldr	r2, [r7, #0]
 8002a26:	18d0      	adds	r0, r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	691b      	ldr	r3, [r3, #16]
 8002a2c:	693a      	ldr	r2, [r7, #16]
 8002a2e:	4619      	mov	r1, r3
 8002a30:	f008 fad2 	bl	800afd8 <memcpy>
      offset += length_md5sum;
 8002a34:	69fa      	ldr	r2, [r7, #28]
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	4413      	add	r3, r2
 8002a3a:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	695b      	ldr	r3, [r3, #20]
 8002a40:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8002a42:	68f9      	ldr	r1, [r7, #12]
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	683a      	ldr	r2, [r7, #0]
 8002a48:	4413      	add	r3, r2
 8002a4a:	b2ca      	uxtb	r2, r1
 8002a4c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	0a19      	lsrs	r1, r3, #8
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	3301      	adds	r3, #1
 8002a56:	683a      	ldr	r2, [r7, #0]
 8002a58:	4413      	add	r3, r2
 8002a5a:	b2ca      	uxtb	r2, r1
 8002a5c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	0c19      	lsrs	r1, r3, #16
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	3302      	adds	r3, #2
 8002a66:	683a      	ldr	r2, [r7, #0]
 8002a68:	4413      	add	r3, r2
 8002a6a:	b2ca      	uxtb	r2, r1
 8002a6c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	0e19      	lsrs	r1, r3, #24
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	3303      	adds	r3, #3
 8002a76:	683a      	ldr	r2, [r7, #0]
 8002a78:	4413      	add	r3, r2
 8002a7a:	b2ca      	uxtb	r2, r1
 8002a7c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	3304      	adds	r3, #4
 8002a82:	61fb      	str	r3, [r7, #28]
      return offset;
 8002a84:	69fb      	ldr	r3, [r7, #28]
    }
 8002a86:	4618      	mov	r0, r3
 8002a88:	3720      	adds	r7, #32
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}

08002a8e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002a8e:	b580      	push	{r7, lr}
 8002a90:	b08a      	sub	sp, #40	; 0x28
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
 8002a96:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	683a      	ldr	r2, [r7, #0]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	b29a      	uxth	r2, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	889b      	ldrh	r3, [r3, #4]
 8002aae:	b21a      	sxth	r2, r3
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	6839      	ldr	r1, [r7, #0]
 8002ab6:	440b      	add	r3, r1
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	021b      	lsls	r3, r3, #8
 8002abc:	b21b      	sxth	r3, r3
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	b21b      	sxth	r3, r3
 8002ac2:	b29a      	uxth	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	3302      	adds	r3, #2
 8002acc:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	683a      	ldr	r2, [r7, #0]
 8002ad2:	441a      	add	r2, r3
 8002ad4:	f107 0314 	add.w	r3, r7, #20
 8002ad8:	4611      	mov	r1, r2
 8002ada:	4618      	mov	r0, r3
 8002adc:	f000 fccf 	bl	800347e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	3304      	adds	r3, #4
 8002ae4:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	627b      	str	r3, [r7, #36]	; 0x24
 8002aea:	69ba      	ldr	r2, [r7, #24]
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	4413      	add	r3, r2
 8002af0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d20c      	bcs.n	8002b10 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8002af6:	683a      	ldr	r2, [r7, #0]
 8002af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afa:	441a      	add	r2, r3
 8002afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afe:	3b01      	subs	r3, #1
 8002b00:	6839      	ldr	r1, [r7, #0]
 8002b02:	440b      	add	r3, r1
 8002b04:	7812      	ldrb	r2, [r2, #0]
 8002b06:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8002b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b0e:	e7ec      	b.n	8002aea <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	4413      	add	r3, r2
 8002b16:	3b01      	subs	r3, #1
 8002b18:	683a      	ldr	r2, [r7, #0]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	3b01      	subs	r3, #1
 8002b24:	683a      	ldr	r2, [r7, #0]
 8002b26:	441a      	add	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	4413      	add	r3, r2
 8002b32:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	683a      	ldr	r2, [r7, #0]
 8002b38:	441a      	add	r2, r3
 8002b3a:	f107 0310 	add.w	r3, r7, #16
 8002b3e:	4611      	mov	r1, r2
 8002b40:	4618      	mov	r0, r3
 8002b42:	f000 fc9c 	bl	800347e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002b46:	69bb      	ldr	r3, [r7, #24]
 8002b48:	3304      	adds	r3, #4
 8002b4a:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	623b      	str	r3, [r7, #32]
 8002b50:	69ba      	ldr	r2, [r7, #24]
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	4413      	add	r3, r2
 8002b56:	6a3a      	ldr	r2, [r7, #32]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d20c      	bcs.n	8002b76 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8002b5c:	683a      	ldr	r2, [r7, #0]
 8002b5e:	6a3b      	ldr	r3, [r7, #32]
 8002b60:	441a      	add	r2, r3
 8002b62:	6a3b      	ldr	r3, [r7, #32]
 8002b64:	3b01      	subs	r3, #1
 8002b66:	6839      	ldr	r1, [r7, #0]
 8002b68:	440b      	add	r3, r1
 8002b6a:	7812      	ldrb	r2, [r2, #0]
 8002b6c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8002b6e:	6a3b      	ldr	r3, [r7, #32]
 8002b70:	3301      	adds	r3, #1
 8002b72:	623b      	str	r3, [r7, #32]
 8002b74:	e7ec      	b.n	8002b50 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8002b76:	69ba      	ldr	r2, [r7, #24]
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	683a      	ldr	r2, [r7, #0]
 8002b80:	4413      	add	r3, r2
 8002b82:	2200      	movs	r2, #0
 8002b84:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	683a      	ldr	r2, [r7, #0]
 8002b8c:	441a      	add	r2, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8002b92:	69ba      	ldr	r2, [r7, #24]
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	4413      	add	r3, r2
 8002b98:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	683a      	ldr	r2, [r7, #0]
 8002b9e:	441a      	add	r2, r3
 8002ba0:	f107 030c 	add.w	r3, r7, #12
 8002ba4:	4611      	mov	r1, r2
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f000 fc69 	bl	800347e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	3304      	adds	r3, #4
 8002bb0:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	61fb      	str	r3, [r7, #28]
 8002bb6:	69ba      	ldr	r2, [r7, #24]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	4413      	add	r3, r2
 8002bbc:	69fa      	ldr	r2, [r7, #28]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d20c      	bcs.n	8002bdc <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8002bc2:	683a      	ldr	r2, [r7, #0]
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	441a      	add	r2, r3
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	6839      	ldr	r1, [r7, #0]
 8002bce:	440b      	add	r3, r1
 8002bd0:	7812      	ldrb	r2, [r2, #0]
 8002bd2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	61fb      	str	r3, [r7, #28]
 8002bda:	e7ec      	b.n	8002bb6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	4413      	add	r3, r2
 8002be2:	3b01      	subs	r3, #1
 8002be4:	683a      	ldr	r2, [r7, #0]
 8002be6:	4413      	add	r3, r2
 8002be8:	2200      	movs	r2, #0
 8002bea:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	683a      	ldr	r2, [r7, #0]
 8002bf2:	441a      	add	r2, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	4413      	add	r3, r2
 8002bfe:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8002c00:	2300      	movs	r3, #0
 8002c02:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	69ba      	ldr	r2, [r7, #24]
 8002c08:	6839      	ldr	r1, [r7, #0]
 8002c0a:	440a      	add	r2, r1
 8002c0c:	7812      	ldrb	r2, [r2, #0]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002c12:	68ba      	ldr	r2, [r7, #8]
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	3301      	adds	r3, #1
 8002c18:	6839      	ldr	r1, [r7, #0]
 8002c1a:	440b      	add	r3, r1
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	021b      	lsls	r3, r3, #8
 8002c20:	4313      	orrs	r3, r2
 8002c22:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002c24:	68ba      	ldr	r2, [r7, #8]
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	3302      	adds	r3, #2
 8002c2a:	6839      	ldr	r1, [r7, #0]
 8002c2c:	440b      	add	r3, r1
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	041b      	lsls	r3, r3, #16
 8002c32:	4313      	orrs	r3, r2
 8002c34:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002c36:	68ba      	ldr	r2, [r7, #8]
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	3303      	adds	r3, #3
 8002c3c:	6839      	ldr	r1, [r7, #0]
 8002c3e:	440b      	add	r3, r1
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	061b      	lsls	r3, r3, #24
 8002c44:	4313      	orrs	r3, r2
 8002c46:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8002c48:	68ba      	ldr	r2, [r7, #8]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	3304      	adds	r3, #4
 8002c52:	61bb      	str	r3, [r7, #24]
     return offset;
 8002c54:	69bb      	ldr	r3, [r7, #24]
    }
 8002c56:	4618      	mov	r0, r3
 8002c58:	3728      	adds	r7, #40	; 0x28
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
	...

08002c60 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	4b03      	ldr	r3, [pc, #12]	; (8002c78 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	370c      	adds	r7, #12
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	0800b9d0 	.word	0x0800b9d0

08002c7c <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	4b03      	ldr	r3, [pc, #12]	; (8002c94 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8002c86:	4618      	mov	r0, r3
 8002c88:	370c      	adds	r7, #12
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	0800b9ec 	.word	0x0800b9ec

08002c98 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	601a      	str	r2, [r3, #0]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	605a      	str	r2, [r3, #4]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
	...

08002cbc <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
      data()
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7ff faa0 	bl	800220c <_ZN3ros3MsgC1Ev>
 8002ccc:	4a06      	ldr	r2, [pc, #24]	; (8002ce8 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	601a      	str	r2, [r3, #0]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	3304      	adds	r3, #4
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7ff ffde 	bl	8002c98 <_ZN3ros4TimeC1Ev>
    {
    }
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3708      	adds	r7, #8
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	0800bbb8 	.word	0x0800bbb8

08002cec <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002cec:	b480      	push	{r7}
 8002cee:	b085      	sub	sp, #20
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6859      	ldr	r1, [r3, #4]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	683a      	ldr	r2, [r7, #0]
 8002d02:	4413      	add	r3, r2
 8002d04:	b2ca      	uxtb	r2, r1
 8002d06:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	0a19      	lsrs	r1, r3, #8
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	3301      	adds	r3, #1
 8002d12:	683a      	ldr	r2, [r7, #0]
 8002d14:	4413      	add	r3, r2
 8002d16:	b2ca      	uxtb	r2, r1
 8002d18:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	0c19      	lsrs	r1, r3, #16
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	3302      	adds	r3, #2
 8002d24:	683a      	ldr	r2, [r7, #0]
 8002d26:	4413      	add	r3, r2
 8002d28:	b2ca      	uxtb	r2, r1
 8002d2a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	0e19      	lsrs	r1, r3, #24
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	3303      	adds	r3, #3
 8002d36:	683a      	ldr	r2, [r7, #0]
 8002d38:	4413      	add	r3, r2
 8002d3a:	b2ca      	uxtb	r2, r1
 8002d3c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	3304      	adds	r3, #4
 8002d42:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6899      	ldr	r1, [r3, #8]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	683a      	ldr	r2, [r7, #0]
 8002d4c:	4413      	add	r3, r2
 8002d4e:	b2ca      	uxtb	r2, r1
 8002d50:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	0a19      	lsrs	r1, r3, #8
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	683a      	ldr	r2, [r7, #0]
 8002d5e:	4413      	add	r3, r2
 8002d60:	b2ca      	uxtb	r2, r1
 8002d62:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	0c19      	lsrs	r1, r3, #16
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	3302      	adds	r3, #2
 8002d6e:	683a      	ldr	r2, [r7, #0]
 8002d70:	4413      	add	r3, r2
 8002d72:	b2ca      	uxtb	r2, r1
 8002d74:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	0e19      	lsrs	r1, r3, #24
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	3303      	adds	r3, #3
 8002d80:	683a      	ldr	r2, [r7, #0]
 8002d82:	4413      	add	r3, r2
 8002d84:	b2ca      	uxtb	r2, r1
 8002d86:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	3304      	adds	r3, #4
 8002d8c:	60fb      	str	r3, [r7, #12]
      return offset;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
    }
 8002d90:	4618      	mov	r0, r3
 8002d92:	3714      	adds	r7, #20
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr

08002d9c <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002d9c:	b480      	push	{r7}
 8002d9e:	b085      	sub	sp, #20
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002da6:	2300      	movs	r3, #0
 8002da8:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	683a      	ldr	r2, [r7, #0]
 8002dae:	4413      	add	r3, r2
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	461a      	mov	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685a      	ldr	r2, [r3, #4]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	6839      	ldr	r1, [r7, #0]
 8002dc2:	440b      	add	r3, r1
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	021b      	lsls	r3, r3, #8
 8002dc8:	431a      	orrs	r2, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685a      	ldr	r2, [r3, #4]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	3302      	adds	r3, #2
 8002dd6:	6839      	ldr	r1, [r7, #0]
 8002dd8:	440b      	add	r3, r1
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	041b      	lsls	r3, r3, #16
 8002dde:	431a      	orrs	r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685a      	ldr	r2, [r3, #4]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	3303      	adds	r3, #3
 8002dec:	6839      	ldr	r1, [r7, #0]
 8002dee:	440b      	add	r3, r1
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	061b      	lsls	r3, r3, #24
 8002df4:	431a      	orrs	r2, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	3304      	adds	r3, #4
 8002dfe:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	683a      	ldr	r2, [r7, #0]
 8002e04:	4413      	add	r3, r2
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	461a      	mov	r2, r3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	689a      	ldr	r2, [r3, #8]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	3301      	adds	r3, #1
 8002e16:	6839      	ldr	r1, [r7, #0]
 8002e18:	440b      	add	r3, r1
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	021b      	lsls	r3, r3, #8
 8002e1e:	431a      	orrs	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	689a      	ldr	r2, [r3, #8]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	3302      	adds	r3, #2
 8002e2c:	6839      	ldr	r1, [r7, #0]
 8002e2e:	440b      	add	r3, r1
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	041b      	lsls	r3, r3, #16
 8002e34:	431a      	orrs	r2, r3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	689a      	ldr	r2, [r3, #8]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	3303      	adds	r3, #3
 8002e42:	6839      	ldr	r1, [r7, #0]
 8002e44:	440b      	add	r3, r1
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	061b      	lsls	r3, r3, #24
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	3304      	adds	r3, #4
 8002e54:	60fb      	str	r3, [r7, #12]
     return offset;
 8002e56:	68fb      	ldr	r3, [r7, #12]
    }
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3714      	adds	r7, #20
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	4b03      	ldr	r3, [pc, #12]	; (8002e7c <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8002e6e:	4618      	mov	r0, r3
 8002e70:	370c      	adds	r7, #12
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr
 8002e7a:	bf00      	nop
 8002e7c:	0800ba10 	.word	0x0800ba10

08002e80 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	4b03      	ldr	r3, [pc, #12]	; (8002e98 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	370c      	adds	r7, #12
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	0800ba20 	.word	0x0800ba20

08002e9c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8002e9c:	b480      	push	{r7}
 8002e9e:	b085      	sub	sp, #20
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	60b9      	str	r1, [r7, #8]
 8002ea6:	607a      	str	r2, [r7, #4]
 8002ea8:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	68ba      	ldr	r2, [r7, #8]
 8002eae:	601a      	str	r2, [r3, #0]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	605a      	str	r2, [r3, #4]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	683a      	ldr	r2, [r7, #0]
 8002eba:	611a      	str	r2, [r3, #16]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3714      	adds	r7, #20
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr

08002eca <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b082      	sub	sp, #8
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
 8002ed2:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	68d8      	ldr	r0, [r3, #12]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	6891      	ldr	r1, [r2, #8]
 8002ee4:	683a      	ldr	r2, [r7, #0]
 8002ee6:	4798      	blx	r3
 8002ee8:	4603      	mov	r3, r0
  };
 8002eea:	4618      	mov	r0, r3
 8002eec:	3708      	adds	r7, #8
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}

08002ef2 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8002ef2:	b480      	push	{r7}
 8002ef4:	b083      	sub	sp, #12
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	691b      	ldr	r3, [r3, #16]
  }
 8002efe:	4618      	mov	r0, r3
 8002f00:	370c      	adds	r7, #12
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr

08002f0a <_ZN14HardwareSerialC1E14Serial_TypeDef>:
class HardwareSerial {
private:
Serial_TypeDef Serial;

public:
	HardwareSerial(Serial_TypeDef _Serial=SERIAL2){
 8002f0a:	b480      	push	{r7}
 8002f0c:	b083      	sub	sp, #12
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	6078      	str	r0, [r7, #4]
 8002f12:	460b      	mov	r3, r1
 8002f14:	70fb      	strb	r3, [r7, #3]
		Serial = _Serial;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	78fa      	ldrb	r2, [r7, #3]
 8002f1a:	701a      	strb	r2, [r3, #0]
	}
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	370c      	adds	r7, #12
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
	...

08002f2c <_ZN13STM32HardwareC1Ev>:
  public:
  	STM32Hardware(SERIAL_CLASS* io , long baud= 115200){
      iostream = io;
      baud_ = baud;
    }
    STM32Hardware()
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
    {
      iostream = &Serial;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	4a06      	ldr	r2, [pc, #24]	; (8002f50 <_ZN13STM32HardwareC1Ev+0x24>)
 8002f38:	601a      	str	r2, [r3, #0]
      baud_ = 115200;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f40:	605a      	str	r2, [r3, #4]
    }
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4618      	mov	r0, r3
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr
 8002f50:	2000009c 	.word	0x2000009c

08002f54 <_ZN13STM32Hardware7setBaudEl>:
    STM32Hardware(STM32Hardware& h){
	  this->iostream = iostream;
      this->baud_ = h.baud_;
    }

    void setBaud(long baud){
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	6039      	str	r1, [r7, #0]
      this->baud_= baud;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	683a      	ldr	r2, [r7, #0]
 8002f62:	605a      	str	r2, [r3, #4]
    }
 8002f64:	bf00      	nop
 8002f66:	370c      	adds	r7, #12
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr

08002f70 <_ZN13STM32Hardware4initEv>:

    int getBaud(){return baud_;}

    void init(){
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
      iostream->begin(baud_);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	4619      	mov	r1, r3
 8002f82:	4610      	mov	r0, r2
 8002f84:	f001 f982 	bl	800428c <_ZN14HardwareSerial5beginEm>
    }
 8002f88:	bf00      	nop
 8002f8a:	3708      	adds	r7, #8
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <_ZN13STM32Hardware4readEv>:

    int read(){
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
      if(iostream->available()){
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f001 f9a5 	bl	80042ec <_ZN14HardwareSerial9availableEv>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	bf14      	ite	ne
 8002fa8:	2301      	movne	r3, #1
 8002faa:	2300      	moveq	r3, #0
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d006      	beq.n	8002fc0 <_ZN13STM32Hardware4readEv+0x30>
	  	return iostream->read();
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f001 f9c2 	bl	8004340 <_ZN14HardwareSerial4readEv>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	e001      	b.n	8002fc4 <_ZN13STM32Hardware4readEv+0x34>
      }else{
	    return -1;
 8002fc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
      }
    };
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3708      	adds	r7, #8
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b086      	sub	sp, #24
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	607a      	str	r2, [r7, #4]
      for(int i=0; i<length; i++){
 8002fd8:	2300      	movs	r3, #0
 8002fda:	617b      	str	r3, [r7, #20]
 8002fdc:	697a      	ldr	r2, [r7, #20]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	da0c      	bge.n	8002ffe <_ZN13STM32Hardware5writeEPhi+0x32>
		  iostream->write(data[i]);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6818      	ldr	r0, [r3, #0]
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	68ba      	ldr	r2, [r7, #8]
 8002fec:	4413      	add	r3, r2
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	f001 fa09 	bl	8004408 <_ZN14HardwareSerial5writeEh>
      for(int i=0; i<length; i++){
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	617b      	str	r3, [r7, #20]
 8002ffc:	e7ee      	b.n	8002fdc <_ZN13STM32Hardware5writeEPhi+0x10>
      }
    }
 8002ffe:	bf00      	nop
 8003000:	3718      	adds	r7, #24
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}

08003006 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){return millis();}
 8003006:	b580      	push	{r7, lr}
 8003008:	b082      	sub	sp, #8
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
 800300e:	f001 fa5b 	bl	80044c8 <millis>
 8003012:	4603      	mov	r3, r0
 8003014:	4618      	mov	r0, r3
 8003016:	3708      	adds	r7, #8
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <_ZN8std_msgs6StringC1Ev>:
  {
    public:
      typedef const char* _data_type;
      _data_type data;

    String():
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
      data("")
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4618      	mov	r0, r3
 8003028:	f7ff f8f0 	bl	800220c <_ZN3ros3MsgC1Ev>
 800302c:	4a05      	ldr	r2, [pc, #20]	; (8003044 <_ZN8std_msgs6StringC1Ev+0x28>)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	601a      	str	r2, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a04      	ldr	r2, [pc, #16]	; (8003048 <_ZN8std_msgs6StringC1Ev+0x2c>)
 8003036:	605a      	str	r2, [r3, #4]
    {
    }
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4618      	mov	r0, r3
 800303c:	3708      	adds	r7, #8
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	0800bb74 	.word	0x0800bb74
 8003048:	0800b970 	.word	0x0800b970

0800304c <_ZNK8std_msgs6String9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003056:	2300      	movs	r3, #0
 8003058:	60fb      	str	r3, [r7, #12]
      uint32_t length_data = strlen(this->data);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	4618      	mov	r0, r3
 8003060:	f7fd f8b6 	bl	80001d0 <strlen>
 8003064:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_data);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	683a      	ldr	r2, [r7, #0]
 800306a:	4413      	add	r3, r2
 800306c:	68b9      	ldr	r1, [r7, #8]
 800306e:	4618      	mov	r0, r3
 8003070:	f000 f9e7 	bl	8003442 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	3304      	adds	r3, #4
 8003078:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->data, length_data);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	683a      	ldr	r2, [r7, #0]
 800307e:	18d0      	adds	r0, r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	68ba      	ldr	r2, [r7, #8]
 8003086:	4619      	mov	r1, r3
 8003088:	f007 ffa6 	bl	800afd8 <memcpy>
      offset += length_data;
 800308c:	68fa      	ldr	r2, [r7, #12]
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	4413      	add	r3, r2
 8003092:	60fb      	str	r3, [r7, #12]
      return offset;
 8003094:	68fb      	ldr	r3, [r7, #12]
    }
 8003096:	4618      	mov	r0, r3
 8003098:	3710      	adds	r7, #16
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}

0800309e <_ZN8std_msgs6String11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800309e:	b580      	push	{r7, lr}
 80030a0:	b086      	sub	sp, #24
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
 80030a6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80030a8:	2300      	movs	r3, #0
 80030aa:	613b      	str	r3, [r7, #16]
      uint32_t length_data;
      arrToVar(length_data, (inbuffer + offset));
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	683a      	ldr	r2, [r7, #0]
 80030b0:	441a      	add	r2, r3
 80030b2:	f107 030c 	add.w	r3, r7, #12
 80030b6:	4611      	mov	r1, r2
 80030b8:	4618      	mov	r0, r3
 80030ba:	f000 f9e0 	bl	800347e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	3304      	adds	r3, #4
 80030c2:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	617b      	str	r3, [r7, #20]
 80030c8:	693a      	ldr	r2, [r7, #16]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	4413      	add	r3, r2
 80030ce:	697a      	ldr	r2, [r7, #20]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d20c      	bcs.n	80030ee <_ZN8std_msgs6String11deserializeEPh+0x50>
          inbuffer[k-1]=inbuffer[k];
 80030d4:	683a      	ldr	r2, [r7, #0]
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	441a      	add	r2, r3
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	3b01      	subs	r3, #1
 80030de:	6839      	ldr	r1, [r7, #0]
 80030e0:	440b      	add	r3, r1
 80030e2:	7812      	ldrb	r2, [r2, #0]
 80030e4:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	3301      	adds	r3, #1
 80030ea:	617b      	str	r3, [r7, #20]
 80030ec:	e7ec      	b.n	80030c8 <_ZN8std_msgs6String11deserializeEPh+0x2a>
      }
      inbuffer[offset+length_data-1]=0;
 80030ee:	693a      	ldr	r2, [r7, #16]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	4413      	add	r3, r2
 80030f4:	3b01      	subs	r3, #1
 80030f6:	683a      	ldr	r2, [r7, #0]
 80030f8:	4413      	add	r3, r2
 80030fa:	2200      	movs	r2, #0
 80030fc:	701a      	strb	r2, [r3, #0]
      this->data = (char *)(inbuffer + offset-1);
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	3b01      	subs	r3, #1
 8003102:	683a      	ldr	r2, [r7, #0]
 8003104:	441a      	add	r2, r3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	605a      	str	r2, [r3, #4]
      offset += length_data;
 800310a:	693a      	ldr	r2, [r7, #16]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	4413      	add	r3, r2
 8003110:	613b      	str	r3, [r7, #16]
     return offset;
 8003112:	693b      	ldr	r3, [r7, #16]
    }
 8003114:	4618      	mov	r0, r3
 8003116:	3718      	adds	r7, #24
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <_ZN8std_msgs6String7getTypeEv>:

    const char * getType(){ return "std_msgs/String"; };
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	4b03      	ldr	r3, [pc, #12]	; (8003134 <_ZN8std_msgs6String7getTypeEv+0x18>)
 8003126:	4618      	mov	r0, r3
 8003128:	370c      	adds	r7, #12
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop
 8003134:	0800ba44 	.word	0x0800ba44

08003138 <_ZN8std_msgs6String6getMD5Ev>:
    const char * getMD5(){ return "992ce8a1687cec8c8bd883ec73ca41d1"; };
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	4b03      	ldr	r3, [pc, #12]	; (8003150 <_ZN8std_msgs6String6getMD5Ev+0x18>)
 8003142:	4618      	mov	r0, r3
 8003144:	370c      	adds	r7, #12
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	0800ba54 	.word	0x0800ba54

08003154 <_ZN8adam_msg3LEdC1Ev>:
      typedef int8_t _led_type;
      _led_type led;
      typedef int8_t _status_type;
      _status_type status;

    LEd():
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
      led(0),
      status(0)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4618      	mov	r0, r3
 8003160:	f7ff f854 	bl	800220c <_ZN3ros3MsgC1Ev>
 8003164:	4a06      	ldr	r2, [pc, #24]	; (8003180 <_ZN8adam_msg3LEdC1Ev+0x2c>)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	601a      	str	r2, [r3, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	711a      	strb	r2, [r3, #4]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	715a      	strb	r2, [r3, #5]
    {
    }
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4618      	mov	r0, r3
 800317a:	3708      	adds	r7, #8
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}
 8003180:	0800bb5c 	.word	0x0800bb5c

08003184 <_ZNK8adam_msg3LEd9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8003184:	b480      	push	{r7}
 8003186:	b087      	sub	sp, #28
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800318e:	2300      	movs	r3, #0
 8003190:	617b      	str	r3, [r7, #20]
      union {
        int8_t real;
        uint8_t base;
      } u_led;
      u_led.real = this->led;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003198:	743b      	strb	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_led.base >> (8 * 0)) & 0xFF;
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	683a      	ldr	r2, [r7, #0]
 800319e:	4413      	add	r3, r2
 80031a0:	7c3a      	ldrb	r2, [r7, #16]
 80031a2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->led);
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	3301      	adds	r3, #1
 80031a8:	617b      	str	r3, [r7, #20]
      union {
        int8_t real;
        uint8_t base;
      } u_status;
      u_status.real = this->status;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80031b0:	733b      	strb	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_status.base >> (8 * 0)) & 0xFF;
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	683a      	ldr	r2, [r7, #0]
 80031b6:	4413      	add	r3, r2
 80031b8:	7b3a      	ldrb	r2, [r7, #12]
 80031ba:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->status);
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	3301      	adds	r3, #1
 80031c0:	617b      	str	r3, [r7, #20]
      return offset;
 80031c2:	697b      	ldr	r3, [r7, #20]
    }
 80031c4:	4618      	mov	r0, r3
 80031c6:	371c      	adds	r7, #28
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <_ZN8adam_msg3LEd11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80031d0:	b480      	push	{r7}
 80031d2:	b087      	sub	sp, #28
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80031da:	2300      	movs	r3, #0
 80031dc:	617b      	str	r3, [r7, #20]
      union {
        int8_t real;
        uint8_t base;
      } u_led;
      u_led.base = 0;
 80031de:	2300      	movs	r3, #0
 80031e0:	743b      	strb	r3, [r7, #16]
      u_led.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80031e2:	7c3a      	ldrb	r2, [r7, #16]
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	6839      	ldr	r1, [r7, #0]
 80031e8:	440b      	add	r3, r1
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	743b      	strb	r3, [r7, #16]
      this->led = u_led.real;
 80031f2:	f997 2010 	ldrsb.w	r2, [r7, #16]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->led);
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	3301      	adds	r3, #1
 80031fe:	617b      	str	r3, [r7, #20]
      union {
        int8_t real;
        uint8_t base;
      } u_status;
      u_status.base = 0;
 8003200:	2300      	movs	r3, #0
 8003202:	733b      	strb	r3, [r7, #12]
      u_status.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003204:	7b3a      	ldrb	r2, [r7, #12]
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	6839      	ldr	r1, [r7, #0]
 800320a:	440b      	add	r3, r1
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	4313      	orrs	r3, r2
 8003210:	b2db      	uxtb	r3, r3
 8003212:	733b      	strb	r3, [r7, #12]
      this->status = u_status.real;
 8003214:	f997 200c 	ldrsb.w	r2, [r7, #12]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	715a      	strb	r2, [r3, #5]
      offset += sizeof(this->status);
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	3301      	adds	r3, #1
 8003220:	617b      	str	r3, [r7, #20]
     return offset;
 8003222:	697b      	ldr	r3, [r7, #20]
    }
 8003224:	4618      	mov	r0, r3
 8003226:	371c      	adds	r7, #28
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr

08003230 <_ZN8adam_msg3LEd7getTypeEv>:

    virtual const char * getType() override { return "adam_msg/LEd"; };
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	4b03      	ldr	r3, [pc, #12]	; (8003248 <_ZN8adam_msg3LEd7getTypeEv+0x18>)
 800323a:	4618      	mov	r0, r3
 800323c:	370c      	adds	r7, #12
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop
 8003248:	0800ba78 	.word	0x0800ba78

0800324c <_ZN8adam_msg3LEd6getMD5Ev>:
    virtual const char * getMD5() override { return "8b281732d2f9c2f4f5b2bf6fd0b6cab2"; };
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	4b03      	ldr	r3, [pc, #12]	; (8003264 <_ZN8adam_msg3LEd6getMD5Ev+0x18>)
 8003256:	4618      	mov	r0, r3
 8003258:	370c      	adds	r7, #12
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop
 8003264:	0800ba88 	.word	0x0800ba88

08003268 <main>:
* SoftwareTimer
*******************************************************************************/
//static uint32_t tTime[10];


int main(void){
 8003268:	b580      	push	{r7, lr}
 800326a:	af00      	add	r7, sp, #0
	set();
 800326c:	f001 fd0c 	bl	8004c88 <set>
	ROS_Init();
 8003270:	f000 f832 	bl	80032d8 <_Z8ROS_Initv>


	while(1){

		t = millis();
 8003274:	f001 f928 	bl	80044c8 <millis>
 8003278:	4603      	mov	r3, r0
 800327a:	4a07      	ldr	r2, [pc, #28]	; (8003298 <main+0x30>)
 800327c:	6013      	str	r3, [r2, #0]
		if ((t - prev_update_time) >= 1000/PUBLISH_FREQUENCY )
 800327e:	4b06      	ldr	r3, [pc, #24]	; (8003298 <main+0x30>)
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	4b06      	ldr	r3, [pc, #24]	; (800329c <main+0x34>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	2b31      	cmp	r3, #49	; 0x31
 800328a:	d901      	bls.n	8003290 <main+0x28>
			ROS_Update();
 800328c:	f000 f84a 	bl	8003324 <_Z10ROS_Updatev>
		nh.spinOnce();
 8003290:	4803      	ldr	r0, [pc, #12]	; (80032a0 <main+0x38>)
 8003292:	f000 f9db 	bl	800364c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv>
		t = millis();
 8003296:	e7ed      	b.n	8003274 <main+0xc>
 8003298:	200000a0 	.word	0x200000a0
 800329c:	200000a4 	.word	0x200000a4
 80032a0:	200000a8 	.word	0x200000a8

080032a4 <TIM6_DAC_IRQHandler>:
#ifdef __cplusplus
extern "C" {
#endif

void TIM6_DAC_IRQHandler(void)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	af00      	add	r7, sp, #0
	led1 = !led1;
 80032a8:	4b09      	ldr	r3, [pc, #36]	; (80032d0 <TIM6_DAC_IRQHandler+0x2c>)
 80032aa:	785b      	ldrb	r3, [r3, #1]
 80032ac:	f003 0320 	and.w	r3, r3, #32
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	4a07      	ldr	r2, [pc, #28]	; (80032d0 <TIM6_DAC_IRQHandler+0x2c>)
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	bf0c      	ite	eq
 80032b8:	2301      	moveq	r3, #1
 80032ba:	2300      	movne	r3, #0
 80032bc:	b2d9      	uxtb	r1, r3
 80032be:	7853      	ldrb	r3, [r2, #1]
 80032c0:	f361 1345 	bfi	r3, r1, #5, #1
 80032c4:	7053      	strb	r3, [r2, #1]
//	UARTPrintString(&huart5,data);
	HAL_TIM_IRQHandler(&htim6);
 80032c6:	4803      	ldr	r0, [pc, #12]	; (80032d4 <TIM6_DAC_IRQHandler+0x30>)
 80032c8:	f006 f880 	bl	80093cc <HAL_TIM_IRQHandler>
}
 80032cc:	bf00      	nop
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	40020814 	.word	0x40020814
 80032d4:	2000130c 	.word	0x2000130c

080032d8 <_Z8ROS_Initv>:
#ifdef __cplusplus
}
#endif

void ROS_Init()
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	af00      	add	r7, sp, #0
	nh.initNode();
 80032dc:	480d      	ldr	r0, [pc, #52]	; (8003314 <_Z8ROS_Initv+0x3c>)
 80032de:	f000 fb88 	bl	80039f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8initNodeEv>
	nh.getHardware()->setBaud(115200);
 80032e2:	480c      	ldr	r0, [pc, #48]	; (8003314 <_Z8ROS_Initv+0x3c>)
 80032e4:	f000 fba2 	bl	8003a2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE11getHardwareEv>
 80032e8:	4603      	mov	r3, r0
 80032ea:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80032ee:	4618      	mov	r0, r3
 80032f0:	f7ff fe30 	bl	8002f54 <_ZN13STM32Hardware7setBaudEl>

	nh.subscribe(led_sub);
 80032f4:	4908      	ldr	r1, [pc, #32]	; (8003318 <_Z8ROS_Initv+0x40>)
 80032f6:	4807      	ldr	r0, [pc, #28]	; (8003314 <_Z8ROS_Initv+0x3c>)
 80032f8:	f000 fba4 	bl	8003a44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN8adam_msg3LEdEvEEEEbRT_>

	nh.advertise(info_pub);
 80032fc:	4907      	ldr	r1, [pc, #28]	; (800331c <_Z8ROS_Initv+0x44>)
 80032fe:	4805      	ldr	r0, [pc, #20]	; (8003314 <_Z8ROS_Initv+0x3c>)
 8003300:	f000 fbcb 	bl	8003a9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE>

	prev_update_time = millis();
 8003304:	f001 f8e0 	bl	80044c8 <millis>
 8003308:	4603      	mov	r3, r0
 800330a:	4a05      	ldr	r2, [pc, #20]	; (8003320 <_Z8ROS_Initv+0x48>)
 800330c:	6013      	str	r3, [r2, #0]
}
 800330e:	bf00      	nop
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	200000a8 	.word	0x200000a8
 8003318:	200009e8 	.word	0x200009e8
 800331c:	20000ad4 	.word	0x20000ad4
 8003320:	200000a4 	.word	0x200000a4

08003324 <_Z10ROS_Updatev>:

void ROS_Update()
{
 8003324:	b580      	push	{r7, lr}
 8003326:	af00      	add	r7, sp, #0
	updateTime();
 8003328:	f000 f866 	bl	80033f8 <_Z10updateTimev>
//	publishDigitalInput();

	prev_update_time = t;
 800332c:	4b02      	ldr	r3, [pc, #8]	; (8003338 <_Z10ROS_Updatev+0x14>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a02      	ldr	r2, [pc, #8]	; (800333c <_Z10ROS_Updatev+0x18>)
 8003332:	6013      	str	r3, [r2, #0]
}
 8003334:	bf00      	nop
 8003336:	bd80      	pop	{r7, pc}
 8003338:	200000a0 	.word	0x200000a0
 800333c:	200000a4 	.word	0x200000a4

08003340 <_Z11LEDCallbackRKN8adam_msg3LEdE>:

/*******************************************************************************
* Callback functions
*******************************************************************************/
void LEDCallback(const adam_msg::LEd &led_msg)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
	int32_t led = led_msg.led;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800334e:	60fb      	str	r3, [r7, #12]
	bool status= led_msg.status;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8003356:	2b00      	cmp	r3, #0
 8003358:	bf14      	ite	ne
 800335a:	2301      	movne	r3, #1
 800335c:	2300      	moveq	r3, #0
 800335e:	72fb      	strb	r3, [r7, #11]

	switch (led)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2b03      	cmp	r3, #3
 8003364:	d021      	beq.n	80033aa <_Z11LEDCallbackRKN8adam_msg3LEdE+0x6a>
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2b03      	cmp	r3, #3
 800336a:	dc2a      	bgt.n	80033c2 <_Z11LEDCallbackRKN8adam_msg3LEdE+0x82>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2b01      	cmp	r3, #1
 8003370:	d003      	beq.n	800337a <_Z11LEDCallbackRKN8adam_msg3LEdE+0x3a>
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2b02      	cmp	r3, #2
 8003376:	d00c      	beq.n	8003392 <_Z11LEDCallbackRKN8adam_msg3LEdE+0x52>
 8003378:	e023      	b.n	80033c2 <_Z11LEDCallbackRKN8adam_msg3LEdE+0x82>
	{
	case 1:
		led1 = status ? 1 : 0;
 800337a:	7afb      	ldrb	r3, [r7, #11]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d001      	beq.n	8003384 <_Z11LEDCallbackRKN8adam_msg3LEdE+0x44>
 8003380:	2101      	movs	r1, #1
 8003382:	e000      	b.n	8003386 <_Z11LEDCallbackRKN8adam_msg3LEdE+0x46>
 8003384:	2100      	movs	r1, #0
 8003386:	4a17      	ldr	r2, [pc, #92]	; (80033e4 <_Z11LEDCallbackRKN8adam_msg3LEdE+0xa4>)
 8003388:	7853      	ldrb	r3, [r2, #1]
 800338a:	f361 1345 	bfi	r3, r1, #5, #1
 800338e:	7053      	strb	r3, [r2, #1]
		break;
 8003390:	e017      	b.n	80033c2 <_Z11LEDCallbackRKN8adam_msg3LEdE+0x82>
	case 2:
		led2 = status ? 1 : 0;
 8003392:	7afb      	ldrb	r3, [r7, #11]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d001      	beq.n	800339c <_Z11LEDCallbackRKN8adam_msg3LEdE+0x5c>
 8003398:	2101      	movs	r1, #1
 800339a:	e000      	b.n	800339e <_Z11LEDCallbackRKN8adam_msg3LEdE+0x5e>
 800339c:	2100      	movs	r1, #0
 800339e:	4a11      	ldr	r2, [pc, #68]	; (80033e4 <_Z11LEDCallbackRKN8adam_msg3LEdE+0xa4>)
 80033a0:	7853      	ldrb	r3, [r2, #1]
 80033a2:	f361 1386 	bfi	r3, r1, #6, #1
 80033a6:	7053      	strb	r3, [r2, #1]
		break;
 80033a8:	e00b      	b.n	80033c2 <_Z11LEDCallbackRKN8adam_msg3LEdE+0x82>
	case 3:
		led3 = status ? 1 : 0;
 80033aa:	7afb      	ldrb	r3, [r7, #11]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d001      	beq.n	80033b4 <_Z11LEDCallbackRKN8adam_msg3LEdE+0x74>
 80033b0:	2101      	movs	r1, #1
 80033b2:	e000      	b.n	80033b6 <_Z11LEDCallbackRKN8adam_msg3LEdE+0x76>
 80033b4:	2100      	movs	r1, #0
 80033b6:	4a0b      	ldr	r2, [pc, #44]	; (80033e4 <_Z11LEDCallbackRKN8adam_msg3LEdE+0xa4>)
 80033b8:	7853      	ldrb	r3, [r2, #1]
 80033ba:	f361 13c7 	bfi	r3, r1, #7, #1
 80033be:	7053      	strb	r3, [r2, #1]
		break;
 80033c0:	bf00      	nop
	}

	sprintf(buffer, "led: %ld, status: %d", led, status);
 80033c2:	7afb      	ldrb	r3, [r7, #11]
 80033c4:	68fa      	ldr	r2, [r7, #12]
 80033c6:	4908      	ldr	r1, [pc, #32]	; (80033e8 <_Z11LEDCallbackRKN8adam_msg3LEdE+0xa8>)
 80033c8:	4808      	ldr	r0, [pc, #32]	; (80033ec <_Z11LEDCallbackRKN8adam_msg3LEdE+0xac>)
 80033ca:	f007 fe67 	bl	800b09c <siprintf>
	info_msg.data = buffer;
 80033ce:	4b08      	ldr	r3, [pc, #32]	; (80033f0 <_Z11LEDCallbackRKN8adam_msg3LEdE+0xb0>)
 80033d0:	4a06      	ldr	r2, [pc, #24]	; (80033ec <_Z11LEDCallbackRKN8adam_msg3LEdE+0xac>)
 80033d2:	605a      	str	r2, [r3, #4]
	info_pub.publish(&info_msg);
 80033d4:	4906      	ldr	r1, [pc, #24]	; (80033f0 <_Z11LEDCallbackRKN8adam_msg3LEdE+0xb0>)
 80033d6:	4807      	ldr	r0, [pc, #28]	; (80033f4 <_Z11LEDCallbackRKN8adam_msg3LEdE+0xb4>)
 80033d8:	f7ff fd77 	bl	8002eca <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 80033dc:	bf00      	nop
 80033de:	3710      	adds	r7, #16
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	40020814 	.word	0x40020814
 80033e8:	0800baac 	.word	0x0800baac
 80033ec:	20000a04 	.word	0x20000a04
 80033f0:	20000acc 	.word	0x20000acc
 80033f4:	20000ad4 	.word	0x20000ad4

080033f8 <_Z10updateTimev>:

/*******************************************************************************
* Update the base time for interpolation
*******************************************************************************/
void updateTime()
{
 80033f8:	b590      	push	{r4, r7, lr}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
	current_offset = millis();
 80033fe:	f001 f863 	bl	80044c8 <millis>
 8003402:	4603      	mov	r3, r0
 8003404:	4a08      	ldr	r2, [pc, #32]	; (8003428 <_Z10updateTimev+0x30>)
 8003406:	6013      	str	r3, [r2, #0]
	current_time = nh.now();
 8003408:	4c08      	ldr	r4, [pc, #32]	; (800342c <_Z10updateTimev+0x34>)
 800340a:	463b      	mov	r3, r7
 800340c:	4908      	ldr	r1, [pc, #32]	; (8003430 <_Z10updateTimev+0x38>)
 800340e:	4618      	mov	r0, r3
 8003410:	f000 fb74 	bl	8003afc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE3nowEv>
 8003414:	4622      	mov	r2, r4
 8003416:	463b      	mov	r3, r7
 8003418:	e893 0003 	ldmia.w	r3, {r0, r1}
 800341c:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8003420:	bf00      	nop
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	bd90      	pop	{r4, r7, pc}
 8003428:	200009e4 	.word	0x200009e4
 800342c:	200009dc 	.word	0x200009dc
 8003430:	200000a8 	.word	0x200000a8

08003434 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 */
void Error_Handler(void)
{
 8003434:	b480      	push	{r7}
 8003436:	af00      	add	r7, sp, #0

	/* User can add his own implementation to report the HAL error return state */

}
 8003438:	bf00      	nop
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr

08003442 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8003442:	b480      	push	{r7}
 8003444:	b085      	sub	sp, #20
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
 800344a:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 800344c:	2300      	movs	r3, #0
 800344e:	60fb      	str	r3, [r7, #12]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2b03      	cmp	r3, #3
 8003454:	d80d      	bhi.n	8003472 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	00db      	lsls	r3, r3, #3
 800345a:	683a      	ldr	r2, [r7, #0]
 800345c:	fa22 f103 	lsr.w	r1, r2, r3
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	4413      	add	r3, r2
 8003466:	b2ca      	uxtb	r2, r1
 8003468:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	3301      	adds	r3, #1
 800346e:	60fb      	str	r3, [r7, #12]
 8003470:	e7ee      	b.n	8003450 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8003472:	bf00      	nop
 8003474:	3714      	adds	r7, #20
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr

0800347e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 800347e:	b480      	push	{r7}
 8003480:	b085      	sub	sp, #20
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
 8003486:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800348e:	2300      	movs	r3, #0
 8003490:	60fb      	str	r3, [r7, #12]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2b03      	cmp	r3, #3
 8003496:	d811      	bhi.n	80034bc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	6839      	ldr	r1, [r7, #0]
 800349e:	68fa      	ldr	r2, [r7, #12]
 80034a0:	440a      	add	r2, r1
 80034a2:	7812      	ldrb	r2, [r2, #0]
 80034a4:	4611      	mov	r1, r2
 80034a6:	68fa      	ldr	r2, [r7, #12]
 80034a8:	00d2      	lsls	r2, r2, #3
 80034aa:	fa01 f202 	lsl.w	r2, r1, r2
 80034ae:	431a      	orrs	r2, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	3301      	adds	r3, #1
 80034b8:	60fb      	str	r3, [r7, #12]
 80034ba:	e7ea      	b.n	8003492 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 80034bc:	bf00      	nop
 80034be:	3714      	adds	r7, #20
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <_ZN3ros15NodeHandleBase_C1Ev>:
extern "C++"{

namespace ros
{

class NodeHandleBase_
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	4a04      	ldr	r2, [pc, #16]	; (80034e4 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	601a      	str	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4618      	mov	r0, r3
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr
 80034e4:	0800bba4 	.word	0x0800bba4

080034e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b086      	sub	sp, #24
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4618      	mov	r0, r3
 80034f4:	f7ff ffe8 	bl	80034c8 <_ZN3ros15NodeHandleBase_C1Ev>
 80034f8:	4a39      	ldr	r2, [pc, #228]	; (80035e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0xf8>)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	601a      	str	r2, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	3304      	adds	r3, #4
 8003502:	4618      	mov	r0, r3
 8003504:	f7ff fd12 	bl	8002f2c <_ZN13STM32HardwareC1Ev>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 28f8 	strb.w	r2, [r3, #2296]	; 0x8f8
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f603 130c 	addw	r3, r3, #2316	; 0x90c
 8003516:	4618      	mov	r0, r3
 8003518:	f7fe ff38 	bl	800238c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 800351c:	2300      	movs	r3, #0
 800351e:	617b      	str	r3, [r7, #20]
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	2b18      	cmp	r3, #24
 8003524:	d80b      	bhi.n	800353e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x56>
      publishers[i] = 0;
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	f203 2306 	addw	r3, r3, #518	; 0x206
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	4413      	add	r3, r2
 8003532:	2200      	movs	r2, #0
 8003534:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	3301      	adds	r3, #1
 800353a:	617b      	str	r3, [r7, #20]
 800353c:	e7f0      	b.n	8003520 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 800353e:	2300      	movs	r3, #0
 8003540:	613b      	str	r3, [r7, #16]
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	2b18      	cmp	r3, #24
 8003546:	d80a      	bhi.n	800355e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x76>
      subscribers[i] = 0;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	693a      	ldr	r2, [r7, #16]
 800354c:	f502 7208 	add.w	r2, r2, #544	; 0x220
 8003550:	2100      	movs	r1, #0
 8003552:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	3301      	adds	r3, #1
 800355a:	613b      	str	r3, [r7, #16]
 800355c:	e7f1      	b.n	8003542 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x5a>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 800355e:	2300      	movs	r3, #0
 8003560:	60fb      	str	r3, [r7, #12]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003568:	d209      	bcs.n	800357e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x96>
      message_in[i] = 0;
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	4413      	add	r3, r2
 8003570:	331c      	adds	r3, #28
 8003572:	2200      	movs	r2, #0
 8003574:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	3301      	adds	r3, #1
 800357a:	60fb      	str	r3, [r7, #12]
 800357c:	e7f1      	b.n	8003562 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 800357e:	2300      	movs	r3, #0
 8003580:	60bb      	str	r3, [r7, #8]
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003588:	d20a      	bcs.n	80035a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0xb8>
      message_out[i] = 0;
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	4413      	add	r3, r2
 8003590:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8003594:	2200      	movs	r2, #0
 8003596:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	3301      	adds	r3, #1
 800359c:	60bb      	str	r3, [r7, #8]
 800359e:	e7f0      	b.n	8003582 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x9a>

    req_param_resp.ints_length = 0;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f8c3 2910 	str.w	r2, [r3, #2320]	; 0x910
    req_param_resp.ints = NULL;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.floats_length = 0;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f8c3 291c 	str.w	r2, [r3, #2332]	; 0x91c
    req_param_resp.floats = NULL;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f8c3 2924 	str.w	r2, [r3, #2340]	; 0x924
    req_param_resp.ints_length = 0;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f8c3 2910 	str.w	r2, [r3, #2320]	; 0x910
    req_param_resp.ints = NULL;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918

    spin_timeout_ = 0;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	619a      	str	r2, [r3, #24]
  }
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4618      	mov	r0, r3
 80035da:	3718      	adds	r7, #24
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	0800bb48 	.word	0x0800bb48

080035e4 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	4a04      	ldr	r2, [pc, #16]	; (8003600 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	601a      	str	r2, [r3, #0]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4618      	mov	r0, r3
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr
 8003600:	0800bb8c 	.word	0x0800bb8c

08003604 <_ZN3ros10SubscriberIN8adam_msg3LEdEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	607a      	str	r2, [r7, #4]
 8003610:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	4618      	mov	r0, r3
 8003616:	f7ff ffe5 	bl	80035e4 <_ZN3ros11Subscriber_C1Ev>
 800361a:	4a0b      	ldr	r2, [pc, #44]	; (8003648 <_ZN3ros10SubscriberIN8adam_msg3LEdEvEC1EPKcPFvRKS2_Ei+0x44>)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	601a      	str	r2, [r3, #0]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	330c      	adds	r3, #12
 8003624:	4618      	mov	r0, r3
 8003626:	f7ff fd95 	bl	8003154 <_ZN8adam_msg3LEdC1Ev>
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	615a      	str	r2, [r3, #20]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	683a      	ldr	r2, [r7, #0]
 8003634:	619a      	str	r2, [r3, #24]
  {
    topic_ = topic_name;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	68ba      	ldr	r2, [r7, #8]
 800363a:	609a      	str	r2, [r3, #8]
  };
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	4618      	mov	r0, r3
 8003640:	3710      	adds	r7, #16
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	0800bb30 	.word	0x0800bb30

0800364c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv>:
  /* This function goes in your loop() function, it handles
   *  serial input and callbacks for subscribers.
   */


  virtual int spinOnce()
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  {
    /* restart if timed out */
    uint32_t c_time = hardware_.time();
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	3304      	adds	r3, #4
 8003658:	4618      	mov	r0, r3
 800365a:	f7ff fcd4 	bl	8003006 <_ZN13STM32Hardware4timeEv>
 800365e:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f8d3 3900 	ldr.w	r3, [r3, #2304]	; 0x900
 8003666:	68fa      	ldr	r2, [r7, #12]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	f642 22f8 	movw	r2, #11000	; 0x2af8
 800366e:	4293      	cmp	r3, r2
 8003670:	d903      	bls.n	800367a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x2e>
    {
      configured_ = false;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 28f8 	strb.w	r2, [r3, #2296]	; 0x8f8
    }

    /* reset if message has timed out */
    if (mode_ != MODE_FIRST_FF)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	; 0x8e4
 8003680:	2b00      	cmp	r3, #0
 8003682:	d009      	beq.n	8003698 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
    {
      if (c_time > last_msg_timeout_time)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 800368a:	68fa      	ldr	r2, [r7, #12]
 800368c:	429a      	cmp	r2, r3
 800368e:	d903      	bls.n	8003698 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
      {
        mode_ = MODE_FIRST_FF;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	f8c3 28e4 	str.w	r2, [r3, #2276]	; 0x8e4

    /* while available buffer, read data */
    while (true)
    {
      // If a timeout has been specified, check how long spinOnce has been running.
      if (spin_timeout_ > 0)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	699b      	ldr	r3, [r3, #24]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d013      	beq.n	80036c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x7c>
      {
        // If the maximum processing timeout has been exceeded, exit with error.
        // The next spinOnce can continue where it left off, or optionally
        // based on the application in use, the hardware buffer could be flushed
        // and start fresh.
        if ((hardware_.time() - c_time) > spin_timeout_)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	3304      	adds	r3, #4
 80036a4:	4618      	mov	r0, r3
 80036a6:	f7ff fcae 	bl	8003006 <_ZN13STM32Hardware4timeEv>
 80036aa:	4602      	mov	r2, r0
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	1ad2      	subs	r2, r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	699b      	ldr	r3, [r3, #24]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	bf8c      	ite	hi
 80036b8:	2301      	movhi	r3, #1
 80036ba:	2300      	movls	r3, #0
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d002      	beq.n	80036c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x7c>
        {
          // Exit the spin, processing timeout exceeded.
          return SPIN_TIMEOUT;
 80036c2:	f06f 0301 	mvn.w	r3, #1
 80036c6:	e190      	b.n	80039ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x39e>
        }
      }
      int data = hardware_.read();
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	3304      	adds	r3, #4
 80036cc:	4618      	mov	r0, r3
 80036ce:	f7ff fc5f 	bl	8002f90 <_ZN13STM32Hardware4readEv>
 80036d2:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	f2c0 8170 	blt.w	80039bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x370>
        break;
      checksum_ += data;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	441a      	add	r2, r3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	; 0x8e4
 80036f2:	2b07      	cmp	r3, #7
 80036f4:	d11d      	bne.n	8003732 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0xe6>
      {
        message_in[index_++] = data;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80036fc:	1c59      	adds	r1, r3, #1
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	f8c2 18f0 	str.w	r1, [r2, #2288]	; 0x8f0
 8003704:	68ba      	ldr	r2, [r7, #8]
 8003706:	b2d1      	uxtb	r1, r2
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	4413      	add	r3, r2
 800370c:	460a      	mov	r2, r1
 800370e:	771a      	strb	r2, [r3, #28]
        bytes_--;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f8d3 38e8 	ldr.w	r3, [r3, #2280]	; 0x8e8
 8003716:	1e5a      	subs	r2, r3, #1
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f8c3 28e8 	str.w	r2, [r3, #2280]	; 0x8e8
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f8d3 38e8 	ldr.w	r3, [r3, #2280]	; 0x8e8
 8003724:	2b00      	cmp	r3, #0
 8003726:	d1b7      	bne.n	8003698 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2208      	movs	r2, #8
 800372c:	f8c3 28e4 	str.w	r2, [r3, #2276]	; 0x8e4
 8003730:	e7b2      	b.n	8003698 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_FIRST_FF)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	; 0x8e4
 8003738:	2b00      	cmp	r3, #0
 800373a:	d128      	bne.n	800378e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x142>
      {
        if (data == 0xff)
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	2bff      	cmp	r3, #255	; 0xff
 8003740:	d10d      	bne.n	800375e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x112>
        {
          mode_++;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	; 0x8e4
 8003748:	1c5a      	adds	r2, r3, #1
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f8c3 28e4 	str.w	r2, [r3, #2276]	; 0x8e4
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f103 0214 	add.w	r2, r3, #20
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
 800375c:	e79c      	b.n	8003698 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
        }
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	3304      	adds	r3, #4
 8003762:	4618      	mov	r0, r3
 8003764:	f7ff fc4f 	bl	8003006 <_ZN13STM32Hardware4timeEv>
 8003768:	4602      	mov	r2, r0
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003772:	4293      	cmp	r3, r2
 8003774:	bf8c      	ite	hi
 8003776:	2301      	movhi	r3, #1
 8003778:	2300      	movls	r3, #0
 800377a:	b2db      	uxtb	r3, r3
 800377c:	2b00      	cmp	r3, #0
 800377e:	d08b      	beq.n	8003698 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
        {
          /* We have been stuck in spinOnce too long, return error */
          configured_ = false;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	f883 28f8 	strb.w	r2, [r3, #2296]	; 0x8f8
          return SPIN_TIMEOUT;
 8003788:	f06f 0301 	mvn.w	r3, #1
 800378c:	e12d      	b.n	80039ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x39e>
        }
      }
      else if (mode_ == MODE_PROTOCOL_VER)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	; 0x8e4
 8003794:	2b01      	cmp	r3, #1
 8003796:	d118      	bne.n	80037ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x17e>
      {
        if (data == PROTOCOL_VER)
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	2bfe      	cmp	r3, #254	; 0xfe
 800379c:	d107      	bne.n	80037ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x162>
        {
          mode_++;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	; 0x8e4
 80037a4:	1c5a      	adds	r2, r3, #1
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f8c3 28e4 	str.w	r2, [r3, #2276]	; 0x8e4
 80037ac:	e774      	b.n	8003698 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
        }
        else
        {
          mode_ = MODE_FIRST_FF;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f8c3 28e4 	str.w	r2, [r3, #2276]	; 0x8e4
          if (configured_ == false)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f893 38f8 	ldrb.w	r3, [r3, #2296]	; 0x8f8
 80037bc:	2b00      	cmp	r3, #0
 80037be:	f47f af6b 	bne.w	8003698 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f000 f9d4 	bl	8003b70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
 80037c8:	e766      	b.n	8003698 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
        }
      }
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	; 0x8e4
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d113      	bne.n	80037fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x1b0>
      {
        bytes_ = data;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	68ba      	ldr	r2, [r7, #8]
 80037d8:	f8c3 28e8 	str.w	r2, [r3, #2280]	; 0x8e8
        index_ = 0;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	; 0x8e4
 80037ea:	1c5a      	adds	r2, r3, #1
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f8c3 28e4 	str.w	r2, [r3, #2276]	; 0x8e4
        checksum_ = data;               /* first byte for calculating size checksum */
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	68ba      	ldr	r2, [r7, #8]
 80037f6:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
 80037fa:	e74d      	b.n	8003698 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	; 0x8e4
 8003802:	2b03      	cmp	r3, #3
 8003804:	d110      	bne.n	8003828 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x1dc>
      {
        bytes_ += data << 8;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f8d3 28e8 	ldr.w	r2, [r3, #2280]	; 0x8e8
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	021b      	lsls	r3, r3, #8
 8003810:	441a      	add	r2, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f8c3 28e8 	str.w	r2, [r3, #2280]	; 0x8e8
        mode_++;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	; 0x8e4
 800381e:	1c5a      	adds	r2, r3, #1
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f8c3 28e4 	str.w	r2, [r3, #2276]	; 0x8e4
 8003826:	e737      	b.n	8003698 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	; 0x8e4
 800382e:	2b04      	cmp	r3, #4
 8003830:	d116      	bne.n	8003860 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x214>
      {
        if ((checksum_ % 256) == 255)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003838:	425a      	negs	r2, r3
 800383a:	b2db      	uxtb	r3, r3
 800383c:	b2d2      	uxtb	r2, r2
 800383e:	bf58      	it	pl
 8003840:	4253      	negpl	r3, r2
 8003842:	2bff      	cmp	r3, #255	; 0xff
 8003844:	d107      	bne.n	8003856 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x20a>
          mode_++;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	; 0x8e4
 800384c:	1c5a      	adds	r2, r3, #1
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f8c3 28e4 	str.w	r2, [r3, #2276]	; 0x8e4
 8003854:	e720      	b.n	8003698 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
        else
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	f8c3 28e4 	str.w	r2, [r3, #2276]	; 0x8e4
 800385e:	e71b      	b.n	8003698 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	; 0x8e4
 8003866:	2b05      	cmp	r3, #5
 8003868:	d10f      	bne.n	800388a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x23e>
      {
        topic_ = data;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	68ba      	ldr	r2, [r7, #8]
 800386e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        mode_++;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	; 0x8e4
 8003878:	1c5a      	adds	r2, r3, #1
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f8c3 28e4 	str.w	r2, [r3, #2276]	; 0x8e4
        checksum_ = data;               /* first byte included in checksum */
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	68ba      	ldr	r2, [r7, #8]
 8003884:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
 8003888:	e706      	b.n	8003698 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	; 0x8e4
 8003890:	2b06      	cmp	r3, #6
 8003892:	d117      	bne.n	80038c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x278>
      {
        topic_ += data << 8;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f8d3 28ec 	ldr.w	r2, [r3, #2284]	; 0x8ec
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	021b      	lsls	r3, r3, #8
 800389e:	441a      	add	r2, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        mode_ = MODE_MESSAGE;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2207      	movs	r2, #7
 80038aa:	f8c3 28e4 	str.w	r2, [r3, #2276]	; 0x8e4
        if (bytes_ == 0)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f8d3 38e8 	ldr.w	r3, [r3, #2280]	; 0x8e8
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	f47f aeef 	bne.w	8003698 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2208      	movs	r2, #8
 80038be:	f8c3 28e4 	str.w	r2, [r3, #2276]	; 0x8e4
 80038c2:	e6e9      	b.n	8003698 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	; 0x8e4
 80038ca:	2b08      	cmp	r3, #8
 80038cc:	f47f aee4 	bne.w	8003698 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
      {
        mode_ = MODE_FIRST_FF;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f8c3 28e4 	str.w	r2, [r3, #2276]	; 0x8e4
        if ((checksum_ % 256) == 255)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80038de:	425a      	negs	r2, r3
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	b2d2      	uxtb	r2, r2
 80038e4:	bf58      	it	pl
 80038e6:	4253      	negpl	r3, r2
 80038e8:	2bff      	cmp	r3, #255	; 0xff
 80038ea:	f47f aed5 	bne.w	8003698 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
        {
          if (topic_ == TopicInfo::ID_PUBLISHER)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d110      	bne.n	800391a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x2ce>
          {
            requestSyncTime();
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f000 f939 	bl	8003b70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
            negotiateTopics();
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f000 f953 	bl	8003baa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	68fa      	ldr	r2, [r7, #12]
 8003908:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
            last_sync_receive_time = c_time;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	68fa      	ldr	r2, [r7, #12]
 8003910:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
            return SPIN_ERR;
 8003914:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003918:	e067      	b.n	80039ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x39e>
          }
          else if (topic_ == TopicInfo::ID_TIME)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003920:	2b0a      	cmp	r3, #10
 8003922:	d106      	bne.n	8003932 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x2e6>
          {
            syncTime(message_in);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	331c      	adds	r3, #28
 8003928:	4619      	mov	r1, r3
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 fa1c 	bl	8003d68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh>
 8003930:	e6b2      	b.n	8003698 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
          }
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003938:	2b06      	cmp	r3, #6
 800393a:	d10d      	bne.n	8003958 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x30c>
          {
            req_param_resp.deserialize(message_in);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f603 120c 	addw	r2, r3, #2316	; 0x90c
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	331c      	adds	r3, #28
 8003946:	4619      	mov	r1, r3
 8003948:	4610      	mov	r0, r2
 800394a:	f7fe fe54 	bl	80025f6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2201      	movs	r2, #1
 8003952:	f883 2908 	strb.w	r2, [r3, #2312]	; 0x908
 8003956:	e69f      	b.n	8003698 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
          }
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800395e:	2b0b      	cmp	r3, #11
 8003960:	d104      	bne.n	800396c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x320>
          {
            configured_ = false;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	f883 28f8 	strb.w	r2, [r3, #2296]	; 0x8f8
 800396a:	e695      	b.n	8003698 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
          }
          else
          {
            if (subscribers[topic_ - 100])
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003972:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f502 7208 	add.w	r2, r2, #544	; 0x220
 800397c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003980:	2b00      	cmp	r3, #0
 8003982:	f43f ae89 	beq.w	8003698 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800398c:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f502 7208 	add.w	r2, r2, #544	; 0x220
 8003996:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80039a0:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f502 7208 	add.w	r2, r2, #544	; 0x220
 80039aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	321c      	adds	r2, #28
 80039b6:	4611      	mov	r1, r2
 80039b8:	4798      	blx	r3
    while (true)
 80039ba:	e66d      	b.n	8003698 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
        break;
 80039bc:	bf00      	nop
        }
      }
    }

    /* occasionally sync time */
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f893 38f8 	ldrb.w	r3, [r3, #2296]	; 0x8f8
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d00f      	beq.n	80039e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x39c>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 80039ce:	68fa      	ldr	r2, [r7, #12]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d906      	bls.n	80039e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x39c>
    {
      requestSyncTime();
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f000 f8c8 	bl	8003b70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
      last_sync_time = c_time;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	68fa      	ldr	r2, [r7, #12]
 80039e4:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
    }

    return SPIN_OK;
 80039e8:	2300      	movs	r3, #0
  }
 80039ea:	4618      	mov	r0, r3
 80039ec:	3710      	adds	r7, #16
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}

080039f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8initNodeEv>:
  void initNode()
 80039f2:	b580      	push	{r7, lr}
 80039f4:	b082      	sub	sp, #8
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
    hardware_.init();
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	3304      	adds	r3, #4
 80039fe:	4618      	mov	r0, r3
 8003a00:	f7ff fab6 	bl	8002f70 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	f8c3 28e4 	str.w	r2, [r3, #2276]	; 0x8e4
    bytes_ = 0;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f8c3 28e8 	str.w	r2, [r3, #2280]	; 0x8e8
    index_ = 0;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    topic_ = 0;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
  };
 8003a24:	bf00      	nop
 8003a26:	3708      	adds	r7, #8
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE11getHardwareEv>:
  Hardware* getHardware()
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
    return &hardware_;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	3304      	adds	r3, #4
  }
 8003a38:	4618      	mov	r0, r3
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN8adam_msg3LEdEvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 8003a44:	b480      	push	{r7}
 8003a46:	b085      	sub	sp, #20
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003a4e:	2300      	movs	r3, #0
 8003a50:	60fb      	str	r3, [r7, #12]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2b18      	cmp	r3, #24
 8003a56:	dc19      	bgt.n	8003a8c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN8adam_msg3LEdEvEEEEbRT_+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	68fa      	ldr	r2, [r7, #12]
 8003a5c:	f502 7208 	add.w	r2, r2, #544	; 0x220
 8003a60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d10d      	bne.n	8003a84 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN8adam_msg3LEdEvEEEEbRT_+0x40>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8003a68:	6839      	ldr	r1, [r7, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	68fa      	ldr	r2, [r7, #12]
 8003a6e:	f502 7208 	add.w	r2, r2, #544	; 0x220
 8003a72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	605a      	str	r2, [r3, #4]
        return true;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e004      	b.n	8003a8e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN8adam_msg3LEdEvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	3301      	adds	r3, #1
 8003a88:	60fb      	str	r3, [r7, #12]
 8003a8a:	e7e2      	b.n	8003a52 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN8adam_msg3LEdEvEEEEbRT_+0xe>
      }
    }
    return false;
 8003a8c:	2300      	movs	r3, #0
  }
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3714      	adds	r7, #20
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr

08003a9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 8003a9a:	b480      	push	{r7}
 8003a9c:	b085      	sub	sp, #20
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
 8003aa2:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	60fb      	str	r3, [r7, #12]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2b18      	cmp	r3, #24
 8003aac:	dc1e      	bgt.n	8003aec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x52>
      if (publishers[i] == 0) // empty slot
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f203 2306 	addw	r3, r3, #518	; 0x206
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	4413      	add	r3, r2
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d111      	bne.n	8003ae4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x4a>
        publishers[i] = &p;
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f203 2306 	addw	r3, r3, #518	; 0x206
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	4413      	add	r3, r2
 8003acc:	683a      	ldr	r2, [r7, #0]
 8003ace:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	60da      	str	r2, [r3, #12]
        return true;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e004      	b.n	8003aee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	60fb      	str	r3, [r7, #12]
 8003aea:	e7dd      	b.n	8003aa8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0xe>
    return false;
 8003aec:	2300      	movs	r3, #0
  }
 8003aee:	4618      	mov	r0, r3
 8003af0:	3714      	adds	r7, #20
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr
	...

08003afc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE3nowEv>:
  Time now()
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	3304      	adds	r3, #4
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f7ff fa7b 	bl	8003006 <_ZN13STM32Hardware4timeEv>
 8003b10:	60f8      	str	r0, [r7, #12]
    Time current_time;
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f7ff f8c0 	bl	8002c98 <_ZN3ros4TimeC1Ev>
    current_time.sec = ms / 1000 + sec_offset;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	4a13      	ldr	r2, [pc, #76]	; (8003b68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE3nowEv+0x6c>)
 8003b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b20:	099a      	lsrs	r2, r3, #6
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	441a      	add	r2, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	601a      	str	r2, [r3, #0]
    current_time.nsec = (ms % 1000) * 1000000UL + nsec_offset;
 8003b2c:	68fa      	ldr	r2, [r7, #12]
 8003b2e:	4b0e      	ldr	r3, [pc, #56]	; (8003b68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE3nowEv+0x6c>)
 8003b30:	fba3 1302 	umull	r1, r3, r3, r2
 8003b34:	099b      	lsrs	r3, r3, #6
 8003b36:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003b3a:	fb01 f303 	mul.w	r3, r1, r3
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	4a0a      	ldr	r2, [pc, #40]	; (8003b6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE3nowEv+0x70>)
 8003b42:	fb03 f202 	mul.w	r2, r3, r2
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	695b      	ldr	r3, [r3, #20]
 8003b4a:	441a      	add	r2, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	605a      	str	r2, [r3, #4]
    normalizeSecNSec(current_time.sec, current_time.nsec);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	3304      	adds	r3, #4
 8003b54:	4619      	mov	r1, r3
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f7fc fd14 	bl	8000584 <_ZN3ros16normalizeSecNSecERmS0_>
    return current_time;
 8003b5c:	bf00      	nop
  }
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	3710      	adds	r7, #16
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	10624dd3 	.word	0x10624dd3
 8003b6c:	000f4240 	.word	0x000f4240

08003b70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>:
  void requestSyncTime()
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b086      	sub	sp, #24
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8003b78:	f107 030c 	add.w	r3, r7, #12
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f7ff f89d 	bl	8002cbc <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f107 020c 	add.w	r2, r7, #12
 8003b8c:	210a      	movs	r1, #10
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	4798      	blx	r3
    rt_time = hardware_.time();
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	3304      	adds	r3, #4
 8003b96:	4618      	mov	r0, r3
 8003b98:	f7ff fa35 	bl	8003006 <_ZN13STM32Hardware4timeEv>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	60da      	str	r2, [r3, #12]
  }
 8003ba2:	bf00      	nop
 8003ba4:	3718      	adds	r7, #24
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}

08003baa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 8003baa:	b590      	push	{r4, r7, lr}
 8003bac:	b08b      	sub	sp, #44	; 0x2c
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8003bb2:	f107 030c 	add.w	r3, r7, #12
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f7fe feaa 	bl	8002910 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	627b      	str	r3, [r7, #36]	; 0x24
 8003bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc2:	2b18      	cmp	r3, #24
 8003bc4:	dc63      	bgt.n	8003c8e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bca:	f203 2306 	addw	r3, r3, #518	; 0x206
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	4413      	add	r3, r2
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d056      	beq.n	8003c86 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bdc:	f203 2306 	addw	r3, r3, #518	; 0x206
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	4413      	add	r3, r2
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf0:	f203 2306 	addw	r3, r3, #518	; 0x206
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	4413      	add	r3, r2
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c02:	f203 2306 	addw	r3, r3, #518	; 0x206
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	4413      	add	r3, r2
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	6859      	ldr	r1, [r3, #4]
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c12:	f203 2306 	addw	r3, r3, #518	; 0x206
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	4413      	add	r3, r2
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	3308      	adds	r3, #8
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4608      	mov	r0, r1
 8003c26:	4798      	blx	r3
 8003c28:	4603      	mov	r3, r0
 8003c2a:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c30:	f203 2306 	addw	r3, r3, #518	; 0x206
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	4413      	add	r3, r2
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	6859      	ldr	r1, [r3, #4]
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c40:	f203 2306 	addw	r3, r3, #518	; 0x206
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	4413      	add	r3, r2
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	330c      	adds	r3, #12
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4608      	mov	r0, r1
 8003c54:	4798      	blx	r3
 8003c56:	4603      	mov	r3, r0
 8003c58:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8003c5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c5e:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681c      	ldr	r4, [r3, #0]
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6a:	f203 2306 	addw	r3, r3, #518	; 0x206
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	4413      	add	r3, r2
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	4618      	mov	r0, r3
 8003c76:	f7ff f93c 	bl	8002ef2 <_ZN3ros9Publisher15getEndpointTypeEv>
 8003c7a:	4601      	mov	r1, r0
 8003c7c:	f107 030c 	add.w	r3, r7, #12
 8003c80:	461a      	mov	r2, r3
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c88:	3301      	adds	r3, #1
 8003c8a:	627b      	str	r3, [r7, #36]	; 0x24
 8003c8c:	e798      	b.n	8003bc0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003c8e:	2300      	movs	r3, #0
 8003c90:	627b      	str	r3, [r7, #36]	; 0x24
 8003c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c94:	2b18      	cmp	r3, #24
 8003c96:	dc5f      	bgt.n	8003d58 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c9c:	f502 7208 	add.w	r2, r2, #544	; 0x220
 8003ca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d053      	beq.n	8003d50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cac:	f502 7208 	add.w	r2, r2, #544	; 0x220
 8003cb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cbe:	f502 7208 	add.w	r2, r2, #544	; 0x220
 8003cc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cce:	f502 7208 	add.w	r2, r2, #544	; 0x220
 8003cd2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cda:	f502 7208 	add.w	r2, r2, #544	; 0x220
 8003cde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	3308      	adds	r3, #8
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4608      	mov	r0, r1
 8003cea:	4798      	blx	r3
 8003cec:	4603      	mov	r3, r0
 8003cee:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cf4:	f502 7208 	add.w	r2, r2, #544	; 0x220
 8003cf8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d00:	f502 7208 	add.w	r2, r2, #544	; 0x220
 8003d04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	330c      	adds	r3, #12
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4608      	mov	r0, r1
 8003d10:	4798      	blx	r3
 8003d12:	4603      	mov	r3, r0
 8003d14:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8003d16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d1a:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681c      	ldr	r4, [r3, #0]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d26:	f502 7208 	add.w	r2, r2, #544	; 0x220
 8003d2a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d32:	f502 7208 	add.w	r2, r2, #544	; 0x220
 8003d36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	3304      	adds	r3, #4
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4608      	mov	r0, r1
 8003d42:	4798      	blx	r3
 8003d44:	4601      	mov	r1, r0
 8003d46:	f107 030c 	add.w	r3, r7, #12
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d52:	3301      	adds	r3, #1
 8003d54:	627b      	str	r3, [r7, #36]	; 0x24
 8003d56:	e79c      	b.n	8003c92 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 28f8 	strb.w	r2, [r3, #2296]	; 0x8f8
  }
 8003d60:	bf00      	nop
 8003d62:	372c      	adds	r7, #44	; 0x2c
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd90      	pop	{r4, r7, pc}

08003d68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b086      	sub	sp, #24
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8003d72:	f107 0308 	add.w	r3, r7, #8
 8003d76:	4618      	mov	r0, r3
 8003d78:	f7fe ffa0 	bl	8002cbc <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	3304      	adds	r3, #4
 8003d80:	4618      	mov	r0, r3
 8003d82:	f7ff f940 	bl	8003006 <_ZN13STM32Hardware4timeEv>
 8003d86:	4602      	mov	r2, r0
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8003d90:	f107 0308 	add.w	r3, r7, #8
 8003d94:	6839      	ldr	r1, [r7, #0]
 8003d96:	4618      	mov	r0, r3
 8003d98:	f7ff f800 	bl	8002d9c <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	4914      	ldr	r1, [pc, #80]	; (8003df4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x8c>)
 8003da2:	fba1 1303 	umull	r1, r3, r1, r3
 8003da6:	099b      	lsrs	r3, r3, #6
 8003da8:	4413      	add	r3, r2
 8003daa:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8003dac:	6939      	ldr	r1, [r7, #16]
 8003dae:	697a      	ldr	r2, [r7, #20]
 8003db0:	4b10      	ldr	r3, [pc, #64]	; (8003df4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x8c>)
 8003db2:	fba3 0302 	umull	r0, r3, r3, r2
 8003db6:	099b      	lsrs	r3, r3, #6
 8003db8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003dbc:	fb00 f303 	mul.w	r3, r0, r3
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	4a0d      	ldr	r2, [pc, #52]	; (8003df8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x90>)
 8003dc4:	fb02 f303 	mul.w	r3, r2, r3
 8003dc8:	440b      	add	r3, r1
 8003dca:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8003dcc:	f107 0308 	add.w	r3, r7, #8
 8003dd0:	3304      	adds	r3, #4
 8003dd2:	4619      	mov	r1, r3
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f000 f8a5 	bl	8003f24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	3304      	adds	r3, #4
 8003dde:	4618      	mov	r0, r3
 8003de0:	f7ff f911 	bl	8003006 <_ZN13STM32Hardware4timeEv>
 8003de4:	4602      	mov	r2, r0
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
  }
 8003dec:	bf00      	nop
 8003dee:	3718      	adds	r7, #24
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	10624dd3 	.word	0x10624dd3
 8003df8:	000f4240 	.word	0x000f4240

08003dfc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b088      	sub	sp, #32
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	60b9      	str	r1, [r7, #8]
 8003e06:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	2b63      	cmp	r3, #99	; 0x63
 8003e0c:	dd09      	ble.n	8003e22 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x26>
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	f893 38f8 	ldrb.w	r3, [r3, #2296]	; 0x8f8
 8003e14:	f083 0301 	eor.w	r3, r3, #1
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d001      	beq.n	8003e22 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	e079      	b.n	8003f16 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	68fa      	ldr	r2, [r7, #12]
 8003e2a:	f202 421c 	addw	r2, r2, #1052	; 0x41c
 8003e2e:	3207      	adds	r2, #7
 8003e30:	4611      	mov	r1, r2
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	4798      	blx	r3
 8003e36:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	22ff      	movs	r2, #255	; 0xff
 8003e3c:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
    message_out[1] = PROTOCOL_VER;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	22fe      	movs	r2, #254	; 0xfe
 8003e44:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	b2da      	uxtb	r2, r3
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	0a1b      	lsrs	r3, r3, #8
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	b2da      	uxtb	r2, r3
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	f893 241e 	ldrb.w	r2, [r3, #1054]	; 0x41e
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f893 341f 	ldrb.w	r3, [r3, #1055]	; 0x41f
 8003e6e:	4413      	add	r3, r2
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	43db      	mvns	r3, r3
 8003e74:	b2da      	uxtb	r2, r3
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	b2da      	uxtb	r2, r3
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	b21b      	sxth	r3, r3
 8003e8a:	121b      	asrs	r3, r3, #8
 8003e8c:	b21b      	sxth	r3, r3
 8003e8e:	b2da      	uxtb	r2, r3
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f883 2422 	strb.w	r2, [r3, #1058]	; 0x422

    /* calculate checksum */
    int chk = 0;
 8003e96:	2300      	movs	r3, #0
 8003e98:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003e9a:	2305      	movs	r3, #5
 8003e9c:	61bb      	str	r3, [r7, #24]
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	3306      	adds	r3, #6
 8003ea2:	69ba      	ldr	r2, [r7, #24]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	dc0d      	bgt.n	8003ec4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0xc8>
      chk += message_out[i];
 8003ea8:	68fa      	ldr	r2, [r7, #12]
 8003eaa:	69bb      	ldr	r3, [r7, #24]
 8003eac:	4413      	add	r3, r2
 8003eae:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8003eb2:	781b      	ldrb	r3, [r3, #0]
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	4413      	add	r3, r2
 8003eba:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003ebc:	69bb      	ldr	r3, [r7, #24]
 8003ebe:	3301      	adds	r3, #1
 8003ec0:	61bb      	str	r3, [r7, #24]
 8003ec2:	e7ec      	b.n	8003e9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0xa2>
    l += 7;
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	3307      	adds	r3, #7
 8003ec8:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	425a      	negs	r2, r3
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	b2d2      	uxtb	r2, r2
 8003ed2:	bf58      	it	pl
 8003ed4:	4253      	negpl	r3, r2
 8003ed6:	b2da      	uxtb	r2, r3
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	1c59      	adds	r1, r3, #1
 8003edc:	6179      	str	r1, [r7, #20]
 8003ede:	43d2      	mvns	r2, r2
 8003ee0:	b2d1      	uxtb	r1, r2
 8003ee2:	68fa      	ldr	r2, [r7, #12]
 8003ee4:	4413      	add	r3, r2
 8003ee6:	460a      	mov	r2, r1
 8003ee8:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c

    if (l <= OUTPUT_SIZE)
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ef2:	dc0a      	bgt.n	8003f0a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	1d18      	adds	r0, r3, #4
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8003efe:	697a      	ldr	r2, [r7, #20]
 8003f00:	4619      	mov	r1, r3
 8003f02:	f7ff f863 	bl	8002fcc <_ZN13STM32Hardware5writeEPhi>
      return l;
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	e005      	b.n	8003f16 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8003f0a:	4905      	ldr	r1, [pc, #20]	; (8003f20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x124>)
 8003f0c:	68f8      	ldr	r0, [r7, #12]
 8003f0e:	f000 f847 	bl	8003fa0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8logerrorEPKc>
      return -1;
 8003f12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 8003f16:	4618      	mov	r0, r3
 8003f18:	3720      	adds	r7, #32
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	0800bac4 	.word	0x0800bac4

08003f24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b084      	sub	sp, #16
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	3304      	adds	r3, #4
 8003f32:	4618      	mov	r0, r3
 8003f34:	f7ff f867 	bl	8003006 <_ZN13STM32Hardware4timeEv>
 8003f38:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	4914      	ldr	r1, [pc, #80]	; (8003f94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x70>)
 8003f42:	fba1 1303 	umull	r1, r3, r1, r3
 8003f46:	099b      	lsrs	r3, r3, #6
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	1e5a      	subs	r2, r3, #1
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	611a      	str	r2, [r3, #16]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	6859      	ldr	r1, [r3, #4]
 8003f54:	68fa      	ldr	r2, [r7, #12]
 8003f56:	4b0f      	ldr	r3, [pc, #60]	; (8003f94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x70>)
 8003f58:	fba3 0302 	umull	r0, r3, r3, r2
 8003f5c:	099b      	lsrs	r3, r3, #6
 8003f5e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003f62:	fb00 f303 	mul.w	r3, r0, r3
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	4a0b      	ldr	r2, [pc, #44]	; (8003f98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x74>)
 8003f6a:	fb02 f303 	mul.w	r3, r2, r3
 8003f6e:	1aca      	subs	r2, r1, r3
 8003f70:	4b0a      	ldr	r3, [pc, #40]	; (8003f9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x78>)
 8003f72:	4413      	add	r3, r2
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	6153      	str	r3, [r2, #20]
    normalizeSecNSec(sec_offset, nsec_offset);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f103 0210 	add.w	r2, r3, #16
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	3314      	adds	r3, #20
 8003f82:	4619      	mov	r1, r3
 8003f84:	4610      	mov	r0, r2
 8003f86:	f7fc fafd 	bl	8000584 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8003f8a:	bf00      	nop
 8003f8c:	3710      	adds	r7, #16
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	10624dd3 	.word	0x10624dd3
 8003f98:	000f4240 	.word	0x000f4240
 8003f9c:	3b9aca00 	.word	0x3b9aca00

08003fa0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8003faa:	683a      	ldr	r2, [r7, #0]
 8003fac:	2103      	movs	r1, #3
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f000 f804 	bl	8003fbc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE3logEcPKc>
  }
 8003fb4:	bf00      	nop
 8003fb6:	3708      	adds	r7, #8
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE3logEcPKc>:
  void log(char byte, const char * msg)
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b088      	sub	sp, #32
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	460b      	mov	r3, r1
 8003fc6:	607a      	str	r2, [r7, #4]
 8003fc8:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8003fca:	f107 0314 	add.w	r3, r7, #20
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f7fe f92c 	bl	800222c <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8003fd4:	7afb      	ldrb	r3, [r7, #11]
 8003fd6:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f107 0214 	add.w	r2, r7, #20
 8003fe6:	2107      	movs	r1, #7
 8003fe8:	68f8      	ldr	r0, [r7, #12]
 8003fea:	4798      	blx	r3
  }
 8003fec:	bf00      	nop
 8003fee:	3720      	adds	r7, #32
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}

08003ff4 <_Z41__static_initialization_and_destruction_0ii>:
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b082      	sub	sp, #8
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2b01      	cmp	r3, #1
 8004002:	d11d      	bne.n	8004040 <_Z41__static_initialization_and_destruction_0ii+0x4c>
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800400a:	4293      	cmp	r3, r2
 800400c:	d118      	bne.n	8004040 <_Z41__static_initialization_and_destruction_0ii+0x4c>
HardwareSerial Serial(SERIAL2);
 800400e:	2100      	movs	r1, #0
 8004010:	480d      	ldr	r0, [pc, #52]	; (8004048 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8004012:	f7fe ff7a 	bl	8002f0a <_ZN14HardwareSerialC1E14Serial_TypeDef>
ros::NodeHandle nh;
 8004016:	480d      	ldr	r0, [pc, #52]	; (800404c <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8004018:	f7ff fa66 	bl	80034e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev>
ros::Time current_time;
 800401c:	480c      	ldr	r0, [pc, #48]	; (8004050 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800401e:	f7fe fe3b 	bl	8002c98 <_ZN3ros4TimeC1Ev>
ros::Subscriber<adam_msg::LEd> led_sub("led", LEDCallback);
 8004022:	2301      	movs	r3, #1
 8004024:	4a0b      	ldr	r2, [pc, #44]	; (8004054 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8004026:	490c      	ldr	r1, [pc, #48]	; (8004058 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8004028:	480c      	ldr	r0, [pc, #48]	; (800405c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 800402a:	f7ff faeb 	bl	8003604 <_ZN3ros10SubscriberIN8adam_msg3LEdEvEC1EPKcPFvRKS2_Ei>
std_msgs::String info_msg;
 800402e:	480c      	ldr	r0, [pc, #48]	; (8004060 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8004030:	f7fe fff4 	bl	800301c <_ZN8std_msgs6StringC1Ev>
ros::Publisher info_pub("mb/info", &info_msg);
 8004034:	2300      	movs	r3, #0
 8004036:	4a0a      	ldr	r2, [pc, #40]	; (8004060 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8004038:	490a      	ldr	r1, [pc, #40]	; (8004064 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 800403a:	480b      	ldr	r0, [pc, #44]	; (8004068 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 800403c:	f7fe ff2e 	bl	8002e9c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 8004040:	bf00      	nop
 8004042:	3708      	adds	r7, #8
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}
 8004048:	2000009c 	.word	0x2000009c
 800404c:	200000a8 	.word	0x200000a8
 8004050:	200009dc 	.word	0x200009dc
 8004054:	08003341 	.word	0x08003341
 8004058:	0800bb00 	.word	0x0800bb00
 800405c:	200009e8 	.word	0x200009e8
 8004060:	20000acc 	.word	0x20000acc
 8004064:	0800bb04 	.word	0x0800bb04
 8004068:	20000ad4 	.word	0x20000ad4

0800406c <_ZN3ros10SubscriberIN8adam_msg3LEdEvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 800406c:	b580      	push	{r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	330c      	adds	r3, #12
 800407a:	6839      	ldr	r1, [r7, #0]
 800407c:	4618      	mov	r0, r3
 800407e:	f7ff f8a7 	bl	80031d0 <_ZN8adam_msg3LEd11deserializeEPh>
    this->cb_(msg);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	695b      	ldr	r3, [r3, #20]
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	320c      	adds	r2, #12
 800408a:	4610      	mov	r0, r2
 800408c:	4798      	blx	r3
  }
 800408e:	bf00      	nop
 8004090:	3708      	adds	r7, #8
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}

08004096 <_ZN3ros10SubscriberIN8adam_msg3LEdEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8004096:	b480      	push	{r7}
 8004098:	b083      	sub	sp, #12
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	699b      	ldr	r3, [r3, #24]
  }
 80040a2:	4618      	mov	r0, r3
 80040a4:	370c      	adds	r7, #12
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr

080040ae <_ZN3ros10SubscriberIN8adam_msg3LEdEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 80040ae:	b580      	push	{r7, lr}
 80040b0:	b082      	sub	sp, #8
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	330c      	adds	r3, #12
 80040ba:	4618      	mov	r0, r3
 80040bc:	f7ff f8b8 	bl	8003230 <_ZN8adam_msg3LEd7getTypeEv>
 80040c0:	4603      	mov	r3, r0
  }
 80040c2:	4618      	mov	r0, r3
 80040c4:	3708      	adds	r7, #8
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}

080040ca <_ZN3ros10SubscriberIN8adam_msg3LEdEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 80040ca:	b580      	push	{r7, lr}
 80040cc:	b082      	sub	sp, #8
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	330c      	adds	r3, #12
 80040d6:	4618      	mov	r0, r3
 80040d8:	f7ff f8b8 	bl	800324c <_ZN8adam_msg3LEd6getMD5Ev>
 80040dc:	4603      	mov	r3, r0
  }
 80040de:	4618      	mov	r0, r3
 80040e0:	3708      	adds	r7, #8
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}

080040e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9connectedEv>:
  virtual bool connected()
 80040e6:	b480      	push	{r7}
 80040e8:	b083      	sub	sp, #12
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
    return configured_;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f893 38f8 	ldrb.w	r3, [r3, #2296]	; 0x8f8
  };
 80040f4:	4618      	mov	r0, r3
 80040f6:	370c      	adds	r7, #12
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr

08004100 <_GLOBAL__sub_I_sys>:
 8004100:	b580      	push	{r7, lr}
 8004102:	af00      	add	r7, sp, #0
 8004104:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004108:	2001      	movs	r0, #1
 800410a:	f7ff ff73 	bl	8003ff4 <_Z41__static_initialization_and_destruction_0ii>
 800410e:	bd80      	pop	{r7, pc}

08004110 <rb_init>:
 *              elements it can store will be size - 1.  Thus, size
 *              must be at least 2.
 *
 *  @param buf  Buffer to store items into
 */
static inline void rb_init(ring_buffer *rb, uint16_t size, uint8_t *buf) {
 8004110:	b480      	push	{r7}
 8004112:	b085      	sub	sp, #20
 8004114:	af00      	add	r7, sp, #0
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	460b      	mov	r3, r1
 800411a:	607a      	str	r2, [r7, #4]
 800411c:	817b      	strh	r3, [r7, #10]
    rb->head = 0;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2200      	movs	r2, #0
 8004122:	809a      	strh	r2, [r3, #4]
    rb->tail = 0;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2200      	movs	r2, #0
 8004128:	80da      	strh	r2, [r3, #6]
    rb->size = size - 1;
 800412a:	897b      	ldrh	r3, [r7, #10]
 800412c:	3b01      	subs	r3, #1
 800412e:	b29a      	uxth	r2, r3
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	811a      	strh	r2, [r3, #8]
    rb->buf = buf;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	601a      	str	r2, [r3, #0]
}
 800413a:	bf00      	nop
 800413c:	3714      	adds	r7, #20
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr

08004146 <rb_full_count>:

/**
 * @brief Return the number of elements stored in the ring buffer.
 * @param rb Buffer whose elements to count.
 */
static inline uint16_t rb_full_count(ring_buffer *rb) {
 8004146:	b480      	push	{r7}
 8004148:	b085      	sub	sp, #20
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
    ring_buffer *arb = rb;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	60bb      	str	r3, [r7, #8]
    int32_t size = arb->tail - arb->head;
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	88db      	ldrh	r3, [r3, #6]
 8004156:	461a      	mov	r2, r3
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	889b      	ldrh	r3, [r3, #4]
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	60fb      	str	r3, [r7, #12]
    if (arb->tail < arb->head) {
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	88da      	ldrh	r2, [r3, #6]
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	889b      	ldrh	r3, [r3, #4]
 8004168:	429a      	cmp	r2, r3
 800416a:	d205      	bcs.n	8004178 <rb_full_count+0x32>
        size += arb->size + 1;
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	891b      	ldrh	r3, [r3, #8]
 8004170:	3301      	adds	r3, #1
 8004172:	68fa      	ldr	r2, [r7, #12]
 8004174:	4413      	add	r3, r2
 8004176:	60fb      	str	r3, [r7, #12]
    }
    return (uint16_t)size;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	b29b      	uxth	r3, r3
}
 800417c:	4618      	mov	r0, r3
 800417e:	3714      	adds	r7, #20
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr

08004188 <rb_is_full>:
/**
 * @brief Returns true if and only if the ring buffer is full.
 * @param rb Buffer to test.
 */
static inline int rb_is_full(ring_buffer *rb) {
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
    return (rb->tail + 1 == rb->head) ||
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	88db      	ldrh	r3, [r3, #6]
 8004194:	3301      	adds	r3, #1
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	8892      	ldrh	r2, [r2, #4]
 800419a:	4293      	cmp	r3, r2
 800419c:	d009      	beq.n	80041b2 <rb_is_full+0x2a>
        (rb->tail == rb->size && rb->head == 0);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	88da      	ldrh	r2, [r3, #6]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	891b      	ldrh	r3, [r3, #8]
    return (rb->tail + 1 == rb->head) ||
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d105      	bne.n	80041b6 <rb_is_full+0x2e>
        (rb->tail == rb->size && rb->head == 0);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	889b      	ldrh	r3, [r3, #4]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d101      	bne.n	80041b6 <rb_is_full+0x2e>
    return (rb->tail + 1 == rb->head) ||
 80041b2:	2301      	movs	r3, #1
 80041b4:	e000      	b.n	80041b8 <rb_is_full+0x30>
 80041b6:	2300      	movs	r3, #0
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <rb_insert>:
/**
 * Append element onto the end of a ring buffer.
 * @param rb Buffer to append onto.
 * @param element Value to append.
 */
static inline void rb_insert(ring_buffer *rb, uint8_t element) {
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	460b      	mov	r3, r1
 80041ce:	70fb      	strb	r3, [r7, #3]
    rb->buf[rb->tail] = element;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	88d2      	ldrh	r2, [r2, #6]
 80041d8:	4413      	add	r3, r2
 80041da:	78fa      	ldrb	r2, [r7, #3]
 80041dc:	701a      	strb	r2, [r3, #0]
    rb->tail = (rb->tail == rb->size) ? 0 : rb->tail + 1;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	88da      	ldrh	r2, [r3, #6]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	891b      	ldrh	r3, [r3, #8]
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d004      	beq.n	80041f4 <rb_insert+0x30>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	88db      	ldrh	r3, [r3, #6]
 80041ee:	3301      	adds	r3, #1
 80041f0:	b29a      	uxth	r2, r3
 80041f2:	e000      	b.n	80041f6 <rb_insert+0x32>
 80041f4:	2200      	movs	r2, #0
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	80da      	strh	r2, [r3, #6]
}
 80041fa:	bf00      	nop
 80041fc:	370c      	adds	r7, #12
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr

08004206 <rb_remove>:

/**
 * @brief Remove and return the first item from a ring buffer.
 * @param rb Buffer to remove from, must contain at least one element.
 */
static inline uint8_t rb_remove(ring_buffer *rb) {
 8004206:	b480      	push	{r7}
 8004208:	b085      	sub	sp, #20
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
    uint8_t ch = rb->buf[rb->head];
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	8892      	ldrh	r2, [r2, #4]
 8004216:	4413      	add	r3, r2
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	73fb      	strb	r3, [r7, #15]
    rb->head = (rb->head == rb->size) ? 0 : rb->head + 1;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	889a      	ldrh	r2, [r3, #4]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	891b      	ldrh	r3, [r3, #8]
 8004224:	429a      	cmp	r2, r3
 8004226:	d004      	beq.n	8004232 <rb_remove+0x2c>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	889b      	ldrh	r3, [r3, #4]
 800422c:	3301      	adds	r3, #1
 800422e:	b29a      	uxth	r2, r3
 8004230:	e000      	b.n	8004234 <rb_remove+0x2e>
 8004232:	2200      	movs	r2, #0
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	809a      	strh	r2, [r3, #4]
    return ch;
 8004238:	7bfb      	ldrb	r3, [r7, #15]
}
 800423a:	4618      	mov	r0, r3
 800423c:	3714      	adds	r7, #20
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr

08004246 <rb_push_insert>:
 * @param rb Ring buffer to insert into.
 * @param element Value to insert into ring buffer.
 * @return On success, returns -1.  If an element was popped, returns
 *         the popped value.
 */
static inline int rb_push_insert(ring_buffer *rb, uint8_t element) {
 8004246:	b580      	push	{r7, lr}
 8004248:	b084      	sub	sp, #16
 800424a:	af00      	add	r7, sp, #0
 800424c:	6078      	str	r0, [r7, #4]
 800424e:	460b      	mov	r3, r1
 8004250:	70fb      	strb	r3, [r7, #3]
    int ret = -1;
 8004252:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004256:	60fb      	str	r3, [r7, #12]
    if (rb_is_full(rb)) {
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f7ff ff95 	bl	8004188 <rb_is_full>
 800425e:	4603      	mov	r3, r0
 8004260:	2b00      	cmp	r3, #0
 8004262:	bf14      	ite	ne
 8004264:	2301      	movne	r3, #1
 8004266:	2300      	moveq	r3, #0
 8004268:	b2db      	uxtb	r3, r3
 800426a:	2b00      	cmp	r3, #0
 800426c:	d004      	beq.n	8004278 <rb_push_insert+0x32>
        ret = rb_remove(rb);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f7ff ffc9 	bl	8004206 <rb_remove>
 8004274:	4603      	mov	r3, r0
 8004276:	60fb      	str	r3, [r7, #12]
    }
    rb_insert(rb, element);
 8004278:	78fb      	ldrb	r3, [r7, #3]
 800427a:	4619      	mov	r1, r3
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f7ff ffa1 	bl	80041c4 <rb_insert>
    return ret;
 8004282:	68fb      	ldr	r3, [r7, #12]
}
 8004284:	4618      	mov	r0, r3
 8004286:	3710      	adds	r7, #16
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <_ZN14HardwareSerial5beginEm>:
static ring_buffer rb1_recv;
static ring_buffer rb2_recv;
static ring_buffer rb3_recv;

void HardwareSerial::begin(uint32_t baud)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
	/** init ringbuf **/
	if(this->Serial == SERIAL2)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	781b      	ldrb	r3, [r3, #0]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d105      	bne.n	80042aa <_ZN14HardwareSerial5beginEm+0x1e>
		rb_init(&rb1_recv, sizeof(rxbuf), rxbuf);
 800429e:	4a0f      	ldr	r2, [pc, #60]	; (80042dc <_ZN14HardwareSerial5beginEm+0x50>)
 80042a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80042a4:	480e      	ldr	r0, [pc, #56]	; (80042e0 <_ZN14HardwareSerial5beginEm+0x54>)
 80042a6:	f7ff ff33 	bl	8004110 <rb_init>
	if(this->Serial == SERIAL3)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d105      	bne.n	80042be <_ZN14HardwareSerial5beginEm+0x32>
		rb_init(&rb2_recv, sizeof(rxbuf), rxbuf);
 80042b2:	4a0a      	ldr	r2, [pc, #40]	; (80042dc <_ZN14HardwareSerial5beginEm+0x50>)
 80042b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80042b8:	480a      	ldr	r0, [pc, #40]	; (80042e4 <_ZN14HardwareSerial5beginEm+0x58>)
 80042ba:	f7ff ff29 	bl	8004110 <rb_init>
	if(this->Serial == SERIAL4)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	d105      	bne.n	80042d2 <_ZN14HardwareSerial5beginEm+0x46>
		rb_init(&rb3_recv, sizeof(rxbuf), rxbuf);
 80042c6:	4a05      	ldr	r2, [pc, #20]	; (80042dc <_ZN14HardwareSerial5beginEm+0x50>)
 80042c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80042cc:	4806      	ldr	r0, [pc, #24]	; (80042e8 <_ZN14HardwareSerial5beginEm+0x5c>)
 80042ce:	f7ff ff1f 	bl	8004110 <rb_init>
}
 80042d2:	bf00      	nop
 80042d4:	3708      	adds	r7, #8
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	20000ae8 	.word	0x20000ae8
 80042e0:	20000ee8 	.word	0x20000ee8
 80042e4:	20000ef4 	.word	0x20000ef4
 80042e8:	20000f00 	.word	0x20000f00

080042ec <_ZN14HardwareSerial9availableEv>:

uint32_t HardwareSerial::available(void)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
	if(this->Serial == SERIAL2)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d104      	bne.n	8004306 <_ZN14HardwareSerial9availableEv+0x1a>
		return rb_full_count(&rb1_recv);
 80042fc:	480d      	ldr	r0, [pc, #52]	; (8004334 <_ZN14HardwareSerial9availableEv+0x48>)
 80042fe:	f7ff ff22 	bl	8004146 <rb_full_count>
 8004302:	4603      	mov	r3, r0
 8004304:	e012      	b.n	800432c <_ZN14HardwareSerial9availableEv+0x40>
	if(this->Serial == SERIAL3)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	781b      	ldrb	r3, [r3, #0]
 800430a:	2b01      	cmp	r3, #1
 800430c:	d104      	bne.n	8004318 <_ZN14HardwareSerial9availableEv+0x2c>
		return rb_full_count(&rb2_recv);
 800430e:	480a      	ldr	r0, [pc, #40]	; (8004338 <_ZN14HardwareSerial9availableEv+0x4c>)
 8004310:	f7ff ff19 	bl	8004146 <rb_full_count>
 8004314:	4603      	mov	r3, r0
 8004316:	e009      	b.n	800432c <_ZN14HardwareSerial9availableEv+0x40>
	if(this->Serial == SERIAL4)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	781b      	ldrb	r3, [r3, #0]
 800431c:	2b02      	cmp	r3, #2
 800431e:	d104      	bne.n	800432a <_ZN14HardwareSerial9availableEv+0x3e>
		return rb_full_count(&rb3_recv);
 8004320:	4806      	ldr	r0, [pc, #24]	; (800433c <_ZN14HardwareSerial9availableEv+0x50>)
 8004322:	f7ff ff10 	bl	8004146 <rb_full_count>
 8004326:	4603      	mov	r3, r0
 8004328:	e000      	b.n	800432c <_ZN14HardwareSerial9availableEv+0x40>

	return 0;
 800432a:	2300      	movs	r3, #0

}
 800432c:	4618      	mov	r0, r3
 800432e:	3708      	adds	r7, #8
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}
 8004334:	20000ee8 	.word	0x20000ee8
 8004338:	20000ef4 	.word	0x20000ef4
 800433c:	20000f00 	.word	0x20000f00

08004340 <_ZN14HardwareSerial4readEv>:

uint8_t HardwareSerial::read(void)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b082      	sub	sp, #8
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
	while(!this->available())
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f7ff ffcf 	bl	80042ec <_ZN14HardwareSerial9availableEv>
 800434e:	4603      	mov	r3, r0
 8004350:	2b00      	cmp	r3, #0
 8004352:	bf0c      	ite	eq
 8004354:	2301      	moveq	r3, #1
 8004356:	2300      	movne	r3, #0
 8004358:	b2db      	uxtb	r3, r3
 800435a:	2b00      	cmp	r3, #0
 800435c:	d000      	beq.n	8004360 <_ZN14HardwareSerial4readEv+0x20>
 800435e:	e7f3      	b.n	8004348 <_ZN14HardwareSerial4readEv+0x8>
		;
	if(this->Serial == SERIAL2)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d104      	bne.n	8004372 <_ZN14HardwareSerial4readEv+0x32>
		return rb_remove(&rb1_recv);
 8004368:	480d      	ldr	r0, [pc, #52]	; (80043a0 <_ZN14HardwareSerial4readEv+0x60>)
 800436a:	f7ff ff4c 	bl	8004206 <rb_remove>
 800436e:	4603      	mov	r3, r0
 8004370:	e012      	b.n	8004398 <_ZN14HardwareSerial4readEv+0x58>
	if(this->Serial == SERIAL3)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	781b      	ldrb	r3, [r3, #0]
 8004376:	2b01      	cmp	r3, #1
 8004378:	d104      	bne.n	8004384 <_ZN14HardwareSerial4readEv+0x44>
		return rb_remove(&rb2_recv);
 800437a:	480a      	ldr	r0, [pc, #40]	; (80043a4 <_ZN14HardwareSerial4readEv+0x64>)
 800437c:	f7ff ff43 	bl	8004206 <rb_remove>
 8004380:	4603      	mov	r3, r0
 8004382:	e009      	b.n	8004398 <_ZN14HardwareSerial4readEv+0x58>
	if(this->Serial == SERIAL4)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	2b02      	cmp	r3, #2
 800438a:	d104      	bne.n	8004396 <_ZN14HardwareSerial4readEv+0x56>
		return rb_remove(&rb3_recv);
 800438c:	4806      	ldr	r0, [pc, #24]	; (80043a8 <_ZN14HardwareSerial4readEv+0x68>)
 800438e:	f7ff ff3a 	bl	8004206 <rb_remove>
 8004392:	4603      	mov	r3, r0
 8004394:	e000      	b.n	8004398 <_ZN14HardwareSerial4readEv+0x58>

	return 0;
 8004396:	2300      	movs	r3, #0
}
 8004398:	4618      	mov	r0, r3
 800439a:	3708      	adds	r7, #8
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	20000ee8 	.word	0x20000ee8
 80043a4:	20000ef4 	.word	0x20000ef4
 80043a8:	20000f00 	.word	0x20000f00

080043ac <_Z10UU_PutCharP20__UART_HandleTypeDefh>:

void UU_PutChar(UART_HandleTypeDef* huartx, uint8_t ch)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	460b      	mov	r3, r1
 80043b6:	70fb      	strb	r3, [r7, #3]
	while(!(huartx->Instance->SR & USART_SR_TXE));
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	bf0c      	ite	eq
 80043c6:	2301      	moveq	r3, #1
 80043c8:	2300      	movne	r3, #0
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d000      	beq.n	80043d2 <_Z10UU_PutCharP20__UART_HandleTypeDefh+0x26>
 80043d0:	e7f2      	b.n	80043b8 <_Z10UU_PutCharP20__UART_HandleTypeDefh+0xc>
	huartx->Instance->DR = ch;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	78fa      	ldrb	r2, [r7, #3]
 80043d8:	605a      	str	r2, [r3, #4]
}
 80043da:	bf00      	nop
 80043dc:	370c      	adds	r7, #12
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr

080043e6 <_Z17USART_ReceiveDataP20__UART_HandleTypeDef>:

uint16_t USART_ReceiveData(UART_HandleTypeDef* huartx)
{
 80043e6:	b480      	push	{r7}
 80043e8:	b083      	sub	sp, #12
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	6078      	str	r0, [r7, #4]
	/* Receive Data */
	return (uint16_t)(huartx->Instance->DR & (uint16_t)0x01FF);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043fa:	b29b      	uxth	r3, r3
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	370c      	adds	r7, #12
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr

08004408 <_ZN14HardwareSerial5writeEh>:

uint32_t HardwareSerial::write(uint8_t ch)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b082      	sub	sp, #8
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	460b      	mov	r3, r1
 8004412:	70fb      	strb	r3, [r7, #3]
	//	USART_SendData(SERIAL_USART[this->Serial], ch);
	//	while(USART_GetFlagStatus(SERIAL_USART[this->Serial], USART_FLAG_TXE) == RESET);

	UU_PutChar(SERIAL_USART[this->Serial],ch);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	461a      	mov	r2, r3
 800441a:	4b06      	ldr	r3, [pc, #24]	; (8004434 <_ZN14HardwareSerial5writeEh+0x2c>)
 800441c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004420:	78fa      	ldrb	r2, [r7, #3]
 8004422:	4611      	mov	r1, r2
 8004424:	4618      	mov	r0, r3
 8004426:	f7ff ffc1 	bl	80043ac <_Z10UU_PutCharP20__UART_HandleTypeDefh>

	return 1;
 800442a:	2301      	movs	r3, #1
}
 800442c:	4618      	mov	r0, r3
 800442e:	3708      	adds	r7, #8
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}
 8004434:	20000000 	.word	0x20000000

08004438 <USART2_IRQHandler>:
#ifdef __cplusplus
extern "C" {
#endif

void USART2_IRQHandler(void)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b082      	sub	sp, #8
 800443c:	af00      	add	r7, sp, #0
	unsigned char data;

	data = USART_ReceiveData(&huart2);
 800443e:	4808      	ldr	r0, [pc, #32]	; (8004460 <USART2_IRQHandler+0x28>)
 8004440:	f7ff ffd1 	bl	80043e6 <_Z17USART_ReceiveDataP20__UART_HandleTypeDef>
 8004444:	4603      	mov	r3, r0
 8004446:	71fb      	strb	r3, [r7, #7]
	rb_push_insert(&rb1_recv, data);
 8004448:	79fb      	ldrb	r3, [r7, #7]
 800444a:	4619      	mov	r1, r3
 800444c:	4805      	ldr	r0, [pc, #20]	; (8004464 <USART2_IRQHandler+0x2c>)
 800444e:	f7ff fefa 	bl	8004246 <rb_push_insert>
	HAL_UART_IRQHandler(&huart2);
 8004452:	4803      	ldr	r0, [pc, #12]	; (8004460 <USART2_IRQHandler+0x28>)
 8004454:	f005 fe6c 	bl	800a130 <HAL_UART_IRQHandler>


}
 8004458:	bf00      	nop
 800445a:	3708      	adds	r7, #8
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}
 8004460:	2000160c 	.word	0x2000160c
 8004464:	20000ee8 	.word	0x20000ee8

08004468 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b082      	sub	sp, #8
 800446c:	af00      	add	r7, sp, #0
	unsigned char data;

	data = USART_ReceiveData(&huart3);
 800446e:	4808      	ldr	r0, [pc, #32]	; (8004490 <USART3_IRQHandler+0x28>)
 8004470:	f7ff ffb9 	bl	80043e6 <_Z17USART_ReceiveDataP20__UART_HandleTypeDef>
 8004474:	4603      	mov	r3, r0
 8004476:	71fb      	strb	r3, [r7, #7]
	rb_push_insert(&rb2_recv, data);
 8004478:	79fb      	ldrb	r3, [r7, #7]
 800447a:	4619      	mov	r1, r3
 800447c:	4805      	ldr	r0, [pc, #20]	; (8004494 <USART3_IRQHandler+0x2c>)
 800447e:	f7ff fee2 	bl	8004246 <rb_push_insert>
	HAL_UART_IRQHandler(&huart3);
 8004482:	4803      	ldr	r0, [pc, #12]	; (8004490 <USART3_IRQHandler+0x28>)
 8004484:	f005 fe54 	bl	800a130 <HAL_UART_IRQHandler>

}
 8004488:	bf00      	nop
 800448a:	3708      	adds	r7, #8
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}
 8004490:	200014cc 	.word	0x200014cc
 8004494:	20000ef4 	.word	0x20000ef4

08004498 <UART4_IRQHandler>:

void UART4_IRQHandler(void)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b082      	sub	sp, #8
 800449c:	af00      	add	r7, sp, #0
	unsigned char data;
	data = USART_ReceiveData(&huart4);
 800449e:	4808      	ldr	r0, [pc, #32]	; (80044c0 <UART4_IRQHandler+0x28>)
 80044a0:	f7ff ffa1 	bl	80043e6 <_Z17USART_ReceiveDataP20__UART_HandleTypeDef>
 80044a4:	4603      	mov	r3, r0
 80044a6:	71fb      	strb	r3, [r7, #7]
	rb_push_insert(&rb3_recv, data);
 80044a8:	79fb      	ldrb	r3, [r7, #7]
 80044aa:	4619      	mov	r1, r3
 80044ac:	4805      	ldr	r0, [pc, #20]	; (80044c4 <UART4_IRQHandler+0x2c>)
 80044ae:	f7ff feca 	bl	8004246 <rb_push_insert>
	HAL_UART_IRQHandler(&huart4);
 80044b2:	4803      	ldr	r0, [pc, #12]	; (80044c0 <UART4_IRQHandler+0x28>)
 80044b4:	f005 fe3c 	bl	800a130 <HAL_UART_IRQHandler>

}
 80044b8:	bf00      	nop
 80044ba:	3708      	adds	r7, #8
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	200015cc 	.word	0x200015cc
 80044c4:	20000f00 	.word	0x20000f00

080044c8 <millis>:
//#ifdef __cplusplus
//}
//#endif

uint32_t millis() 
{
 80044c8:	b480      	push	{r7}
 80044ca:	af00      	add	r7, sp, #0
	return _counter;
 80044cc:	4b03      	ldr	r3, [pc, #12]	; (80044dc <millis+0x14>)
 80044ce:	681b      	ldr	r3, [r3, #0]
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	2000244c 	.word	0x2000244c

080044e0 <SPI1_IRQHandler>:
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void SPI1_IRQHandler(void)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	af00      	add	r7, sp, #0

	HAL_SPI_IRQHandler(&hspi1);
 80044e4:	4802      	ldr	r0, [pc, #8]	; (80044f0 <SPI1_IRQHandler+0x10>)
 80044e6:	f004 fd77 	bl	8008fd8 <HAL_SPI_IRQHandler>

}
 80044ea:	bf00      	nop
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop
 80044f0:	20002564 	.word	0x20002564

080044f4 <SPI2_IRQHandler>:
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void SPI2_IRQHandler(void)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	af00      	add	r7, sp, #0

	HAL_SPI_IRQHandler(&hspi2);
 80044f8:	4802      	ldr	r0, [pc, #8]	; (8004504 <SPI2_IRQHandler+0x10>)
 80044fa:	f004 fd6d 	bl	8008fd8 <HAL_SPI_IRQHandler>

}
 80044fe:	bf00      	nop
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	20002450 	.word	0x20002450

08004508 <SPI3_IRQHandler>:
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void SPI3_IRQHandler(void)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	af00      	add	r7, sp, #0

	HAL_SPI_IRQHandler(&hspi3);
 800450c:	4802      	ldr	r0, [pc, #8]	; (8004518 <SPI3_IRQHandler+0x10>)
 800450e:	f004 fd63 	bl	8008fd8 <HAL_SPI_IRQHandler>

}
 8004512:	bf00      	nop
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	200024a8 	.word	0x200024a8

0800451c <Initialize>:
float L_laser,F_laser;

/************************************************/
/*		 	 	Functions		       		  	*/
/************************************************/
void Initialize(){
 800451c:	b580      	push	{r7, lr}
 800451e:	b086      	sub	sp, #24
 8004520:	af06      	add	r7, sp, #24
	/* MCU Configuration--------------------------------------------------------*/
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8004522:	f000 fddb 	bl	80050dc <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8004526:	f7fd fc29 	bl	8001d7c <SystemClock_Config>

	/* Initialize all configured peripherals */

	GPIOPinsInit (LED1_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 800452a:	2301      	movs	r3, #1
 800452c:	9300      	str	r3, [sp, #0]
 800452e:	2302      	movs	r3, #2
 8004530:	2201      	movs	r2, #1
 8004532:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004536:	48bf      	ldr	r0, [pc, #764]	; (8004834 <Initialize+0x318>)
 8004538:	f7fc fa1e 	bl	8000978 <GPIOPinsInit>
	GPIOPinsInit (LED2_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 800453c:	2301      	movs	r3, #1
 800453e:	9300      	str	r3, [sp, #0]
 8004540:	2302      	movs	r3, #2
 8004542:	2201      	movs	r2, #1
 8004544:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004548:	48ba      	ldr	r0, [pc, #744]	; (8004834 <Initialize+0x318>)
 800454a:	f7fc fa15 	bl	8000978 <GPIOPinsInit>
	GPIOPinsInit (LED3_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 800454e:	2301      	movs	r3, #1
 8004550:	9300      	str	r3, [sp, #0]
 8004552:	2302      	movs	r3, #2
 8004554:	2201      	movs	r2, #1
 8004556:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800455a:	48b6      	ldr	r0, [pc, #728]	; (8004834 <Initialize+0x318>)
 800455c:	f7fc fa0c 	bl	8000978 <GPIOPinsInit>

	GPIOPinsInit (PB1_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8004560:	2301      	movs	r3, #1
 8004562:	9300      	str	r3, [sp, #0]
 8004564:	2302      	movs	r3, #2
 8004566:	2200      	movs	r2, #0
 8004568:	2180      	movs	r1, #128	; 0x80
 800456a:	48b3      	ldr	r0, [pc, #716]	; (8004838 <Initialize+0x31c>)
 800456c:	f7fc fa04 	bl	8000978 <GPIOPinsInit>
	GPIOPinsInit (PB2_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8004570:	2301      	movs	r3, #1
 8004572:	9300      	str	r3, [sp, #0]
 8004574:	2302      	movs	r3, #2
 8004576:	2200      	movs	r2, #0
 8004578:	2101      	movs	r1, #1
 800457a:	48b0      	ldr	r0, [pc, #704]	; (800483c <Initialize+0x320>)
 800457c:	f7fc f9fc 	bl	8000978 <GPIOPinsInit>

	//	/*Normal IOs*/
	GPIOPinsInit (IP1_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8004580:	2301      	movs	r3, #1
 8004582:	9300      	str	r3, [sp, #0]
 8004584:	2301      	movs	r3, #1
 8004586:	2200      	movs	r2, #0
 8004588:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800458c:	48ab      	ldr	r0, [pc, #684]	; (800483c <Initialize+0x320>)
 800458e:	f7fc f9f3 	bl	8000978 <GPIOPinsInit>
	GPIOPinsInit (IP2_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8004592:	2301      	movs	r3, #1
 8004594:	9300      	str	r3, [sp, #0]
 8004596:	2301      	movs	r3, #1
 8004598:	2200      	movs	r2, #0
 800459a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800459e:	48a7      	ldr	r0, [pc, #668]	; (800483c <Initialize+0x320>)
 80045a0:	f7fc f9ea 	bl	8000978 <GPIOPinsInit>
	GPIOPinsInit (IP3_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 80045a4:	2301      	movs	r3, #1
 80045a6:	9300      	str	r3, [sp, #0]
 80045a8:	2301      	movs	r3, #1
 80045aa:	2200      	movs	r2, #0
 80045ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80045b0:	48a2      	ldr	r0, [pc, #648]	; (800483c <Initialize+0x320>)
 80045b2:	f7fc f9e1 	bl	8000978 <GPIOPinsInit>
	GPIOPinsInit (IP4_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 80045b6:	2301      	movs	r3, #1
 80045b8:	9300      	str	r3, [sp, #0]
 80045ba:	2301      	movs	r3, #1
 80045bc:	2200      	movs	r2, #0
 80045be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80045c2:	489e      	ldr	r0, [pc, #632]	; (800483c <Initialize+0x320>)
 80045c4:	f7fc f9d8 	bl	8000978 <GPIOPinsInit>
	GPIOPinsInit (IP5_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 80045c8:	2301      	movs	r3, #1
 80045ca:	9300      	str	r3, [sp, #0]
 80045cc:	2301      	movs	r3, #1
 80045ce:	2200      	movs	r2, #0
 80045d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80045d4:	4898      	ldr	r0, [pc, #608]	; (8004838 <Initialize+0x31c>)
 80045d6:	f7fc f9cf 	bl	8000978 <GPIOPinsInit>
	GPIOPinsInit (IP6_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 80045da:	2301      	movs	r3, #1
 80045dc:	9300      	str	r3, [sp, #0]
 80045de:	2301      	movs	r3, #1
 80045e0:	2200      	movs	r2, #0
 80045e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80045e6:	4894      	ldr	r0, [pc, #592]	; (8004838 <Initialize+0x31c>)
 80045e8:	f7fc f9c6 	bl	8000978 <GPIOPinsInit>
	GPIOPinsInit (IP7_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 80045ec:	2301      	movs	r3, #1
 80045ee:	9300      	str	r3, [sp, #0]
 80045f0:	2301      	movs	r3, #1
 80045f2:	2200      	movs	r2, #0
 80045f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80045f8:	4891      	ldr	r0, [pc, #580]	; (8004840 <Initialize+0x324>)
 80045fa:	f7fc f9bd 	bl	8000978 <GPIOPinsInit>
	GPIOPinsInit (IP8_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 80045fe:	2301      	movs	r3, #1
 8004600:	9300      	str	r3, [sp, #0]
 8004602:	2301      	movs	r3, #1
 8004604:	2200      	movs	r2, #0
 8004606:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800460a:	488d      	ldr	r0, [pc, #564]	; (8004840 <Initialize+0x324>)
 800460c:	f7fc f9b4 	bl	8000978 <GPIOPinsInit>
	GPIOPinsInit (IP9_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8004610:	2301      	movs	r3, #1
 8004612:	9300      	str	r3, [sp, #0]
 8004614:	2301      	movs	r3, #1
 8004616:	2200      	movs	r2, #0
 8004618:	f44f 7180 	mov.w	r1, #256	; 0x100
 800461c:	4885      	ldr	r0, [pc, #532]	; (8004834 <Initialize+0x318>)
 800461e:	f7fc f9ab 	bl	8000978 <GPIOPinsInit>
	GPIOPinsInit (IP10_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8004622:	2301      	movs	r3, #1
 8004624:	9300      	str	r3, [sp, #0]
 8004626:	2301      	movs	r3, #1
 8004628:	2200      	movs	r2, #0
 800462a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800462e:	4885      	ldr	r0, [pc, #532]	; (8004844 <Initialize+0x328>)
 8004630:	f7fc f9a2 	bl	8000978 <GPIOPinsInit>
	GPIOPinsInit (IP11_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8004634:	2301      	movs	r3, #1
 8004636:	9300      	str	r3, [sp, #0]
 8004638:	2301      	movs	r3, #1
 800463a:	2200      	movs	r2, #0
 800463c:	2108      	movs	r1, #8
 800463e:	4880      	ldr	r0, [pc, #512]	; (8004840 <Initialize+0x324>)
 8004640:	f7fc f99a 	bl	8000978 <GPIOPinsInit>
	GPIOPinsInit (IP12_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8004644:	2301      	movs	r3, #1
 8004646:	9300      	str	r3, [sp, #0]
 8004648:	2301      	movs	r3, #1
 800464a:	2200      	movs	r2, #0
 800464c:	2110      	movs	r1, #16
 800464e:	487c      	ldr	r0, [pc, #496]	; (8004840 <Initialize+0x324>)
 8004650:	f7fc f992 	bl	8000978 <GPIOPinsInit>
	GPIOPinsInit (IP13_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8004654:	2301      	movs	r3, #1
 8004656:	9300      	str	r3, [sp, #0]
 8004658:	2301      	movs	r3, #1
 800465a:	2200      	movs	r2, #0
 800465c:	2180      	movs	r1, #128	; 0x80
 800465e:	4878      	ldr	r0, [pc, #480]	; (8004840 <Initialize+0x324>)
 8004660:	f7fc f98a 	bl	8000978 <GPIOPinsInit>
	GPIOPinsInit (IP14_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8004664:	2301      	movs	r3, #1
 8004666:	9300      	str	r3, [sp, #0]
 8004668:	2301      	movs	r3, #1
 800466a:	2200      	movs	r2, #0
 800466c:	2120      	movs	r1, #32
 800466e:	4872      	ldr	r0, [pc, #456]	; (8004838 <Initialize+0x31c>)
 8004670:	f7fc f982 	bl	8000978 <GPIOPinsInit>
	GPIOPinsInit (IP15_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8004674:	2301      	movs	r3, #1
 8004676:	9300      	str	r3, [sp, #0]
 8004678:	2301      	movs	r3, #1
 800467a:	2200      	movs	r2, #0
 800467c:	2140      	movs	r1, #64	; 0x40
 800467e:	486e      	ldr	r0, [pc, #440]	; (8004838 <Initialize+0x31c>)
 8004680:	f7fc f97a 	bl	8000978 <GPIOPinsInit>

	/*IOs with ADC*/
	//	GPIOPinsInit (IP16_Analog3_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_NOPULL);
	//	GPIOPinsInit (IP16_Analog3_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_NOPULL);
	GPIOPinsInit (IP18_Analog3_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8004684:	2301      	movs	r3, #1
 8004686:	9300      	str	r3, [sp, #0]
 8004688:	2301      	movs	r3, #1
 800468a:	2200      	movs	r2, #0
 800468c:	2104      	movs	r1, #4
 800468e:	4869      	ldr	r0, [pc, #420]	; (8004834 <Initialize+0x318>)
 8004690:	f7fc f972 	bl	8000978 <GPIOPinsInit>
	GPIOPinsInit (IP19_Analog4_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8004694:	2301      	movs	r3, #1
 8004696:	9300      	str	r3, [sp, #0]
 8004698:	2301      	movs	r3, #1
 800469a:	2200      	movs	r2, #0
 800469c:	2108      	movs	r1, #8
 800469e:	4865      	ldr	r0, [pc, #404]	; (8004834 <Initialize+0x318>)
 80046a0:	f7fc f96a 	bl	8000978 <GPIOPinsInit>
	GPIOPinsInit (IP20_Analog7_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 80046a4:	2301      	movs	r3, #1
 80046a6:	9300      	str	r3, [sp, #0]
 80046a8:	2301      	movs	r3, #1
 80046aa:	2200      	movs	r2, #0
 80046ac:	2110      	movs	r1, #16
 80046ae:	4861      	ldr	r0, [pc, #388]	; (8004834 <Initialize+0x318>)
 80046b0:	f7fc f962 	bl	8000978 <GPIOPinsInit>
	GPIOPinsInit (IP21_Analog8_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 80046b4:	2301      	movs	r3, #1
 80046b6:	9300      	str	r3, [sp, #0]
 80046b8:	2301      	movs	r3, #1
 80046ba:	2200      	movs	r2, #0
 80046bc:	2120      	movs	r1, #32
 80046be:	485d      	ldr	r0, [pc, #372]	; (8004834 <Initialize+0x318>)
 80046c0:	f7fc f95a 	bl	8000978 <GPIOPinsInit>
	//
	MUXInit(&MUX, MUX1_INPUT_PIN, MUX1_S0_PIN, MUX1_S1_PIN, MUX1_S2_PIN);
 80046c4:	2310      	movs	r3, #16
 80046c6:	9304      	str	r3, [sp, #16]
 80046c8:	4b5c      	ldr	r3, [pc, #368]	; (800483c <Initialize+0x320>)
 80046ca:	9303      	str	r3, [sp, #12]
 80046cc:	2308      	movs	r3, #8
 80046ce:	9302      	str	r3, [sp, #8]
 80046d0:	4b5a      	ldr	r3, [pc, #360]	; (800483c <Initialize+0x320>)
 80046d2:	9301      	str	r3, [sp, #4]
 80046d4:	2304      	movs	r3, #4
 80046d6:	9300      	str	r3, [sp, #0]
 80046d8:	4b58      	ldr	r3, [pc, #352]	; (800483c <Initialize+0x320>)
 80046da:	2202      	movs	r2, #2
 80046dc:	4957      	ldr	r1, [pc, #348]	; (800483c <Initialize+0x320>)
 80046de:	485a      	ldr	r0, [pc, #360]	; (8004848 <Initialize+0x32c>)
 80046e0:	f7fc fa44 	bl	8000b6c <MUXInit>
	SHIFTREGInit (&SR, CASCADE_1, SR_SCK_PIN, SR_RCK_PIN, SR_SI_PIN);
 80046e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046e8:	9303      	str	r3, [sp, #12]
 80046ea:	4b54      	ldr	r3, [pc, #336]	; (800483c <Initialize+0x320>)
 80046ec:	9302      	str	r3, [sp, #8]
 80046ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80046f2:	9301      	str	r3, [sp, #4]
 80046f4:	4b51      	ldr	r3, [pc, #324]	; (800483c <Initialize+0x320>)
 80046f6:	9300      	str	r3, [sp, #0]
 80046f8:	2380      	movs	r3, #128	; 0x80
 80046fa:	4a50      	ldr	r2, [pc, #320]	; (800483c <Initialize+0x320>)
 80046fc:	2101      	movs	r1, #1
 80046fe:	4853      	ldr	r0, [pc, #332]	; (800484c <Initialize+0x330>)
 8004700:	f7fc fe2b 	bl	800135a <SHIFTREGInit>

	//
//	CANxInit(&hcan1,4,CAN_FILTER_FIFO0,0,0,13,0,0);
	//		CANxInit(&hcan2,4,CAN_FILTER_FIFO1,0,0,27,1,2);
	//
	UARTInit(&huart2,115200, ENABLE, 0,0);
 8004704:	2300      	movs	r3, #0
 8004706:	9300      	str	r3, [sp, #0]
 8004708:	2300      	movs	r3, #0
 800470a:	2201      	movs	r2, #1
 800470c:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8004710:	484f      	ldr	r0, [pc, #316]	; (8004850 <Initialize+0x334>)
 8004712:	f7fd fcaf 	bl	8002074 <UARTInit>
	//
//	QEIInit(&htim1,5,5);
	//		QEIInit(&htim4,5,5);
	//		QEIInit(&htim8,5,5);

	PWMTimeBaseInit(&htim3, 20000, 84);//50Hz PWM
 8004716:	2254      	movs	r2, #84	; 0x54
 8004718:	f644 6120 	movw	r1, #20000	; 0x4e20
 800471c:	484d      	ldr	r0, [pc, #308]	; (8004854 <Initialize+0x338>)
 800471e:	f7fc fb8f 	bl	8000e40 <PWMTimeBaseInit>
	PWMChannelConfig(&htim3, TIM_CHANNEL_3, TIM3_CHANNEL3_PIN);
 8004722:	2301      	movs	r3, #1
 8004724:	4a44      	ldr	r2, [pc, #272]	; (8004838 <Initialize+0x31c>)
 8004726:	2108      	movs	r1, #8
 8004728:	484a      	ldr	r0, [pc, #296]	; (8004854 <Initialize+0x338>)
 800472a:	f7fc fc6f 	bl	800100c <PWMChannelConfig>
	PWMChannelConfig(&htim3, TIM_CHANNEL_4 , TIM3_CHANNEL4_PIN);
 800472e:	2302      	movs	r3, #2
 8004730:	4a41      	ldr	r2, [pc, #260]	; (8004838 <Initialize+0x31c>)
 8004732:	210c      	movs	r1, #12
 8004734:	4847      	ldr	r0, [pc, #284]	; (8004854 <Initialize+0x338>)
 8004736:	f7fc fc69 	bl	800100c <PWMChannelConfig>

	PWMTimeBaseInit(&htim5, 20000, 84);//50Hz
 800473a:	2254      	movs	r2, #84	; 0x54
 800473c:	f644 6120 	movw	r1, #20000	; 0x4e20
 8004740:	4845      	ldr	r0, [pc, #276]	; (8004858 <Initialize+0x33c>)
 8004742:	f7fc fb7d 	bl	8000e40 <PWMTimeBaseInit>
	PWMChannelConfig(&htim5, TIM_CHANNEL_1, TIM5_CHANNEL1_PIN);
 8004746:	2301      	movs	r3, #1
 8004748:	4a3e      	ldr	r2, [pc, #248]	; (8004844 <Initialize+0x328>)
 800474a:	2100      	movs	r1, #0
 800474c:	4842      	ldr	r0, [pc, #264]	; (8004858 <Initialize+0x33c>)
 800474e:	f7fc fc5d 	bl	800100c <PWMChannelConfig>
	PWMChannelConfig(&htim5, TIM_CHANNEL_2, TIM5_CHANNEL2_PIN);
 8004752:	2302      	movs	r3, #2
 8004754:	4a3b      	ldr	r2, [pc, #236]	; (8004844 <Initialize+0x328>)
 8004756:	2104      	movs	r1, #4
 8004758:	483f      	ldr	r0, [pc, #252]	; (8004858 <Initialize+0x33c>)
 800475a:	f7fc fc57 	bl	800100c <PWMChannelConfig>
	PWMChannelConfig(&htim5, TIM_CHANNEL_3, TIM5_CHANNEL3_PIN);
 800475e:	2304      	movs	r3, #4
 8004760:	4a38      	ldr	r2, [pc, #224]	; (8004844 <Initialize+0x328>)
 8004762:	2108      	movs	r1, #8
 8004764:	483c      	ldr	r0, [pc, #240]	; (8004858 <Initialize+0x33c>)
 8004766:	f7fc fc51 	bl	800100c <PWMChannelConfig>
	PWMChannelConfig(&htim5, TIM_CHANNEL_4, TIM5_CHANNEL4_PIN);
 800476a:	2308      	movs	r3, #8
 800476c:	4a35      	ldr	r2, [pc, #212]	; (8004844 <Initialize+0x328>)
 800476e:	210c      	movs	r1, #12
 8004770:	4839      	ldr	r0, [pc, #228]	; (8004858 <Initialize+0x33c>)
 8004772:	f7fc fc4b 	bl	800100c <PWMChannelConfig>

	PWMTimeBaseInit(&htim9, 20000, 168);//50Hz PWM
 8004776:	22a8      	movs	r2, #168	; 0xa8
 8004778:	f644 6120 	movw	r1, #20000	; 0x4e20
 800477c:	4837      	ldr	r0, [pc, #220]	; (800485c <Initialize+0x340>)
 800477e:	f7fc fb5f 	bl	8000e40 <PWMTimeBaseInit>
	PWMChannelConfig(&htim9, TIM_CHANNEL_1, TIM9_CHANNEL1_PIN);
 8004782:	2320      	movs	r3, #32
 8004784:	4a2d      	ldr	r2, [pc, #180]	; (800483c <Initialize+0x320>)
 8004786:	2100      	movs	r1, #0
 8004788:	4834      	ldr	r0, [pc, #208]	; (800485c <Initialize+0x340>)
 800478a:	f7fc fc3f 	bl	800100c <PWMChannelConfig>
	PWMChannelConfig(&htim9, TIM_CHANNEL_2, TIM9_CHANNEL2_PIN);
 800478e:	2340      	movs	r3, #64	; 0x40
 8004790:	4a2a      	ldr	r2, [pc, #168]	; (800483c <Initialize+0x320>)
 8004792:	2104      	movs	r1, #4
 8004794:	4831      	ldr	r0, [pc, #196]	; (800485c <Initialize+0x340>)
 8004796:	f7fc fc39 	bl	800100c <PWMChannelConfig>

	BDCInit(&BDC1, &htim3, TIM_CHANNEL_4, SHIFTREG, &(SR.cast[1]), Bit6, Bit7);
 800479a:	2380      	movs	r3, #128	; 0x80
 800479c:	9302      	str	r3, [sp, #8]
 800479e:	2340      	movs	r3, #64	; 0x40
 80047a0:	9301      	str	r3, [sp, #4]
 80047a2:	4b2f      	ldr	r3, [pc, #188]	; (8004860 <Initialize+0x344>)
 80047a4:	9300      	str	r3, [sp, #0]
 80047a6:	2300      	movs	r3, #0
 80047a8:	220c      	movs	r2, #12
 80047aa:	492a      	ldr	r1, [pc, #168]	; (8004854 <Initialize+0x338>)
 80047ac:	482d      	ldr	r0, [pc, #180]	; (8004864 <Initialize+0x348>)
 80047ae:	f7fc f859 	bl	8000864 <BDCInit>
	BDCInit(&BDC2, &htim3, TIM_CHANNEL_3, SHIFTREG, &(SR.cast[1]), Bit4, Bit5);
 80047b2:	2320      	movs	r3, #32
 80047b4:	9302      	str	r3, [sp, #8]
 80047b6:	2310      	movs	r3, #16
 80047b8:	9301      	str	r3, [sp, #4]
 80047ba:	4b29      	ldr	r3, [pc, #164]	; (8004860 <Initialize+0x344>)
 80047bc:	9300      	str	r3, [sp, #0]
 80047be:	2300      	movs	r3, #0
 80047c0:	2208      	movs	r2, #8
 80047c2:	4924      	ldr	r1, [pc, #144]	; (8004854 <Initialize+0x338>)
 80047c4:	4828      	ldr	r0, [pc, #160]	; (8004868 <Initialize+0x34c>)
 80047c6:	f7fc f84d 	bl	8000864 <BDCInit>
	BDCInit(&BDC3, &htim9, TIM_CHANNEL_1, SHIFTREG, &(SR.cast[1]), Bit2, Bit3);
 80047ca:	2308      	movs	r3, #8
 80047cc:	9302      	str	r3, [sp, #8]
 80047ce:	2304      	movs	r3, #4
 80047d0:	9301      	str	r3, [sp, #4]
 80047d2:	4b23      	ldr	r3, [pc, #140]	; (8004860 <Initialize+0x344>)
 80047d4:	9300      	str	r3, [sp, #0]
 80047d6:	2300      	movs	r3, #0
 80047d8:	2200      	movs	r2, #0
 80047da:	4920      	ldr	r1, [pc, #128]	; (800485c <Initialize+0x340>)
 80047dc:	4823      	ldr	r0, [pc, #140]	; (800486c <Initialize+0x350>)
 80047de:	f7fc f841 	bl	8000864 <BDCInit>
	BDCInit(&BDC4, &htim9, TIM_CHANNEL_2, SHIFTREG, &(SR.cast[1]), Bit0, Bit1);
 80047e2:	2302      	movs	r3, #2
 80047e4:	9302      	str	r3, [sp, #8]
 80047e6:	2301      	movs	r3, #1
 80047e8:	9301      	str	r3, [sp, #4]
 80047ea:	4b1d      	ldr	r3, [pc, #116]	; (8004860 <Initialize+0x344>)
 80047ec:	9300      	str	r3, [sp, #0]
 80047ee:	2300      	movs	r3, #0
 80047f0:	2204      	movs	r2, #4
 80047f2:	491a      	ldr	r1, [pc, #104]	; (800485c <Initialize+0x340>)
 80047f4:	481e      	ldr	r0, [pc, #120]	; (8004870 <Initialize+0x354>)
 80047f6:	f7fc f835 	bl	8000864 <BDCInit>
	BDCInit(&BDC5, &htim5, TIM_CHANNEL_4, SHIFTREG, &(SR.cast[0]), Bit6, Bit7);
 80047fa:	2380      	movs	r3, #128	; 0x80
 80047fc:	9302      	str	r3, [sp, #8]
 80047fe:	2340      	movs	r3, #64	; 0x40
 8004800:	9301      	str	r3, [sp, #4]
 8004802:	4b1c      	ldr	r3, [pc, #112]	; (8004874 <Initialize+0x358>)
 8004804:	9300      	str	r3, [sp, #0]
 8004806:	2300      	movs	r3, #0
 8004808:	220c      	movs	r2, #12
 800480a:	4913      	ldr	r1, [pc, #76]	; (8004858 <Initialize+0x33c>)
 800480c:	481a      	ldr	r0, [pc, #104]	; (8004878 <Initialize+0x35c>)
 800480e:	f7fc f829 	bl	8000864 <BDCInit>
	BDCInit(&BDC6, &htim5, TIM_CHANNEL_3, SHIFTREG, &(SR.cast[0]), Bit4, Bit5);
 8004812:	2320      	movs	r3, #32
 8004814:	9302      	str	r3, [sp, #8]
 8004816:	2310      	movs	r3, #16
 8004818:	9301      	str	r3, [sp, #4]
 800481a:	4b16      	ldr	r3, [pc, #88]	; (8004874 <Initialize+0x358>)
 800481c:	9300      	str	r3, [sp, #0]
 800481e:	2300      	movs	r3, #0
 8004820:	2208      	movs	r2, #8
 8004822:	490d      	ldr	r1, [pc, #52]	; (8004858 <Initialize+0x33c>)
 8004824:	4815      	ldr	r0, [pc, #84]	; (800487c <Initialize+0x360>)
 8004826:	f7fc f81d 	bl	8000864 <BDCInit>
	BDCInit(&BDC7, &htim5, TIM_CHANNEL_2, SHIFTREG, &(SR.cast[0]), Bit2, Bit3);
 800482a:	2308      	movs	r3, #8
 800482c:	9302      	str	r3, [sp, #8]
 800482e:	2304      	movs	r3, #4
 8004830:	9301      	str	r3, [sp, #4]
 8004832:	e025      	b.n	8004880 <Initialize+0x364>
 8004834:	40020800 	.word	0x40020800
 8004838:	40020400 	.word	0x40020400
 800483c:	40021000 	.word	0x40021000
 8004840:	40020c00 	.word	0x40020c00
 8004844:	40020000 	.word	0x40020000
 8004848:	200028f4 	.word	0x200028f4
 800484c:	200028c4 	.word	0x200028c4
 8004850:	2000160c 	.word	0x2000160c
 8004854:	2000124c 	.word	0x2000124c
 8004858:	2000120c 	.word	0x2000120c
 800485c:	2000138c 	.word	0x2000138c
 8004860:	200028e0 	.word	0x200028e0
 8004864:	20002b28 	.word	0x20002b28
 8004868:	2000261c 	.word	0x2000261c
 800486c:	200025c4 	.word	0x200025c4
 8004870:	20002960 	.word	0x20002960
 8004874:	200028dc 	.word	0x200028dc
 8004878:	20002b04 	.word	0x20002b04
 800487c:	20002988 	.word	0x20002988
 8004880:	4b22      	ldr	r3, [pc, #136]	; (800490c <Initialize+0x3f0>)
 8004882:	9300      	str	r3, [sp, #0]
 8004884:	2300      	movs	r3, #0
 8004886:	2204      	movs	r2, #4
 8004888:	4921      	ldr	r1, [pc, #132]	; (8004910 <Initialize+0x3f4>)
 800488a:	4822      	ldr	r0, [pc, #136]	; (8004914 <Initialize+0x3f8>)
 800488c:	f7fb ffea 	bl	8000864 <BDCInit>
	BDCInit(&BDC8, &htim5, TIM_CHANNEL_1, SHIFTREG, &(SR.cast[0]), Bit0, Bit1);
 8004890:	2302      	movs	r3, #2
 8004892:	9302      	str	r3, [sp, #8]
 8004894:	2301      	movs	r3, #1
 8004896:	9301      	str	r3, [sp, #4]
 8004898:	4b1c      	ldr	r3, [pc, #112]	; (800490c <Initialize+0x3f0>)
 800489a:	9300      	str	r3, [sp, #0]
 800489c:	2300      	movs	r3, #0
 800489e:	2200      	movs	r2, #0
 80048a0:	491b      	ldr	r1, [pc, #108]	; (8004910 <Initialize+0x3f4>)
 80048a2:	481d      	ldr	r0, [pc, #116]	; (8004918 <Initialize+0x3fc>)
 80048a4:	f7fb ffde 	bl	8000864 <BDCInit>

	ADC_DMAxInit(&adc,&hadc1,&hdma_adc1,2,1,2);
 80048a8:	2302      	movs	r3, #2
 80048aa:	9301      	str	r3, [sp, #4]
 80048ac:	2301      	movs	r3, #1
 80048ae:	9300      	str	r3, [sp, #0]
 80048b0:	2302      	movs	r3, #2
 80048b2:	4a1a      	ldr	r2, [pc, #104]	; (800491c <Initialize+0x400>)
 80048b4:	491a      	ldr	r1, [pc, #104]	; (8004920 <Initialize+0x404>)
 80048b6:	481b      	ldr	r0, [pc, #108]	; (8004924 <Initialize+0x408>)
 80048b8:	f7fb fe90 	bl	80005dc <ADC_DMAxInit>
	ADC_Channel_Config(&adc,ADC_CHANNEL_10,IP16_Analog1_PIN);
 80048bc:	2301      	movs	r3, #1
 80048be:	4a1a      	ldr	r2, [pc, #104]	; (8004928 <Initialize+0x40c>)
 80048c0:	210a      	movs	r1, #10
 80048c2:	4818      	ldr	r0, [pc, #96]	; (8004924 <Initialize+0x408>)
 80048c4:	f7fb ff6a 	bl	800079c <ADC_Channel_Config>
	ADC_Channel_Config(&adc,ADC_CHANNEL_11,IP17_Analog2_PIN);
 80048c8:	2302      	movs	r3, #2
 80048ca:	4a17      	ldr	r2, [pc, #92]	; (8004928 <Initialize+0x40c>)
 80048cc:	210b      	movs	r1, #11
 80048ce:	4815      	ldr	r0, [pc, #84]	; (8004924 <Initialize+0x408>)
 80048d0:	f7fb ff64 	bl	800079c <ADC_Channel_Config>
	ADC_Channel_Config(&adc,ADC_CHANNEL_12,IP18_Analog3_PIN);
 80048d4:	2304      	movs	r3, #4
 80048d6:	4a14      	ldr	r2, [pc, #80]	; (8004928 <Initialize+0x40c>)
 80048d8:	210c      	movs	r1, #12
 80048da:	4812      	ldr	r0, [pc, #72]	; (8004924 <Initialize+0x408>)
 80048dc:	f7fb ff5e 	bl	800079c <ADC_Channel_Config>
	ADC_Channel_Config(&adc,ADC_CHANNEL_13,IP19_Analog4_PIN);
 80048e0:	2308      	movs	r3, #8
 80048e2:	4a11      	ldr	r2, [pc, #68]	; (8004928 <Initialize+0x40c>)
 80048e4:	210d      	movs	r1, #13
 80048e6:	480f      	ldr	r0, [pc, #60]	; (8004924 <Initialize+0x408>)
 80048e8:	f7fb ff58 	bl	800079c <ADC_Channel_Config>
	ADC_Channel_Config(&adc,ADC_CHANNEL_14,IP20_Analog7_PIN);
 80048ec:	2310      	movs	r3, #16
 80048ee:	4a0e      	ldr	r2, [pc, #56]	; (8004928 <Initialize+0x40c>)
 80048f0:	210e      	movs	r1, #14
 80048f2:	480c      	ldr	r0, [pc, #48]	; (8004924 <Initialize+0x408>)
 80048f4:	f7fb ff52 	bl	800079c <ADC_Channel_Config>
	ADC_Channel_Config(&adc,ADC_CHANNEL_15,IP21_Analog8_PIN);
 80048f8:	2320      	movs	r3, #32
 80048fa:	4a0b      	ldr	r2, [pc, #44]	; (8004928 <Initialize+0x40c>)
 80048fc:	210f      	movs	r1, #15
 80048fe:	4809      	ldr	r0, [pc, #36]	; (8004924 <Initialize+0x408>)
 8004900:	f7fb ff4c 	bl	800079c <ADC_Channel_Config>




}
 8004904:	bf00      	nop
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop
 800490c:	200028dc 	.word	0x200028dc
 8004910:	2000120c 	.word	0x2000120c
 8004914:	200029ac 	.word	0x200029ac
 8004918:	200025f0 	.word	0x200025f0
 800491c:	2000105c 	.word	0x2000105c
 8004920:	20000fcc 	.word	0x20000fcc
 8004924:	20002940 	.word	0x20002940
 8004928:	40020800 	.word	0x40020800

0800492c <CAN1_RX0_IRQHandler>:



void CAN1_RX0_IRQHandler()
{
 800492c:	b580      	push	{r7, lr}
 800492e:	af00      	add	r7, sp, #0

	HAL_CAN_IRQHandler(&hcan1);
 8004930:	4802      	ldr	r0, [pc, #8]	; (800493c <CAN1_RX0_IRQHandler+0x10>)
 8004932:	f001 f967 	bl	8005c04 <HAL_CAN_IRQHandler>

}
 8004936:	bf00      	nop
 8004938:	bd80      	pop	{r7, pc}
 800493a:	bf00      	nop
 800493c:	200016b8 	.word	0x200016b8

08004940 <CAN2_RX1_IRQHandler>:

void CAN2_RX1_IRQHandler()
{
 8004940:	b580      	push	{r7, lr}
 8004942:	af00      	add	r7, sp, #0

	HAL_CAN_IRQHandler(&hcan2);
 8004944:	4802      	ldr	r0, [pc, #8]	; (8004950 <CAN2_RX1_IRQHandler+0x10>)
 8004946:	f001 f95d 	bl	8005c04 <HAL_CAN_IRQHandler>

}
 800494a:	bf00      	nop
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	20001690 	.word	0x20001690

08004954 <CAN_PROCESS>:

void CAN_PROCESS(void){
 8004954:	b480      	push	{r7}
 8004956:	af00      	add	r7, sp, #0
	if(insData_receive[0] == 1){
 8004958:	4b18      	ldr	r3, [pc, #96]	; (80049bc <CAN_PROCESS+0x68>)
 800495a:	781b      	ldrb	r3, [r3, #0]
 800495c:	2b01      	cmp	r3, #1
 800495e:	d107      	bne.n	8004970 <CAN_PROCESS+0x1c>
		rns.RNS_data.common_instruction = insData_receive[1];
 8004960:	4b16      	ldr	r3, [pc, #88]	; (80049bc <CAN_PROCESS+0x68>)
 8004962:	785a      	ldrb	r2, [r3, #1]
 8004964:	4b16      	ldr	r3, [pc, #88]	; (80049c0 <CAN_PROCESS+0x6c>)
 8004966:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		insData_receive[0]=2;
 800496a:	4b14      	ldr	r3, [pc, #80]	; (80049bc <CAN_PROCESS+0x68>)
 800496c:	2202      	movs	r2, #2
 800496e:	701a      	strb	r2, [r3, #0]
	}
	if(insData_receive[0] == 17){
 8004970:	4b12      	ldr	r3, [pc, #72]	; (80049bc <CAN_PROCESS+0x68>)
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	2b11      	cmp	r3, #17
 8004976:	d11b      	bne.n	80049b0 <CAN_PROCESS+0x5c>
		if(buf2_flag == 1){
 8004978:	4b12      	ldr	r3, [pc, #72]	; (80049c4 <CAN_PROCESS+0x70>)
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	2b01      	cmp	r3, #1
 800497e:	d117      	bne.n	80049b0 <CAN_PROCESS+0x5c>
			rns.RNS_data.common_instruction = insData_receive[1];
 8004980:	4b0e      	ldr	r3, [pc, #56]	; (80049bc <CAN_PROCESS+0x68>)
 8004982:	785a      	ldrb	r2, [r3, #1]
 8004984:	4b0e      	ldr	r3, [pc, #56]	; (80049c0 <CAN_PROCESS+0x6c>)
 8004986:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			rns.RNS_data.common_buffer[0].data = buf1_receive[0].data;
 800498a:	4b0f      	ldr	r3, [pc, #60]	; (80049c8 <CAN_PROCESS+0x74>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a0c      	ldr	r2, [pc, #48]	; (80049c0 <CAN_PROCESS+0x6c>)
 8004990:	6553      	str	r3, [r2, #84]	; 0x54
			rns.RNS_data.common_buffer[1].data = buf1_receive[1].data;
 8004992:	4b0d      	ldr	r3, [pc, #52]	; (80049c8 <CAN_PROCESS+0x74>)
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	4a0a      	ldr	r2, [pc, #40]	; (80049c0 <CAN_PROCESS+0x6c>)
 8004998:	6593      	str	r3, [r2, #88]	; 0x58
			rns.RNS_data.common_buffer[2].data = buf2_receive[0].data;
 800499a:	4b0c      	ldr	r3, [pc, #48]	; (80049cc <CAN_PROCESS+0x78>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a08      	ldr	r2, [pc, #32]	; (80049c0 <CAN_PROCESS+0x6c>)
 80049a0:	65d3      	str	r3, [r2, #92]	; 0x5c
			rns.RNS_data.common_buffer[3].data = buf2_receive[1].data;
 80049a2:	4b0a      	ldr	r3, [pc, #40]	; (80049cc <CAN_PROCESS+0x78>)
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	4a06      	ldr	r2, [pc, #24]	; (80049c0 <CAN_PROCESS+0x6c>)
 80049a8:	6613      	str	r3, [r2, #96]	; 0x60
			insData_receive[0]=3;
 80049aa:	4b04      	ldr	r3, [pc, #16]	; (80049bc <CAN_PROCESS+0x68>)
 80049ac:	2203      	movs	r2, #3
 80049ae:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80049b0:	bf00      	nop
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr
 80049ba:	bf00      	nop
 80049bc:	200025c0 	.word	0x200025c0
 80049c0:	20002658 	.word	0x20002658
 80049c4:	20000f0c 	.word	0x20000f0c
 80049c8:	20002a40 	.word	0x20002a40
 80049cc:	20002a84 	.word	0x20002a84

080049d0 <HAL_CAN_RxFifo0MsgPendingCallback>:


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)

{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
	uint8_t aData[8];

	if(hcan == &hcan1){
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	4a4d      	ldr	r2, [pc, #308]	; (8004b10 <HAL_CAN_RxFifo0MsgPendingCallback+0x140>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d14a      	bne.n	8004a76 <HAL_CAN_RxFifo0MsgPendingCallback+0xa6>
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0 , &CAN1RxMessage, aData);
 80049e0:	f107 0308 	add.w	r3, r7, #8
 80049e4:	4a4b      	ldr	r2, [pc, #300]	; (8004b14 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 80049e6:	2100      	movs	r1, #0
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f000 ffd3 	bl	8005994 <HAL_CAN_GetRxMessage>
		//	sprintf(data,"%d %d %d %d %d %d %d %d \r\n",aData[0],aData[1],aData[2],aData[3],aData[4],aData[5],aData[6],aData[7]);
		switch(CAN1RxMessage.StdId){
 80049ee:	4b49      	ldr	r3, [pc, #292]	; (8004b14 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	3b14      	subs	r3, #20
 80049f4:	2b08      	cmp	r3, #8
 80049f6:	d836      	bhi.n	8004a66 <HAL_CAN_RxFifo0MsgPendingCallback+0x96>
 80049f8:	a201      	add	r2, pc, #4	; (adr r2, 8004a00 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 80049fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049fe:	bf00      	nop
 8004a00:	08004a25 	.word	0x08004a25
 8004a04:	08004a3d 	.word	0x08004a3d
 8004a08:	08004a4f 	.word	0x08004a4f
 8004a0c:	08004a67 	.word	0x08004a67
 8004a10:	08004a67 	.word	0x08004a67
 8004a14:	08004a67 	.word	0x08004a67
 8004a18:	08004a67 	.word	0x08004a67
 8004a1c:	08004a67 	.word	0x08004a67
 8004a20:	08004a67 	.word	0x08004a67
		case RNS_TO_mainboard:
			memcpy(&insData_receive, &aData, CAN1RxMessage.DLC);
 8004a24:	4b3b      	ldr	r3, [pc, #236]	; (8004b14 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 8004a26:	691a      	ldr	r2, [r3, #16]
 8004a28:	f107 0308 	add.w	r3, r7, #8
 8004a2c:	4619      	mov	r1, r3
 8004a2e:	483a      	ldr	r0, [pc, #232]	; (8004b18 <HAL_CAN_RxFifo0MsgPendingCallback+0x148>)
 8004a30:	f006 fad2 	bl	800afd8 <memcpy>
			buf2_flag = 0;
 8004a34:	4b39      	ldr	r3, [pc, #228]	; (8004b1c <HAL_CAN_RxFifo0MsgPendingCallback+0x14c>)
 8004a36:	2200      	movs	r2, #0
 8004a38:	701a      	strb	r2, [r3, #0]

			break;
 8004a3a:	e015      	b.n	8004a68 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>
		case RNS_TO_mainboard_buf1:
			memcpy(&buf1_receive, &aData, CAN1RxMessage.DLC);
 8004a3c:	4b35      	ldr	r3, [pc, #212]	; (8004b14 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 8004a3e:	691a      	ldr	r2, [r3, #16]
 8004a40:	f107 0308 	add.w	r3, r7, #8
 8004a44:	4619      	mov	r1, r3
 8004a46:	4836      	ldr	r0, [pc, #216]	; (8004b20 <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8004a48:	f006 fac6 	bl	800afd8 <memcpy>

			break;
 8004a4c:	e00c      	b.n	8004a68 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>
		case RNS_TO_mainboard_buf2:
			memcpy(&buf2_receive, &aData, CAN1RxMessage.DLC);
 8004a4e:	4b31      	ldr	r3, [pc, #196]	; (8004b14 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 8004a50:	691a      	ldr	r2, [r3, #16]
 8004a52:	f107 0308 	add.w	r3, r7, #8
 8004a56:	4619      	mov	r1, r3
 8004a58:	4832      	ldr	r0, [pc, #200]	; (8004b24 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 8004a5a:	f006 fabd 	bl	800afd8 <memcpy>
			buf2_flag = 1;
 8004a5e:	4b2f      	ldr	r3, [pc, #188]	; (8004b1c <HAL_CAN_RxFifo0MsgPendingCallback+0x14c>)
 8004a60:	2201      	movs	r2, #1
 8004a62:	701a      	strb	r2, [r3, #0]
			break;
 8004a64:	e000      	b.n	8004a68 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>
		case XY_feedback_state :
			break;
		default:
			break;
 8004a66:	bf00      	nop
		}
		CAN_PROCESS();
 8004a68:	f7ff ff74 	bl	8004954 <CAN_PROCESS>
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8004a6c:	2102      	movs	r1, #2
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f001 f8a2 	bl	8005bb8 <HAL_CAN_ActivateNotification>
			break;
		}
		CAN_PROCESS();
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
	}
}
 8004a74:	e048      	b.n	8004b08 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0 , &CAN2RxMessage, aData);
 8004a76:	f107 0308 	add.w	r3, r7, #8
 8004a7a:	4a2b      	ldr	r2, [pc, #172]	; (8004b28 <HAL_CAN_RxFifo0MsgPendingCallback+0x158>)
 8004a7c:	2100      	movs	r1, #0
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f000 ff88 	bl	8005994 <HAL_CAN_GetRxMessage>
		switch(CAN1RxMessage.StdId){
 8004a84:	4b23      	ldr	r3, [pc, #140]	; (8004b14 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	3b14      	subs	r3, #20
 8004a8a:	2b08      	cmp	r3, #8
 8004a8c:	d835      	bhi.n	8004afa <HAL_CAN_RxFifo0MsgPendingCallback+0x12a>
 8004a8e:	a201      	add	r2, pc, #4	; (adr r2, 8004a94 <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 8004a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a94:	08004ab9 	.word	0x08004ab9
 8004a98:	08004ad1 	.word	0x08004ad1
 8004a9c:	08004ae3 	.word	0x08004ae3
 8004aa0:	08004afb 	.word	0x08004afb
 8004aa4:	08004afb 	.word	0x08004afb
 8004aa8:	08004afb 	.word	0x08004afb
 8004aac:	08004afb 	.word	0x08004afb
 8004ab0:	08004afb 	.word	0x08004afb
 8004ab4:	08004afb 	.word	0x08004afb
			memcpy(&insData_receive, &aData, CAN2RxMessage.DLC);
 8004ab8:	4b1b      	ldr	r3, [pc, #108]	; (8004b28 <HAL_CAN_RxFifo0MsgPendingCallback+0x158>)
 8004aba:	691a      	ldr	r2, [r3, #16]
 8004abc:	f107 0308 	add.w	r3, r7, #8
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	4815      	ldr	r0, [pc, #84]	; (8004b18 <HAL_CAN_RxFifo0MsgPendingCallback+0x148>)
 8004ac4:	f006 fa88 	bl	800afd8 <memcpy>
			buf2_flag = 0;
 8004ac8:	4b14      	ldr	r3, [pc, #80]	; (8004b1c <HAL_CAN_RxFifo0MsgPendingCallback+0x14c>)
 8004aca:	2200      	movs	r2, #0
 8004acc:	701a      	strb	r2, [r3, #0]
			break;
 8004ace:	e015      	b.n	8004afc <HAL_CAN_RxFifo0MsgPendingCallback+0x12c>
			memcpy(&buf1_receive, &aData, CAN2RxMessage.DLC);
 8004ad0:	4b15      	ldr	r3, [pc, #84]	; (8004b28 <HAL_CAN_RxFifo0MsgPendingCallback+0x158>)
 8004ad2:	691a      	ldr	r2, [r3, #16]
 8004ad4:	f107 0308 	add.w	r3, r7, #8
 8004ad8:	4619      	mov	r1, r3
 8004ada:	4811      	ldr	r0, [pc, #68]	; (8004b20 <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8004adc:	f006 fa7c 	bl	800afd8 <memcpy>
			break;
 8004ae0:	e00c      	b.n	8004afc <HAL_CAN_RxFifo0MsgPendingCallback+0x12c>
			memcpy(&buf2_receive, &aData, CAN2RxMessage.DLC);
 8004ae2:	4b11      	ldr	r3, [pc, #68]	; (8004b28 <HAL_CAN_RxFifo0MsgPendingCallback+0x158>)
 8004ae4:	691a      	ldr	r2, [r3, #16]
 8004ae6:	f107 0308 	add.w	r3, r7, #8
 8004aea:	4619      	mov	r1, r3
 8004aec:	480d      	ldr	r0, [pc, #52]	; (8004b24 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 8004aee:	f006 fa73 	bl	800afd8 <memcpy>
			buf2_flag = 1;
 8004af2:	4b0a      	ldr	r3, [pc, #40]	; (8004b1c <HAL_CAN_RxFifo0MsgPendingCallback+0x14c>)
 8004af4:	2201      	movs	r2, #1
 8004af6:	701a      	strb	r2, [r3, #0]
			break;
 8004af8:	e000      	b.n	8004afc <HAL_CAN_RxFifo0MsgPendingCallback+0x12c>
			break;
 8004afa:	bf00      	nop
		CAN_PROCESS();
 8004afc:	f7ff ff2a 	bl	8004954 <CAN_PROCESS>
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 8004b00:	2110      	movs	r1, #16
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f001 f858 	bl	8005bb8 <HAL_CAN_ActivateNotification>
}
 8004b08:	bf00      	nop
 8004b0a:	3710      	adds	r7, #16
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	200016b8 	.word	0x200016b8
 8004b14:	200016e0 	.word	0x200016e0
 8004b18:	200025c0 	.word	0x200025c0
 8004b1c:	20000f0c 	.word	0x20000f0c
 8004b20:	20002a40 	.word	0x20002a40
 8004b24:	20002a84 	.word	0x20002a84
 8004b28:	2000164c 	.word	0x2000164c

08004b2c <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)

{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b084      	sub	sp, #16
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
	uint8_t aData[8];

	if(hcan == &hcan1){
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	4a4d      	ldr	r2, [pc, #308]	; (8004c6c <HAL_CAN_RxFifo1MsgPendingCallback+0x140>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d14a      	bne.n	8004bd2 <HAL_CAN_RxFifo1MsgPendingCallback+0xa6>

		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1 , &CAN1RxMessage, aData);
 8004b3c:	f107 0308 	add.w	r3, r7, #8
 8004b40:	4a4b      	ldr	r2, [pc, #300]	; (8004c70 <HAL_CAN_RxFifo1MsgPendingCallback+0x144>)
 8004b42:	2101      	movs	r1, #1
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f000 ff25 	bl	8005994 <HAL_CAN_GetRxMessage>
		//sprintf(data,"%d %d %d %d %d %d %d %d \r\n",aData[0],aData[1],aData[2],aData[3],aData[4],aData[5],aData[6],aData[7]);
		switch(CAN2RxMessage.StdId){
 8004b4a:	4b4a      	ldr	r3, [pc, #296]	; (8004c74 <HAL_CAN_RxFifo1MsgPendingCallback+0x148>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	3b14      	subs	r3, #20
 8004b50:	2b08      	cmp	r3, #8
 8004b52:	d836      	bhi.n	8004bc2 <HAL_CAN_RxFifo1MsgPendingCallback+0x96>
 8004b54:	a201      	add	r2, pc, #4	; (adr r2, 8004b5c <HAL_CAN_RxFifo1MsgPendingCallback+0x30>)
 8004b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b5a:	bf00      	nop
 8004b5c:	08004b81 	.word	0x08004b81
 8004b60:	08004b99 	.word	0x08004b99
 8004b64:	08004bab 	.word	0x08004bab
 8004b68:	08004bc3 	.word	0x08004bc3
 8004b6c:	08004bc3 	.word	0x08004bc3
 8004b70:	08004bc3 	.word	0x08004bc3
 8004b74:	08004bc3 	.word	0x08004bc3
 8004b78:	08004bc3 	.word	0x08004bc3
 8004b7c:	08004bc3 	.word	0x08004bc3
		case RNS_TO_mainboard:
			memcpy(&insData_receive, &aData, CAN1RxMessage.DLC);
 8004b80:	4b3b      	ldr	r3, [pc, #236]	; (8004c70 <HAL_CAN_RxFifo1MsgPendingCallback+0x144>)
 8004b82:	691a      	ldr	r2, [r3, #16]
 8004b84:	f107 0308 	add.w	r3, r7, #8
 8004b88:	4619      	mov	r1, r3
 8004b8a:	483b      	ldr	r0, [pc, #236]	; (8004c78 <HAL_CAN_RxFifo1MsgPendingCallback+0x14c>)
 8004b8c:	f006 fa24 	bl	800afd8 <memcpy>
			buf2_flag = 0;
 8004b90:	4b3a      	ldr	r3, [pc, #232]	; (8004c7c <HAL_CAN_RxFifo1MsgPendingCallback+0x150>)
 8004b92:	2200      	movs	r2, #0
 8004b94:	701a      	strb	r2, [r3, #0]

			break;
 8004b96:	e015      	b.n	8004bc4 <HAL_CAN_RxFifo1MsgPendingCallback+0x98>
		case RNS_TO_mainboard_buf1:
			memcpy(&buf1_receive, &aData, CAN1RxMessage.DLC);
 8004b98:	4b35      	ldr	r3, [pc, #212]	; (8004c70 <HAL_CAN_RxFifo1MsgPendingCallback+0x144>)
 8004b9a:	691a      	ldr	r2, [r3, #16]
 8004b9c:	f107 0308 	add.w	r3, r7, #8
 8004ba0:	4619      	mov	r1, r3
 8004ba2:	4837      	ldr	r0, [pc, #220]	; (8004c80 <HAL_CAN_RxFifo1MsgPendingCallback+0x154>)
 8004ba4:	f006 fa18 	bl	800afd8 <memcpy>

			break;
 8004ba8:	e00c      	b.n	8004bc4 <HAL_CAN_RxFifo1MsgPendingCallback+0x98>
		case RNS_TO_mainboard_buf2:
			memcpy(&buf2_receive, &aData, CAN1RxMessage.DLC);
 8004baa:	4b31      	ldr	r3, [pc, #196]	; (8004c70 <HAL_CAN_RxFifo1MsgPendingCallback+0x144>)
 8004bac:	691a      	ldr	r2, [r3, #16]
 8004bae:	f107 0308 	add.w	r3, r7, #8
 8004bb2:	4619      	mov	r1, r3
 8004bb4:	4833      	ldr	r0, [pc, #204]	; (8004c84 <HAL_CAN_RxFifo1MsgPendingCallback+0x158>)
 8004bb6:	f006 fa0f 	bl	800afd8 <memcpy>
			buf2_flag = 1;
 8004bba:	4b30      	ldr	r3, [pc, #192]	; (8004c7c <HAL_CAN_RxFifo1MsgPendingCallback+0x150>)
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	701a      	strb	r2, [r3, #0]
			break;
 8004bc0:	e000      	b.n	8004bc4 <HAL_CAN_RxFifo1MsgPendingCallback+0x98>
		case XY_feedback_state :
			break;
		default:
			break;
 8004bc2:	bf00      	nop
		}
		CAN_PROCESS();
 8004bc4:	f7ff fec6 	bl	8004954 <CAN_PROCESS>
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8004bc8:	2102      	movs	r1, #2
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f000 fff4 	bl	8005bb8 <HAL_CAN_ActivateNotification>
		}
		CAN_PROCESS();
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
	}

}
 8004bd0:	e048      	b.n	8004c64 <HAL_CAN_RxFifo1MsgPendingCallback+0x138>
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1 , &CAN2RxMessage, aData);
 8004bd2:	f107 0308 	add.w	r3, r7, #8
 8004bd6:	4a27      	ldr	r2, [pc, #156]	; (8004c74 <HAL_CAN_RxFifo1MsgPendingCallback+0x148>)
 8004bd8:	2101      	movs	r1, #1
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f000 feda 	bl	8005994 <HAL_CAN_GetRxMessage>
		switch(CAN2RxMessage.StdId){
 8004be0:	4b24      	ldr	r3, [pc, #144]	; (8004c74 <HAL_CAN_RxFifo1MsgPendingCallback+0x148>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	3b14      	subs	r3, #20
 8004be6:	2b08      	cmp	r3, #8
 8004be8:	d835      	bhi.n	8004c56 <HAL_CAN_RxFifo1MsgPendingCallback+0x12a>
 8004bea:	a201      	add	r2, pc, #4	; (adr r2, 8004bf0 <HAL_CAN_RxFifo1MsgPendingCallback+0xc4>)
 8004bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bf0:	08004c15 	.word	0x08004c15
 8004bf4:	08004c2d 	.word	0x08004c2d
 8004bf8:	08004c3f 	.word	0x08004c3f
 8004bfc:	08004c57 	.word	0x08004c57
 8004c00:	08004c57 	.word	0x08004c57
 8004c04:	08004c57 	.word	0x08004c57
 8004c08:	08004c57 	.word	0x08004c57
 8004c0c:	08004c57 	.word	0x08004c57
 8004c10:	08004c57 	.word	0x08004c57
			memcpy(&insData_receive, &aData, CAN2RxMessage.DLC);
 8004c14:	4b17      	ldr	r3, [pc, #92]	; (8004c74 <HAL_CAN_RxFifo1MsgPendingCallback+0x148>)
 8004c16:	691a      	ldr	r2, [r3, #16]
 8004c18:	f107 0308 	add.w	r3, r7, #8
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	4816      	ldr	r0, [pc, #88]	; (8004c78 <HAL_CAN_RxFifo1MsgPendingCallback+0x14c>)
 8004c20:	f006 f9da 	bl	800afd8 <memcpy>
			buf2_flag = 0;
 8004c24:	4b15      	ldr	r3, [pc, #84]	; (8004c7c <HAL_CAN_RxFifo1MsgPendingCallback+0x150>)
 8004c26:	2200      	movs	r2, #0
 8004c28:	701a      	strb	r2, [r3, #0]
			break;
 8004c2a:	e015      	b.n	8004c58 <HAL_CAN_RxFifo1MsgPendingCallback+0x12c>
			memcpy(&buf1_receive, &aData, CAN2RxMessage.DLC);
 8004c2c:	4b11      	ldr	r3, [pc, #68]	; (8004c74 <HAL_CAN_RxFifo1MsgPendingCallback+0x148>)
 8004c2e:	691a      	ldr	r2, [r3, #16]
 8004c30:	f107 0308 	add.w	r3, r7, #8
 8004c34:	4619      	mov	r1, r3
 8004c36:	4812      	ldr	r0, [pc, #72]	; (8004c80 <HAL_CAN_RxFifo1MsgPendingCallback+0x154>)
 8004c38:	f006 f9ce 	bl	800afd8 <memcpy>
			break;
 8004c3c:	e00c      	b.n	8004c58 <HAL_CAN_RxFifo1MsgPendingCallback+0x12c>
			memcpy(&buf2_receive, &aData, CAN2RxMessage.DLC);
 8004c3e:	4b0d      	ldr	r3, [pc, #52]	; (8004c74 <HAL_CAN_RxFifo1MsgPendingCallback+0x148>)
 8004c40:	691a      	ldr	r2, [r3, #16]
 8004c42:	f107 0308 	add.w	r3, r7, #8
 8004c46:	4619      	mov	r1, r3
 8004c48:	480e      	ldr	r0, [pc, #56]	; (8004c84 <HAL_CAN_RxFifo1MsgPendingCallback+0x158>)
 8004c4a:	f006 f9c5 	bl	800afd8 <memcpy>
			buf2_flag = 1;
 8004c4e:	4b0b      	ldr	r3, [pc, #44]	; (8004c7c <HAL_CAN_RxFifo1MsgPendingCallback+0x150>)
 8004c50:	2201      	movs	r2, #1
 8004c52:	701a      	strb	r2, [r3, #0]
			break;
 8004c54:	e000      	b.n	8004c58 <HAL_CAN_RxFifo1MsgPendingCallback+0x12c>
			break;
 8004c56:	bf00      	nop
		CAN_PROCESS();
 8004c58:	f7ff fe7c 	bl	8004954 <CAN_PROCESS>
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 8004c5c:	2110      	movs	r1, #16
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 ffaa 	bl	8005bb8 <HAL_CAN_ActivateNotification>
}
 8004c64:	bf00      	nop
 8004c66:	3710      	adds	r7, #16
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	200016b8 	.word	0x200016b8
 8004c70:	200016e0 	.word	0x200016e0
 8004c74:	2000164c 	.word	0x2000164c
 8004c78:	200025c0 	.word	0x200025c0
 8004c7c:	20000f0c 	.word	0x20000f0c
 8004c80:	20002a40 	.word	0x20002a40
 8004c84:	20002a84 	.word	0x20002a84

08004c88 <set>:
/*          Include Header                   */
/*********************************************/
#include "common.h"
#include "math.h"

void set() {
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b082      	sub	sp, #8
 8004c8c:	af02      	add	r7, sp, #8
	Initialize();
 8004c8e:	f7ff fc45 	bl	800451c <Initialize>
//	PSxInit(&ps4,&hi2c1);
	TIMxInit(&htim6, 20000, 84, 1, 0);
 8004c92:	2300      	movs	r3, #0
 8004c94:	9300      	str	r3, [sp, #0]
 8004c96:	2301      	movs	r3, #1
 8004c98:	2254      	movs	r2, #84	; 0x54
 8004c9a:	f644 6120 	movw	r1, #20000	; 0x4e20
 8004c9e:	4803      	ldr	r0, [pc, #12]	; (8004cac <set+0x24>)
 8004ca0:	f7fd f8d8 	bl	8001e54 <TIMxInit>
//	HAL_Delay(700);
//	RNS_config(&hcan1);
//	led3=!led3;
//	speed = 4;
//	Reset();
}
 8004ca4:	bf00      	nop
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}
 8004caa:	bf00      	nop
 8004cac:	2000130c 	.word	0x2000130c

08004cb0 <NMI_Handler>:
//int _counter=0;
/**
 * * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	af00      	add	r7, sp, #0

}
 8004cb4:	bf00      	nop
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr

08004cbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004cbe:	b480      	push	{r7}
 8004cc0:	af00      	add	r7, sp, #0

}
 8004cc2:	bf00      	nop
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	af00      	add	r7, sp, #0


}
 8004cd0:	bf00      	nop
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr

08004cda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004cda:	b480      	push	{r7}
 8004cdc:	af00      	add	r7, sp, #0

}
 8004cde:	bf00      	nop
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr

08004ce8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	af00      	add	r7, sp, #0


}
 8004cec:	bf00      	nop
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr

08004cf6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004cf6:	b480      	push	{r7}
 8004cf8:	af00      	add	r7, sp, #0

}
 8004cfa:	bf00      	nop
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr

08004d04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004d04:	b480      	push	{r7}
 8004d06:	af00      	add	r7, sp, #0

}
 8004d08:	bf00      	nop
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr

08004d12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004d12:	b480      	push	{r7}
 8004d14:	af00      	add	r7, sp, #0

}
 8004d16:	bf00      	nop
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr

08004d20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
//  */
void SysTick_Handler(void)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	af00      	add	r7, sp, #0

  HAL_IncTick();
 8004d24:	f000 fa2c 	bl	8005180 <HAL_IncTick>
  MUXUpdate(&MUX);
 8004d28:	4806      	ldr	r0, [pc, #24]	; (8004d44 <SysTick_Handler+0x24>)
 8004d2a:	f7fb ffcd 	bl	8000cc8 <MUXUpdate>
  SHIFTREGShift(&SR);
 8004d2e:	4806      	ldr	r0, [pc, #24]	; (8004d48 <SysTick_Handler+0x28>)
 8004d30:	f7fc fb54 	bl	80013dc <SHIFTREGShift>
  _counter++;
 8004d34:	4b05      	ldr	r3, [pc, #20]	; (8004d4c <SysTick_Handler+0x2c>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	3301      	adds	r3, #1
 8004d3a:	4a04      	ldr	r2, [pc, #16]	; (8004d4c <SysTick_Handler+0x2c>)
 8004d3c:	6013      	str	r3, [r2, #0]

}
 8004d3e:	bf00      	nop
 8004d40:	bd80      	pop	{r7, pc}
 8004d42:	bf00      	nop
 8004d44:	200028f4 	.word	0x200028f4
 8004d48:	200028c4 	.word	0x200028c4
 8004d4c:	2000244c 	.word	0x2000244c

08004d50 <TIM1_UP_TIM10_IRQHandler>:


void TIM1_UP_TIM10_IRQHandler(void)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	af00      	add	r7, sp, #0
#ifdef USED_QEI1
	if (htim1.Instance -> CR1 == 129)
 8004d54:	4b14      	ldr	r3, [pc, #80]	; (8004da8 <TIM1_UP_TIM10_IRQHandler+0x58>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	2b81      	cmp	r3, #129	; 0x81
 8004d5c:	d109      	bne.n	8004d72 <TIM1_UP_TIM10_IRQHandler+0x22>
		{
			BIOS_QEI1.signbit += 1;
 8004d5e:	4b13      	ldr	r3, [pc, #76]	; (8004dac <TIM1_UP_TIM10_IRQHandler+0x5c>)
 8004d60:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	3301      	adds	r3, #1
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	b21a      	sxth	r2, r3
 8004d6c:	4b0f      	ldr	r3, [pc, #60]	; (8004dac <TIM1_UP_TIM10_IRQHandler+0x5c>)
 8004d6e:	805a      	strh	r2, [r3, #2]
 8004d70:	e00d      	b.n	8004d8e <TIM1_UP_TIM10_IRQHandler+0x3e>
		}
	else if (htim1.Instance ->CR1 == 145)
 8004d72:	4b0d      	ldr	r3, [pc, #52]	; (8004da8 <TIM1_UP_TIM10_IRQHandler+0x58>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	2b91      	cmp	r3, #145	; 0x91
 8004d7a:	d108      	bne.n	8004d8e <TIM1_UP_TIM10_IRQHandler+0x3e>
	{
		BIOS_QEI1.signbit -= 1;
 8004d7c:	4b0b      	ldr	r3, [pc, #44]	; (8004dac <TIM1_UP_TIM10_IRQHandler+0x5c>)
 8004d7e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	3b01      	subs	r3, #1
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	b21a      	sxth	r2, r3
 8004d8a:	4b08      	ldr	r3, [pc, #32]	; (8004dac <TIM1_UP_TIM10_IRQHandler+0x5c>)
 8004d8c:	805a      	strh	r2, [r3, #2]
	}
	htim1.Instance -> SR = 0;
 8004d8e:	4b06      	ldr	r3, [pc, #24]	; (8004da8 <TIM1_UP_TIM10_IRQHandler+0x58>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	2200      	movs	r2, #0
 8004d94:	611a      	str	r2, [r3, #16]
	QEIDelay(200);
 8004d96:	20c8      	movs	r0, #200	; 0xc8
 8004d98:	f7fc fac4 	bl	8001324 <QEIDelay>
#else
	HAL_TIM_IRQHandler(&htim1);
#endif
	HAL_TIM_IRQHandler(&htim10);
 8004d9c:	4804      	ldr	r0, [pc, #16]	; (8004db0 <TIM1_UP_TIM10_IRQHandler+0x60>)
 8004d9e:	f004 fb15 	bl	80093cc <HAL_TIM_IRQHandler>
   return;
 8004da2:	bf00      	nop
}
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop
 8004da8:	2000134c 	.word	0x2000134c
 8004dac:	20001120 	.word	0x20001120
 8004db0:	200011cc 	.word	0x200011cc

08004db4 <TIM2_IRQHandler>:


void TIM2_IRQHandler(void)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	af00      	add	r7, sp, #0
#ifdef USED_QEI2
	if (htim2.Instance -> CR1 == 129)
 8004db8:	4b12      	ldr	r3, [pc, #72]	; (8004e04 <TIM2_IRQHandler+0x50>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	2b81      	cmp	r3, #129	; 0x81
 8004dc0:	d109      	bne.n	8004dd6 <TIM2_IRQHandler+0x22>
	{
		BIOS_QEI2.signbit += 1;
 8004dc2:	4b11      	ldr	r3, [pc, #68]	; (8004e08 <TIM2_IRQHandler+0x54>)
 8004dc4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	3301      	adds	r3, #1
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	b21a      	sxth	r2, r3
 8004dd0:	4b0d      	ldr	r3, [pc, #52]	; (8004e08 <TIM2_IRQHandler+0x54>)
 8004dd2:	805a      	strh	r2, [r3, #2]
 8004dd4:	e00d      	b.n	8004df2 <TIM2_IRQHandler+0x3e>
	}
	else if (htim2.Instance ->CR1 == 145)
 8004dd6:	4b0b      	ldr	r3, [pc, #44]	; (8004e04 <TIM2_IRQHandler+0x50>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	2b91      	cmp	r3, #145	; 0x91
 8004dde:	d108      	bne.n	8004df2 <TIM2_IRQHandler+0x3e>
	{
		BIOS_QEI2.signbit -= 1;
 8004de0:	4b09      	ldr	r3, [pc, #36]	; (8004e08 <TIM2_IRQHandler+0x54>)
 8004de2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	3b01      	subs	r3, #1
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	b21a      	sxth	r2, r3
 8004dee:	4b06      	ldr	r3, [pc, #24]	; (8004e08 <TIM2_IRQHandler+0x54>)
 8004df0:	805a      	strh	r2, [r3, #2]
	}
	htim2.Instance -> SR = 0;
 8004df2:	4b04      	ldr	r3, [pc, #16]	; (8004e04 <TIM2_IRQHandler+0x50>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	2200      	movs	r2, #0
 8004df8:	611a      	str	r2, [r3, #16]
	QEIDelay(100);
 8004dfa:	2064      	movs	r0, #100	; 0x64
 8004dfc:	f7fc fa92 	bl	8001324 <QEIDelay>
#else
	 HAL_TIM_IRQHandler(&htim2);
   return;
#endif
}
 8004e00:	bf00      	nop
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	200013cc 	.word	0x200013cc
 8004e08:	20001124 	.word	0x20001124

08004e0c <TIM3_IRQHandler>:


void TIM3_IRQHandler(void)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	af00      	add	r7, sp, #0
#ifdef USED_QEI3
	if (htim3.Instance -> CR1 == 129)
 8004e10:	4b12      	ldr	r3, [pc, #72]	; (8004e5c <TIM3_IRQHandler+0x50>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	2b81      	cmp	r3, #129	; 0x81
 8004e18:	d109      	bne.n	8004e2e <TIM3_IRQHandler+0x22>
	{
		BIOS_QEI3.signbit += 1;
 8004e1a:	4b11      	ldr	r3, [pc, #68]	; (8004e60 <TIM3_IRQHandler+0x54>)
 8004e1c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	3301      	adds	r3, #1
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	b21a      	sxth	r2, r3
 8004e28:	4b0d      	ldr	r3, [pc, #52]	; (8004e60 <TIM3_IRQHandler+0x54>)
 8004e2a:	805a      	strh	r2, [r3, #2]
 8004e2c:	e00d      	b.n	8004e4a <TIM3_IRQHandler+0x3e>
	}
	else if (htim3.Instance ->CR1 == 145)
 8004e2e:	4b0b      	ldr	r3, [pc, #44]	; (8004e5c <TIM3_IRQHandler+0x50>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	2b91      	cmp	r3, #145	; 0x91
 8004e36:	d108      	bne.n	8004e4a <TIM3_IRQHandler+0x3e>
	{
		BIOS_QEI3.signbit -= 1;
 8004e38:	4b09      	ldr	r3, [pc, #36]	; (8004e60 <TIM3_IRQHandler+0x54>)
 8004e3a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	3b01      	subs	r3, #1
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	b21a      	sxth	r2, r3
 8004e46:	4b06      	ldr	r3, [pc, #24]	; (8004e60 <TIM3_IRQHandler+0x54>)
 8004e48:	805a      	strh	r2, [r3, #2]
	}
	htim3.Instance -> SR = 0;
 8004e4a:	4b04      	ldr	r3, [pc, #16]	; (8004e5c <TIM3_IRQHandler+0x50>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	611a      	str	r2, [r3, #16]
	QEIDelay(100);
 8004e52:	2064      	movs	r0, #100	; 0x64
 8004e54:	f7fc fa66 	bl	8001324 <QEIDelay>
#else
	 HAL_TIM_IRQHandler(&htim3);
   return;
#endif
}
 8004e58:	bf00      	nop
 8004e5a:	bd80      	pop	{r7, pc}
 8004e5c:	2000124c 	.word	0x2000124c
 8004e60:	2000111c 	.word	0x2000111c

08004e64 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	af00      	add	r7, sp, #0
#ifdef USED_QEI4
  if (htim4.Instance -> CR1 == 129)
 8004e68:	4b12      	ldr	r3, [pc, #72]	; (8004eb4 <TIM4_IRQHandler+0x50>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	2b81      	cmp	r3, #129	; 0x81
 8004e70:	d109      	bne.n	8004e86 <TIM4_IRQHandler+0x22>
  {
		BIOS_QEI4.signbit += 1;
 8004e72:	4b11      	ldr	r3, [pc, #68]	; (8004eb8 <TIM4_IRQHandler+0x54>)
 8004e74:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	3301      	adds	r3, #1
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	b21a      	sxth	r2, r3
 8004e80:	4b0d      	ldr	r3, [pc, #52]	; (8004eb8 <TIM4_IRQHandler+0x54>)
 8004e82:	805a      	strh	r2, [r3, #2]
 8004e84:	e00d      	b.n	8004ea2 <TIM4_IRQHandler+0x3e>
  }
  else if (htim4.Instance ->CR1 == 145)
 8004e86:	4b0b      	ldr	r3, [pc, #44]	; (8004eb4 <TIM4_IRQHandler+0x50>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	2b91      	cmp	r3, #145	; 0x91
 8004e8e:	d108      	bne.n	8004ea2 <TIM4_IRQHandler+0x3e>
  {
		BIOS_QEI4.signbit -= 1;
 8004e90:	4b09      	ldr	r3, [pc, #36]	; (8004eb8 <TIM4_IRQHandler+0x54>)
 8004e92:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	3b01      	subs	r3, #1
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	b21a      	sxth	r2, r3
 8004e9e:	4b06      	ldr	r3, [pc, #24]	; (8004eb8 <TIM4_IRQHandler+0x54>)
 8004ea0:	805a      	strh	r2, [r3, #2]
  }
  htim4.Instance -> SR = 0;
 8004ea2:	4b04      	ldr	r3, [pc, #16]	; (8004eb4 <TIM4_IRQHandler+0x50>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	611a      	str	r2, [r3, #16]
  QEIDelay(100);
 8004eaa:	2064      	movs	r0, #100	; 0x64
 8004eac:	f7fc fa3a 	bl	8001324 <QEIDelay>
#else
      HAL_TIM_IRQHandler(&htim4);
   return;
#endif
}
 8004eb0:	bf00      	nop
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	2000118c 	.word	0x2000118c
 8004eb8:	20001144 	.word	0x20001144

08004ebc <TIM5_IRQHandler>:

void TIM5_IRQHandler(void)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	af00      	add	r7, sp, #0
#ifdef USED_QEI5
   if (htim5.Instance -> CR1 == 129)
 8004ec0:	4b12      	ldr	r3, [pc, #72]	; (8004f0c <TIM5_IRQHandler+0x50>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	2b81      	cmp	r3, #129	; 0x81
 8004ec8:	d109      	bne.n	8004ede <TIM5_IRQHandler+0x22>
	  {
			BIOS_QEI5.signbit += 1;
 8004eca:	4b11      	ldr	r3, [pc, #68]	; (8004f10 <TIM5_IRQHandler+0x54>)
 8004ecc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	3301      	adds	r3, #1
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	b21a      	sxth	r2, r3
 8004ed8:	4b0d      	ldr	r3, [pc, #52]	; (8004f10 <TIM5_IRQHandler+0x54>)
 8004eda:	805a      	strh	r2, [r3, #2]
 8004edc:	e00d      	b.n	8004efa <TIM5_IRQHandler+0x3e>
	  }
	  else if (htim5.Instance ->CR1 == 145)
 8004ede:	4b0b      	ldr	r3, [pc, #44]	; (8004f0c <TIM5_IRQHandler+0x50>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	2b91      	cmp	r3, #145	; 0x91
 8004ee6:	d108      	bne.n	8004efa <TIM5_IRQHandler+0x3e>
	  {
			BIOS_QEI5.signbit -= 1;
 8004ee8:	4b09      	ldr	r3, [pc, #36]	; (8004f10 <TIM5_IRQHandler+0x54>)
 8004eea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	3b01      	subs	r3, #1
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	b21a      	sxth	r2, r3
 8004ef6:	4b06      	ldr	r3, [pc, #24]	; (8004f10 <TIM5_IRQHandler+0x54>)
 8004ef8:	805a      	strh	r2, [r3, #2]
	  }
	  htim5.Instance -> SR = 0;
 8004efa:	4b04      	ldr	r3, [pc, #16]	; (8004f0c <TIM5_IRQHandler+0x50>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	2200      	movs	r2, #0
 8004f00:	611a      	str	r2, [r3, #16]
	  QEIDelay(100);
 8004f02:	2064      	movs	r0, #100	; 0x64
 8004f04:	f7fc fa0e 	bl	8001324 <QEIDelay>
#else
	  HAL_TIM_IRQHandler(&htim5);
   return;
#endif
}
 8004f08:	bf00      	nop
 8004f0a:	bd80      	pop	{r7, pc}
 8004f0c:	2000120c 	.word	0x2000120c
 8004f10:	20001140 	.word	0x20001140

08004f14 <TIM8_UP_TIM13_IRQHandler>:

void TIM8_UP_TIM13_IRQHandler(void)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	af00      	add	r7, sp, #0
#ifdef USED_QEI6
	if (htim8.Instance -> CR1 == 129)
 8004f18:	4b14      	ldr	r3, [pc, #80]	; (8004f6c <TIM8_UP_TIM13_IRQHandler+0x58>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	2b81      	cmp	r3, #129	; 0x81
 8004f20:	d109      	bne.n	8004f36 <TIM8_UP_TIM13_IRQHandler+0x22>
	{
		BIOS_QEI6.signbit += 1;
 8004f22:	4b13      	ldr	r3, [pc, #76]	; (8004f70 <TIM8_UP_TIM13_IRQHandler+0x5c>)
 8004f24:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	b21a      	sxth	r2, r3
 8004f30:	4b0f      	ldr	r3, [pc, #60]	; (8004f70 <TIM8_UP_TIM13_IRQHandler+0x5c>)
 8004f32:	805a      	strh	r2, [r3, #2]
 8004f34:	e00d      	b.n	8004f52 <TIM8_UP_TIM13_IRQHandler+0x3e>
	}
	else if (htim8.Instance ->CR1 == 145)
 8004f36:	4b0d      	ldr	r3, [pc, #52]	; (8004f6c <TIM8_UP_TIM13_IRQHandler+0x58>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	2b91      	cmp	r3, #145	; 0x91
 8004f3e:	d108      	bne.n	8004f52 <TIM8_UP_TIM13_IRQHandler+0x3e>
	{
		BIOS_QEI6.signbit -= 1;
 8004f40:	4b0b      	ldr	r3, [pc, #44]	; (8004f70 <TIM8_UP_TIM13_IRQHandler+0x5c>)
 8004f42:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	3b01      	subs	r3, #1
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	b21a      	sxth	r2, r3
 8004f4e:	4b08      	ldr	r3, [pc, #32]	; (8004f70 <TIM8_UP_TIM13_IRQHandler+0x5c>)
 8004f50:	805a      	strh	r2, [r3, #2]
	}
	htim8.Instance -> SR = 0;
 8004f52:	4b06      	ldr	r3, [pc, #24]	; (8004f6c <TIM8_UP_TIM13_IRQHandler+0x58>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	2200      	movs	r2, #0
 8004f58:	611a      	str	r2, [r3, #16]
	QEIDelay(200);
 8004f5a:	20c8      	movs	r0, #200	; 0xc8
 8004f5c:	f7fc f9e2 	bl	8001324 <QEIDelay>
#else
	HAL_TIM_IRQHandler(&htim8);
#endif
	HAL_TIM_IRQHandler(&htim8);
 8004f60:	4802      	ldr	r0, [pc, #8]	; (8004f6c <TIM8_UP_TIM13_IRQHandler+0x58>)
 8004f62:	f004 fa33 	bl	80093cc <HAL_TIM_IRQHandler>
}
 8004f66:	bf00      	nop
 8004f68:	bd80      	pop	{r7, pc}
 8004f6a:	bf00      	nop
 8004f6c:	2000114c 	.word	0x2000114c
 8004f70:	20001148 	.word	0x20001148

08004f74 <HAL_I2C_MasterRxCpltCallback>:


//Callback for I2C RXBuffer
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b083      	sub	sp, #12
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
//	 PSxConnect(&ps4);
}
 8004f7c:	bf00      	nop
 8004f7e:	370c      	adds	r7, #12
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr

08004f88 <HAL_ADC_ConvCpltCallback>:

//Callback for ADC Buffer
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]

}
 8004f90:	bf00      	nop
 8004f92:	370c      	adds	r7, #12
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr

08004f9c <DMA2_Stream2_IRQHandler>:
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void DMA2_Stream2_IRQHandler(void)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	af00      	add	r7, sp, #0

//	HAL_DMA_IRQHandler(&hdma_adc1);

}
 8004fa0:	bf00      	nop
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr

08004faa <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004faa:	b480      	push	{r7}
 8004fac:	af00      	add	r7, sp, #0
	return 1;
 8004fae:	2301      	movs	r3, #1
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr

08004fba <_kill>:

int _kill(int pid, int sig)
{
 8004fba:	b580      	push	{r7, lr}
 8004fbc:	b082      	sub	sp, #8
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
 8004fc2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004fc4:	f005 ffde 	bl	800af84 <__errno>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	2216      	movs	r2, #22
 8004fcc:	601a      	str	r2, [r3, #0]
	return -1;
 8004fce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3708      	adds	r7, #8
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}

08004fda <_exit>:

void _exit (int status)
{
 8004fda:	b580      	push	{r7, lr}
 8004fdc:	b082      	sub	sp, #8
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004fe2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f7ff ffe7 	bl	8004fba <_kill>
	while (1) {}		/* Make sure we hang here */
 8004fec:	e7fe      	b.n	8004fec <_exit+0x12>
	...

08004ff0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b086      	sub	sp, #24
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004ff8:	4a14      	ldr	r2, [pc, #80]	; (800504c <_sbrk+0x5c>)
 8004ffa:	4b15      	ldr	r3, [pc, #84]	; (8005050 <_sbrk+0x60>)
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005004:	4b13      	ldr	r3, [pc, #76]	; (8005054 <_sbrk+0x64>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d102      	bne.n	8005012 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800500c:	4b11      	ldr	r3, [pc, #68]	; (8005054 <_sbrk+0x64>)
 800500e:	4a12      	ldr	r2, [pc, #72]	; (8005058 <_sbrk+0x68>)
 8005010:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005012:	4b10      	ldr	r3, [pc, #64]	; (8005054 <_sbrk+0x64>)
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4413      	add	r3, r2
 800501a:	693a      	ldr	r2, [r7, #16]
 800501c:	429a      	cmp	r2, r3
 800501e:	d207      	bcs.n	8005030 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005020:	f005 ffb0 	bl	800af84 <__errno>
 8005024:	4603      	mov	r3, r0
 8005026:	220c      	movs	r2, #12
 8005028:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800502a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800502e:	e009      	b.n	8005044 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005030:	4b08      	ldr	r3, [pc, #32]	; (8005054 <_sbrk+0x64>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005036:	4b07      	ldr	r3, [pc, #28]	; (8005054 <_sbrk+0x64>)
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4413      	add	r3, r2
 800503e:	4a05      	ldr	r2, [pc, #20]	; (8005054 <_sbrk+0x64>)
 8005040:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005042:	68fb      	ldr	r3, [r7, #12]
}
 8005044:	4618      	mov	r0, r3
 8005046:	3718      	adds	r7, #24
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}
 800504c:	20020000 	.word	0x20020000
 8005050:	00000400 	.word	0x00000400
 8005054:	20000f10 	.word	0x20000f10
 8005058:	20002b58 	.word	0x20002b58

0800505c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800505c:	b480      	push	{r7}
 800505e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005060:	4b08      	ldr	r3, [pc, #32]	; (8005084 <SystemInit+0x28>)
 8005062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005066:	4a07      	ldr	r2, [pc, #28]	; (8005084 <SystemInit+0x28>)
 8005068:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800506c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005070:	4b04      	ldr	r3, [pc, #16]	; (8005084 <SystemInit+0x28>)
 8005072:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005076:	609a      	str	r2, [r3, #8]
#endif
}
 8005078:	bf00      	nop
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr
 8005082:	bf00      	nop
 8005084:	e000ed00 	.word	0xe000ed00

08005088 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005088:	f8df d034 	ldr.w	sp, [pc, #52]	; 80050c0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800508c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800508e:	e003      	b.n	8005098 <LoopCopyDataInit>

08005090 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005090:	4b0c      	ldr	r3, [pc, #48]	; (80050c4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005092:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005094:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005096:	3104      	adds	r1, #4

08005098 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005098:	480b      	ldr	r0, [pc, #44]	; (80050c8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800509a:	4b0c      	ldr	r3, [pc, #48]	; (80050cc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800509c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800509e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80050a0:	d3f6      	bcc.n	8005090 <CopyDataInit>
  ldr  r2, =_sbss
 80050a2:	4a0b      	ldr	r2, [pc, #44]	; (80050d0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80050a4:	e002      	b.n	80050ac <LoopFillZerobss>

080050a6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80050a6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80050a8:	f842 3b04 	str.w	r3, [r2], #4

080050ac <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80050ac:	4b09      	ldr	r3, [pc, #36]	; (80050d4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80050ae:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80050b0:	d3f9      	bcc.n	80050a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80050b2:	f7ff ffd3 	bl	800505c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80050b6:	f005 ff6b 	bl	800af90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80050ba:	f7fe f8d5 	bl	8003268 <main>
  bx  lr    
 80050be:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80050c0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80050c4:	0800bcf0 	.word	0x0800bcf0
  ldr  r0, =_sdata
 80050c8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80050cc:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 80050d0:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 80050d4:	20002b54 	.word	0x20002b54

080050d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80050d8:	e7fe      	b.n	80050d8 <ADC_IRQHandler>
	...

080050dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80050e0:	4b0e      	ldr	r3, [pc, #56]	; (800511c <HAL_Init+0x40>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a0d      	ldr	r2, [pc, #52]	; (800511c <HAL_Init+0x40>)
 80050e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80050ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80050ec:	4b0b      	ldr	r3, [pc, #44]	; (800511c <HAL_Init+0x40>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a0a      	ldr	r2, [pc, #40]	; (800511c <HAL_Init+0x40>)
 80050f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80050f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80050f8:	4b08      	ldr	r3, [pc, #32]	; (800511c <HAL_Init+0x40>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a07      	ldr	r2, [pc, #28]	; (800511c <HAL_Init+0x40>)
 80050fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005102:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005104:	2003      	movs	r0, #3
 8005106:	f001 f873 	bl	80061f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800510a:	2000      	movs	r0, #0
 800510c:	f000 f808 	bl	8005120 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005110:	f7fc f9cc 	bl	80014ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005114:	2300      	movs	r3, #0
}
 8005116:	4618      	mov	r0, r3
 8005118:	bd80      	pop	{r7, pc}
 800511a:	bf00      	nop
 800511c:	40023c00 	.word	0x40023c00

08005120 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b082      	sub	sp, #8
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005128:	4b12      	ldr	r3, [pc, #72]	; (8005174 <HAL_InitTick+0x54>)
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	4b12      	ldr	r3, [pc, #72]	; (8005178 <HAL_InitTick+0x58>)
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	4619      	mov	r1, r3
 8005132:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005136:	fbb3 f3f1 	udiv	r3, r3, r1
 800513a:	fbb2 f3f3 	udiv	r3, r2, r3
 800513e:	4618      	mov	r0, r3
 8005140:	f001 f88b 	bl	800625a <HAL_SYSTICK_Config>
 8005144:	4603      	mov	r3, r0
 8005146:	2b00      	cmp	r3, #0
 8005148:	d001      	beq.n	800514e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e00e      	b.n	800516c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2b0f      	cmp	r3, #15
 8005152:	d80a      	bhi.n	800516a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005154:	2200      	movs	r2, #0
 8005156:	6879      	ldr	r1, [r7, #4]
 8005158:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800515c:	f001 f853 	bl	8006206 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005160:	4a06      	ldr	r2, [pc, #24]	; (800517c <HAL_InitTick+0x5c>)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005166:	2300      	movs	r3, #0
 8005168:	e000      	b.n	800516c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
}
 800516c:	4618      	mov	r0, r3
 800516e:	3708      	adds	r7, #8
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}
 8005174:	2000000c 	.word	0x2000000c
 8005178:	20000014 	.word	0x20000014
 800517c:	20000010 	.word	0x20000010

08005180 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005180:	b480      	push	{r7}
 8005182:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005184:	4b06      	ldr	r3, [pc, #24]	; (80051a0 <HAL_IncTick+0x20>)
 8005186:	781b      	ldrb	r3, [r3, #0]
 8005188:	461a      	mov	r2, r3
 800518a:	4b06      	ldr	r3, [pc, #24]	; (80051a4 <HAL_IncTick+0x24>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4413      	add	r3, r2
 8005190:	4a04      	ldr	r2, [pc, #16]	; (80051a4 <HAL_IncTick+0x24>)
 8005192:	6013      	str	r3, [r2, #0]
}
 8005194:	bf00      	nop
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr
 800519e:	bf00      	nop
 80051a0:	20000014 	.word	0x20000014
 80051a4:	20002b50 	.word	0x20002b50

080051a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80051a8:	b480      	push	{r7}
 80051aa:	af00      	add	r7, sp, #0
  return uwTick;
 80051ac:	4b03      	ldr	r3, [pc, #12]	; (80051bc <HAL_GetTick+0x14>)
 80051ae:	681b      	ldr	r3, [r3, #0]
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr
 80051ba:	bf00      	nop
 80051bc:	20002b50 	.word	0x20002b50

080051c0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b084      	sub	sp, #16
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80051c8:	2300      	movs	r3, #0
 80051ca:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d101      	bne.n	80051d6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e033      	b.n	800523e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d109      	bne.n	80051f2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f7fc f98c 	bl	80014fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2200      	movs	r2, #0
 80051e8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f6:	f003 0310 	and.w	r3, r3, #16
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d118      	bne.n	8005230 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005202:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005206:	f023 0302 	bic.w	r3, r3, #2
 800520a:	f043 0202 	orr.w	r2, r3, #2
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f000 fa40 	bl	8005698 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005222:	f023 0303 	bic.w	r3, r3, #3
 8005226:	f043 0201 	orr.w	r2, r3, #1
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	641a      	str	r2, [r3, #64]	; 0x40
 800522e:	e001      	b.n	8005234 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2200      	movs	r2, #0
 8005238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800523c:	7bfb      	ldrb	r3, [r7, #15]
}
 800523e:	4618      	mov	r0, r3
 8005240:	3710      	adds	r7, #16
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
	...

08005248 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b086      	sub	sp, #24
 800524c:	af00      	add	r7, sp, #0
 800524e:	60f8      	str	r0, [r7, #12]
 8005250:	60b9      	str	r1, [r7, #8]
 8005252:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8005254:	2300      	movs	r3, #0
 8005256:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800525e:	2b01      	cmp	r3, #1
 8005260:	d101      	bne.n	8005266 <HAL_ADC_Start_DMA+0x1e>
 8005262:	2302      	movs	r3, #2
 8005264:	e0cc      	b.n	8005400 <HAL_ADC_Start_DMA+0x1b8>
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2201      	movs	r2, #1
 800526a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	f003 0301 	and.w	r3, r3, #1
 8005278:	2b01      	cmp	r3, #1
 800527a:	d018      	beq.n	80052ae <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	689a      	ldr	r2, [r3, #8]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f042 0201 	orr.w	r2, r2, #1
 800528a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800528c:	4b5e      	ldr	r3, [pc, #376]	; (8005408 <HAL_ADC_Start_DMA+0x1c0>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a5e      	ldr	r2, [pc, #376]	; (800540c <HAL_ADC_Start_DMA+0x1c4>)
 8005292:	fba2 2303 	umull	r2, r3, r2, r3
 8005296:	0c9a      	lsrs	r2, r3, #18
 8005298:	4613      	mov	r3, r2
 800529a:	005b      	lsls	r3, r3, #1
 800529c:	4413      	add	r3, r2
 800529e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80052a0:	e002      	b.n	80052a8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	3b01      	subs	r3, #1
 80052a6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d1f9      	bne.n	80052a2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	f003 0301 	and.w	r3, r3, #1
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	f040 80a0 	bne.w	80053fe <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80052c6:	f023 0301 	bic.w	r3, r3, #1
 80052ca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d007      	beq.n	80052f0 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80052e8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80052f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052fc:	d106      	bne.n	800530c <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005302:	f023 0206 	bic.w	r2, r3, #6
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	645a      	str	r2, [r3, #68]	; 0x44
 800530a:	e002      	b.n	8005312 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2200      	movs	r2, #0
 8005310:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2200      	movs	r2, #0
 8005316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800531a:	4b3d      	ldr	r3, [pc, #244]	; (8005410 <HAL_ADC_Start_DMA+0x1c8>)
 800531c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005322:	4a3c      	ldr	r2, [pc, #240]	; (8005414 <HAL_ADC_Start_DMA+0x1cc>)
 8005324:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800532a:	4a3b      	ldr	r2, [pc, #236]	; (8005418 <HAL_ADC_Start_DMA+0x1d0>)
 800532c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005332:	4a3a      	ldr	r2, [pc, #232]	; (800541c <HAL_ADC_Start_DMA+0x1d4>)
 8005334:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800533e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	685a      	ldr	r2, [r3, #4]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800534e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	689a      	ldr	r2, [r3, #8]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800535e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	334c      	adds	r3, #76	; 0x4c
 800536a:	4619      	mov	r1, r3
 800536c:	68ba      	ldr	r2, [r7, #8]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f001 f82e 	bl	80063d0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	f003 031f 	and.w	r3, r3, #31
 800537c:	2b00      	cmp	r3, #0
 800537e:	d12a      	bne.n	80053d6 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a26      	ldr	r2, [pc, #152]	; (8005420 <HAL_ADC_Start_DMA+0x1d8>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d015      	beq.n	80053b6 <HAL_ADC_Start_DMA+0x16e>
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a25      	ldr	r2, [pc, #148]	; (8005424 <HAL_ADC_Start_DMA+0x1dc>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d105      	bne.n	80053a0 <HAL_ADC_Start_DMA+0x158>
 8005394:	4b1e      	ldr	r3, [pc, #120]	; (8005410 <HAL_ADC_Start_DMA+0x1c8>)
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	f003 031f 	and.w	r3, r3, #31
 800539c:	2b00      	cmp	r3, #0
 800539e:	d00a      	beq.n	80053b6 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a20      	ldr	r2, [pc, #128]	; (8005428 <HAL_ADC_Start_DMA+0x1e0>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d129      	bne.n	80053fe <HAL_ADC_Start_DMA+0x1b6>
 80053aa:	4b19      	ldr	r3, [pc, #100]	; (8005410 <HAL_ADC_Start_DMA+0x1c8>)
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	f003 0310 	and.w	r3, r3, #16
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d123      	bne.n	80053fe <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d11c      	bne.n	80053fe <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	689a      	ldr	r2, [r3, #8]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80053d2:	609a      	str	r2, [r3, #8]
 80053d4:	e013      	b.n	80053fe <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a11      	ldr	r2, [pc, #68]	; (8005420 <HAL_ADC_Start_DMA+0x1d8>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d10e      	bne.n	80053fe <HAL_ADC_Start_DMA+0x1b6>
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d107      	bne.n	80053fe <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	689a      	ldr	r2, [r3, #8]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80053fc:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80053fe:	2300      	movs	r3, #0
}
 8005400:	4618      	mov	r0, r3
 8005402:	3718      	adds	r7, #24
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}
 8005408:	2000000c 	.word	0x2000000c
 800540c:	431bde83 	.word	0x431bde83
 8005410:	40012300 	.word	0x40012300
 8005414:	08005891 	.word	0x08005891
 8005418:	0800594b 	.word	0x0800594b
 800541c:	08005967 	.word	0x08005967
 8005420:	40012000 	.word	0x40012000
 8005424:	40012100 	.word	0x40012100
 8005428:	40012200 	.word	0x40012200

0800542c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800542c:	b480      	push	{r7}
 800542e:	b083      	sub	sp, #12
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8005434:	bf00      	nop
 8005436:	370c      	adds	r7, #12
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr

08005440 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005440:	b480      	push	{r7}
 8005442:	b083      	sub	sp, #12
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8005448:	bf00      	nop
 800544a:	370c      	adds	r7, #12
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr

08005454 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005454:	b480      	push	{r7}
 8005456:	b085      	sub	sp, #20
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800545e:	2300      	movs	r3, #0
 8005460:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005468:	2b01      	cmp	r3, #1
 800546a:	d101      	bne.n	8005470 <HAL_ADC_ConfigChannel+0x1c>
 800546c:	2302      	movs	r3, #2
 800546e:	e105      	b.n	800567c <HAL_ADC_ConfigChannel+0x228>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	2b09      	cmp	r3, #9
 800547e:	d925      	bls.n	80054cc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	68d9      	ldr	r1, [r3, #12]
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	b29b      	uxth	r3, r3
 800548c:	461a      	mov	r2, r3
 800548e:	4613      	mov	r3, r2
 8005490:	005b      	lsls	r3, r3, #1
 8005492:	4413      	add	r3, r2
 8005494:	3b1e      	subs	r3, #30
 8005496:	2207      	movs	r2, #7
 8005498:	fa02 f303 	lsl.w	r3, r2, r3
 800549c:	43da      	mvns	r2, r3
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	400a      	ands	r2, r1
 80054a4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	68d9      	ldr	r1, [r3, #12]
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	689a      	ldr	r2, [r3, #8]
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	4618      	mov	r0, r3
 80054b8:	4603      	mov	r3, r0
 80054ba:	005b      	lsls	r3, r3, #1
 80054bc:	4403      	add	r3, r0
 80054be:	3b1e      	subs	r3, #30
 80054c0:	409a      	lsls	r2, r3
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	430a      	orrs	r2, r1
 80054c8:	60da      	str	r2, [r3, #12]
 80054ca:	e022      	b.n	8005512 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	6919      	ldr	r1, [r3, #16]
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	461a      	mov	r2, r3
 80054da:	4613      	mov	r3, r2
 80054dc:	005b      	lsls	r3, r3, #1
 80054de:	4413      	add	r3, r2
 80054e0:	2207      	movs	r2, #7
 80054e2:	fa02 f303 	lsl.w	r3, r2, r3
 80054e6:	43da      	mvns	r2, r3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	400a      	ands	r2, r1
 80054ee:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	6919      	ldr	r1, [r3, #16]
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	689a      	ldr	r2, [r3, #8]
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	b29b      	uxth	r3, r3
 8005500:	4618      	mov	r0, r3
 8005502:	4603      	mov	r3, r0
 8005504:	005b      	lsls	r3, r3, #1
 8005506:	4403      	add	r3, r0
 8005508:	409a      	lsls	r2, r3
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	430a      	orrs	r2, r1
 8005510:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	2b06      	cmp	r3, #6
 8005518:	d824      	bhi.n	8005564 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	685a      	ldr	r2, [r3, #4]
 8005524:	4613      	mov	r3, r2
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	4413      	add	r3, r2
 800552a:	3b05      	subs	r3, #5
 800552c:	221f      	movs	r2, #31
 800552e:	fa02 f303 	lsl.w	r3, r2, r3
 8005532:	43da      	mvns	r2, r3
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	400a      	ands	r2, r1
 800553a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	b29b      	uxth	r3, r3
 8005548:	4618      	mov	r0, r3
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	685a      	ldr	r2, [r3, #4]
 800554e:	4613      	mov	r3, r2
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	4413      	add	r3, r2
 8005554:	3b05      	subs	r3, #5
 8005556:	fa00 f203 	lsl.w	r2, r0, r3
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	430a      	orrs	r2, r1
 8005560:	635a      	str	r2, [r3, #52]	; 0x34
 8005562:	e04c      	b.n	80055fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	2b0c      	cmp	r3, #12
 800556a:	d824      	bhi.n	80055b6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	685a      	ldr	r2, [r3, #4]
 8005576:	4613      	mov	r3, r2
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	4413      	add	r3, r2
 800557c:	3b23      	subs	r3, #35	; 0x23
 800557e:	221f      	movs	r2, #31
 8005580:	fa02 f303 	lsl.w	r3, r2, r3
 8005584:	43da      	mvns	r2, r3
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	400a      	ands	r2, r1
 800558c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	b29b      	uxth	r3, r3
 800559a:	4618      	mov	r0, r3
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	685a      	ldr	r2, [r3, #4]
 80055a0:	4613      	mov	r3, r2
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	4413      	add	r3, r2
 80055a6:	3b23      	subs	r3, #35	; 0x23
 80055a8:	fa00 f203 	lsl.w	r2, r0, r3
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	430a      	orrs	r2, r1
 80055b2:	631a      	str	r2, [r3, #48]	; 0x30
 80055b4:	e023      	b.n	80055fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	685a      	ldr	r2, [r3, #4]
 80055c0:	4613      	mov	r3, r2
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	4413      	add	r3, r2
 80055c6:	3b41      	subs	r3, #65	; 0x41
 80055c8:	221f      	movs	r2, #31
 80055ca:	fa02 f303 	lsl.w	r3, r2, r3
 80055ce:	43da      	mvns	r2, r3
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	400a      	ands	r2, r1
 80055d6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	4618      	mov	r0, r3
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	685a      	ldr	r2, [r3, #4]
 80055ea:	4613      	mov	r3, r2
 80055ec:	009b      	lsls	r3, r3, #2
 80055ee:	4413      	add	r3, r2
 80055f0:	3b41      	subs	r3, #65	; 0x41
 80055f2:	fa00 f203 	lsl.w	r2, r0, r3
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	430a      	orrs	r2, r1
 80055fc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80055fe:	4b22      	ldr	r3, [pc, #136]	; (8005688 <HAL_ADC_ConfigChannel+0x234>)
 8005600:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a21      	ldr	r2, [pc, #132]	; (800568c <HAL_ADC_ConfigChannel+0x238>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d109      	bne.n	8005620 <HAL_ADC_ConfigChannel+0x1cc>
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	2b12      	cmp	r3, #18
 8005612:	d105      	bne.n	8005620 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a19      	ldr	r2, [pc, #100]	; (800568c <HAL_ADC_ConfigChannel+0x238>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d123      	bne.n	8005672 <HAL_ADC_ConfigChannel+0x21e>
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	2b10      	cmp	r3, #16
 8005630:	d003      	beq.n	800563a <HAL_ADC_ConfigChannel+0x1e6>
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	2b11      	cmp	r3, #17
 8005638:	d11b      	bne.n	8005672 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	2b10      	cmp	r3, #16
 800564c:	d111      	bne.n	8005672 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800564e:	4b10      	ldr	r3, [pc, #64]	; (8005690 <HAL_ADC_ConfigChannel+0x23c>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a10      	ldr	r2, [pc, #64]	; (8005694 <HAL_ADC_ConfigChannel+0x240>)
 8005654:	fba2 2303 	umull	r2, r3, r2, r3
 8005658:	0c9a      	lsrs	r2, r3, #18
 800565a:	4613      	mov	r3, r2
 800565c:	009b      	lsls	r3, r3, #2
 800565e:	4413      	add	r3, r2
 8005660:	005b      	lsls	r3, r3, #1
 8005662:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005664:	e002      	b.n	800566c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	3b01      	subs	r3, #1
 800566a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d1f9      	bne.n	8005666 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800567a:	2300      	movs	r3, #0
}
 800567c:	4618      	mov	r0, r3
 800567e:	3714      	adds	r7, #20
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr
 8005688:	40012300 	.word	0x40012300
 800568c:	40012000 	.word	0x40012000
 8005690:	2000000c 	.word	0x2000000c
 8005694:	431bde83 	.word	0x431bde83

08005698 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005698:	b480      	push	{r7}
 800569a:	b085      	sub	sp, #20
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80056a0:	4b79      	ldr	r3, [pc, #484]	; (8005888 <ADC_Init+0x1f0>)
 80056a2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	685a      	ldr	r2, [r3, #4]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	431a      	orrs	r2, r3
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	685a      	ldr	r2, [r3, #4]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80056cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	6859      	ldr	r1, [r3, #4]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	691b      	ldr	r3, [r3, #16]
 80056d8:	021a      	lsls	r2, r3, #8
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	430a      	orrs	r2, r1
 80056e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	685a      	ldr	r2, [r3, #4]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80056f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	6859      	ldr	r1, [r3, #4]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	689a      	ldr	r2, [r3, #8]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	430a      	orrs	r2, r1
 8005702:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	689a      	ldr	r2, [r3, #8]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005712:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	6899      	ldr	r1, [r3, #8]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	68da      	ldr	r2, [r3, #12]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	430a      	orrs	r2, r1
 8005724:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800572a:	4a58      	ldr	r2, [pc, #352]	; (800588c <ADC_Init+0x1f4>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d022      	beq.n	8005776 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	689a      	ldr	r2, [r3, #8]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800573e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	6899      	ldr	r1, [r3, #8]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	430a      	orrs	r2, r1
 8005750:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	689a      	ldr	r2, [r3, #8]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005760:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	6899      	ldr	r1, [r3, #8]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	430a      	orrs	r2, r1
 8005772:	609a      	str	r2, [r3, #8]
 8005774:	e00f      	b.n	8005796 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	689a      	ldr	r2, [r3, #8]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005784:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	689a      	ldr	r2, [r3, #8]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005794:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	689a      	ldr	r2, [r3, #8]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f022 0202 	bic.w	r2, r2, #2
 80057a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	6899      	ldr	r1, [r3, #8]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	7e1b      	ldrb	r3, [r3, #24]
 80057b0:	005a      	lsls	r2, r3, #1
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	430a      	orrs	r2, r1
 80057b8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d01b      	beq.n	80057fc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	685a      	ldr	r2, [r3, #4]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057d2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	685a      	ldr	r2, [r3, #4]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80057e2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	6859      	ldr	r1, [r3, #4]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ee:	3b01      	subs	r3, #1
 80057f0:	035a      	lsls	r2, r3, #13
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	430a      	orrs	r2, r1
 80057f8:	605a      	str	r2, [r3, #4]
 80057fa:	e007      	b.n	800580c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	685a      	ldr	r2, [r3, #4]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800580a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800581a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	69db      	ldr	r3, [r3, #28]
 8005826:	3b01      	subs	r3, #1
 8005828:	051a      	lsls	r2, r3, #20
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	430a      	orrs	r2, r1
 8005830:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	689a      	ldr	r2, [r3, #8]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005840:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	6899      	ldr	r1, [r3, #8]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800584e:	025a      	lsls	r2, r3, #9
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	430a      	orrs	r2, r1
 8005856:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	689a      	ldr	r2, [r3, #8]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005866:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	6899      	ldr	r1, [r3, #8]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	695b      	ldr	r3, [r3, #20]
 8005872:	029a      	lsls	r2, r3, #10
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	430a      	orrs	r2, r1
 800587a:	609a      	str	r2, [r3, #8]
}
 800587c:	bf00      	nop
 800587e:	3714      	adds	r7, #20
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr
 8005888:	40012300 	.word	0x40012300
 800588c:	0f000001 	.word	0x0f000001

08005890 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b084      	sub	sp, #16
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800589c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d13c      	bne.n	8005924 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ae:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d12b      	bne.n	800591c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d127      	bne.n	800591c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d006      	beq.n	80058e8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d119      	bne.n	800591c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	685a      	ldr	r2, [r3, #4]
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f022 0220 	bic.w	r2, r2, #32
 80058f6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005908:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800590c:	2b00      	cmp	r3, #0
 800590e:	d105      	bne.n	800591c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005914:	f043 0201 	orr.w	r2, r3, #1
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800591c:	68f8      	ldr	r0, [r7, #12]
 800591e:	f7ff fb33 	bl	8004f88 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005922:	e00e      	b.n	8005942 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005928:	f003 0310 	and.w	r3, r3, #16
 800592c:	2b00      	cmp	r3, #0
 800592e:	d003      	beq.n	8005938 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8005930:	68f8      	ldr	r0, [r7, #12]
 8005932:	f7ff fd85 	bl	8005440 <HAL_ADC_ErrorCallback>
}
 8005936:	e004      	b.n	8005942 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800593c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	4798      	blx	r3
}
 8005942:	bf00      	nop
 8005944:	3710      	adds	r7, #16
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}

0800594a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800594a:	b580      	push	{r7, lr}
 800594c:	b084      	sub	sp, #16
 800594e:	af00      	add	r7, sp, #0
 8005950:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005956:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005958:	68f8      	ldr	r0, [r7, #12]
 800595a:	f7ff fd67 	bl	800542c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800595e:	bf00      	nop
 8005960:	3710      	adds	r7, #16
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}

08005966 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8005966:	b580      	push	{r7, lr}
 8005968:	b084      	sub	sp, #16
 800596a:	af00      	add	r7, sp, #0
 800596c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005972:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2240      	movs	r2, #64	; 0x40
 8005978:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800597e:	f043 0204 	orr.w	r2, r3, #4
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005986:	68f8      	ldr	r0, [r7, #12]
 8005988:	f7ff fd5a 	bl	8005440 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800598c:	bf00      	nop
 800598e:	3710      	adds	r7, #16
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}

08005994 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8005994:	b480      	push	{r7}
 8005996:	b087      	sub	sp, #28
 8005998:	af00      	add	r7, sp, #0
 800599a:	60f8      	str	r0, [r7, #12]
 800599c:	60b9      	str	r1, [r7, #8]
 800599e:	607a      	str	r2, [r7, #4]
 80059a0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80059a8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80059aa:	7dfb      	ldrb	r3, [r7, #23]
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d003      	beq.n	80059b8 <HAL_CAN_GetRxMessage+0x24>
 80059b0:	7dfb      	ldrb	r3, [r7, #23]
 80059b2:	2b02      	cmp	r3, #2
 80059b4:	f040 80f3 	bne.w	8005b9e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d10e      	bne.n	80059dc <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	f003 0303 	and.w	r3, r3, #3
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d116      	bne.n	80059fa <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	e0e7      	b.n	8005bac <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	691b      	ldr	r3, [r3, #16]
 80059e2:	f003 0303 	and.w	r3, r3, #3
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d107      	bne.n	80059fa <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	e0d8      	b.n	8005bac <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	331b      	adds	r3, #27
 8005a02:	011b      	lsls	r3, r3, #4
 8005a04:	4413      	add	r3, r2
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f003 0204 	and.w	r2, r3, #4
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d10c      	bne.n	8005a32 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	331b      	adds	r3, #27
 8005a20:	011b      	lsls	r3, r3, #4
 8005a22:	4413      	add	r3, r2
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	0d5b      	lsrs	r3, r3, #21
 8005a28:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	601a      	str	r2, [r3, #0]
 8005a30:	e00b      	b.n	8005a4a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	331b      	adds	r3, #27
 8005a3a:	011b      	lsls	r3, r3, #4
 8005a3c:	4413      	add	r3, r2
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	08db      	lsrs	r3, r3, #3
 8005a42:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681a      	ldr	r2, [r3, #0]
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	331b      	adds	r3, #27
 8005a52:	011b      	lsls	r3, r3, #4
 8005a54:	4413      	add	r3, r2
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f003 0202 	and.w	r2, r3, #2
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	331b      	adds	r3, #27
 8005a68:	011b      	lsls	r3, r3, #4
 8005a6a:	4413      	add	r3, r2
 8005a6c:	3304      	adds	r3, #4
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f003 020f 	and.w	r2, r3, #15
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	331b      	adds	r3, #27
 8005a80:	011b      	lsls	r3, r3, #4
 8005a82:	4413      	add	r3, r2
 8005a84:	3304      	adds	r3, #4
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	0a1b      	lsrs	r3, r3, #8
 8005a8a:	b2da      	uxtb	r2, r3
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	331b      	adds	r3, #27
 8005a98:	011b      	lsls	r3, r3, #4
 8005a9a:	4413      	add	r3, r2
 8005a9c:	3304      	adds	r3, #4
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	0c1b      	lsrs	r3, r3, #16
 8005aa2:	b29a      	uxth	r2, r3
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	011b      	lsls	r3, r3, #4
 8005ab0:	4413      	add	r3, r2
 8005ab2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	b2da      	uxtb	r2, r3
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	011b      	lsls	r3, r3, #4
 8005ac6:	4413      	add	r3, r2
 8005ac8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	0a1a      	lsrs	r2, r3, #8
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	3301      	adds	r3, #1
 8005ad4:	b2d2      	uxtb	r2, r2
 8005ad6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	011b      	lsls	r3, r3, #4
 8005ae0:	4413      	add	r3, r2
 8005ae2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	0c1a      	lsrs	r2, r3, #16
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	3302      	adds	r3, #2
 8005aee:	b2d2      	uxtb	r2, r2
 8005af0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	011b      	lsls	r3, r3, #4
 8005afa:	4413      	add	r3, r2
 8005afc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	0e1a      	lsrs	r2, r3, #24
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	3303      	adds	r3, #3
 8005b08:	b2d2      	uxtb	r2, r2
 8005b0a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	011b      	lsls	r3, r3, #4
 8005b14:	4413      	add	r3, r2
 8005b16:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	3304      	adds	r3, #4
 8005b20:	b2d2      	uxtb	r2, r2
 8005b22:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	011b      	lsls	r3, r3, #4
 8005b2c:	4413      	add	r3, r2
 8005b2e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	0a1a      	lsrs	r2, r3, #8
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	3305      	adds	r3, #5
 8005b3a:	b2d2      	uxtb	r2, r2
 8005b3c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	011b      	lsls	r3, r3, #4
 8005b46:	4413      	add	r3, r2
 8005b48:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	0c1a      	lsrs	r2, r3, #16
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	3306      	adds	r3, #6
 8005b54:	b2d2      	uxtb	r2, r2
 8005b56:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	011b      	lsls	r3, r3, #4
 8005b60:	4413      	add	r3, r2
 8005b62:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	0e1a      	lsrs	r2, r3, #24
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	3307      	adds	r3, #7
 8005b6e:	b2d2      	uxtb	r2, r2
 8005b70:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d108      	bne.n	8005b8a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	68da      	ldr	r2, [r3, #12]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f042 0220 	orr.w	r2, r2, #32
 8005b86:	60da      	str	r2, [r3, #12]
 8005b88:	e007      	b.n	8005b9a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	691a      	ldr	r2, [r3, #16]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f042 0220 	orr.w	r2, r2, #32
 8005b98:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	e006      	b.n	8005bac <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
  }
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	371c      	adds	r7, #28
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr

08005bb8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b085      	sub	sp, #20
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005bc8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8005bca:	7bfb      	ldrb	r3, [r7, #15]
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d002      	beq.n	8005bd6 <HAL_CAN_ActivateNotification+0x1e>
 8005bd0:	7bfb      	ldrb	r3, [r7, #15]
 8005bd2:	2b02      	cmp	r3, #2
 8005bd4:	d109      	bne.n	8005bea <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	6959      	ldr	r1, [r3, #20]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	683a      	ldr	r2, [r7, #0]
 8005be2:	430a      	orrs	r2, r1
 8005be4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8005be6:	2300      	movs	r3, #0
 8005be8:	e006      	b.n	8005bf8 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bee:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
  }
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3714      	adds	r7, #20
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr

08005c04 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b08a      	sub	sp, #40	; 0x28
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	695b      	ldr	r3, [r3, #20]
 8005c16:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	68db      	ldr	r3, [r3, #12]
 8005c2e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	691b      	ldr	r3, [r3, #16]
 8005c36:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	699b      	ldr	r3, [r3, #24]
 8005c3e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8005c40:	6a3b      	ldr	r3, [r7, #32]
 8005c42:	f003 0301 	and.w	r3, r3, #1
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d07c      	beq.n	8005d44 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8005c4a:	69bb      	ldr	r3, [r7, #24]
 8005c4c:	f003 0301 	and.w	r3, r3, #1
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d023      	beq.n	8005c9c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	2201      	movs	r2, #1
 8005c5a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8005c5c:	69bb      	ldr	r3, [r7, #24]
 8005c5e:	f003 0302 	and.w	r3, r3, #2
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d003      	beq.n	8005c6e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f000 f983 	bl	8005f72 <HAL_CAN_TxMailbox0CompleteCallback>
 8005c6c:	e016      	b.n	8005c9c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005c6e:	69bb      	ldr	r3, [r7, #24]
 8005c70:	f003 0304 	and.w	r3, r3, #4
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d004      	beq.n	8005c82 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8005c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005c7e:	627b      	str	r3, [r7, #36]	; 0x24
 8005c80:	e00c      	b.n	8005c9c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8005c82:	69bb      	ldr	r3, [r7, #24]
 8005c84:	f003 0308 	and.w	r3, r3, #8
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d004      	beq.n	8005c96 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8005c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005c92:	627b      	str	r3, [r7, #36]	; 0x24
 8005c94:	e002      	b.n	8005c9c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f000 f989 	bl	8005fae <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8005c9c:	69bb      	ldr	r3, [r7, #24]
 8005c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d024      	beq.n	8005cf0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005cae:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8005cb0:	69bb      	ldr	r3, [r7, #24]
 8005cb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d003      	beq.n	8005cc2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f000 f963 	bl	8005f86 <HAL_CAN_TxMailbox1CompleteCallback>
 8005cc0:	e016      	b.n	8005cf0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8005cc2:	69bb      	ldr	r3, [r7, #24]
 8005cc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d004      	beq.n	8005cd6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8005ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005cd2:	627b      	str	r3, [r7, #36]	; 0x24
 8005cd4:	e00c      	b.n	8005cf0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8005cd6:	69bb      	ldr	r3, [r7, #24]
 8005cd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d004      	beq.n	8005cea <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8005ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005ce6:	627b      	str	r3, [r7, #36]	; 0x24
 8005ce8:	e002      	b.n	8005cf0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f000 f969 	bl	8005fc2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8005cf0:	69bb      	ldr	r3, [r7, #24]
 8005cf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d024      	beq.n	8005d44 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005d02:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8005d04:	69bb      	ldr	r3, [r7, #24]
 8005d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d003      	beq.n	8005d16 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f000 f943 	bl	8005f9a <HAL_CAN_TxMailbox2CompleteCallback>
 8005d14:	e016      	b.n	8005d44 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8005d16:	69bb      	ldr	r3, [r7, #24]
 8005d18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d004      	beq.n	8005d2a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8005d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d26:	627b      	str	r3, [r7, #36]	; 0x24
 8005d28:	e00c      	b.n	8005d44 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8005d2a:	69bb      	ldr	r3, [r7, #24]
 8005d2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d004      	beq.n	8005d3e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8005d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d3a:	627b      	str	r3, [r7, #36]	; 0x24
 8005d3c:	e002      	b.n	8005d44 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f000 f949 	bl	8005fd6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8005d44:	6a3b      	ldr	r3, [r7, #32]
 8005d46:	f003 0308 	and.w	r3, r3, #8
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d00c      	beq.n	8005d68 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	f003 0310 	and.w	r3, r3, #16
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d007      	beq.n	8005d68 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8005d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005d5e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	2210      	movs	r2, #16
 8005d66:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8005d68:	6a3b      	ldr	r3, [r7, #32]
 8005d6a:	f003 0304 	and.w	r3, r3, #4
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d00b      	beq.n	8005d8a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	f003 0308 	and.w	r3, r3, #8
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d006      	beq.n	8005d8a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	2208      	movs	r2, #8
 8005d82:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f000 f930 	bl	8005fea <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8005d8a:	6a3b      	ldr	r3, [r7, #32]
 8005d8c:	f003 0302 	and.w	r3, r3, #2
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d009      	beq.n	8005da8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	68db      	ldr	r3, [r3, #12]
 8005d9a:	f003 0303 	and.w	r3, r3, #3
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d002      	beq.n	8005da8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f7fe fe14 	bl	80049d0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8005da8:	6a3b      	ldr	r3, [r7, #32]
 8005daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d00c      	beq.n	8005dcc <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	f003 0310 	and.w	r3, r3, #16
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d007      	beq.n	8005dcc <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8005dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005dc2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	2210      	movs	r2, #16
 8005dca:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8005dcc:	6a3b      	ldr	r3, [r7, #32]
 8005dce:	f003 0320 	and.w	r3, r3, #32
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d00b      	beq.n	8005dee <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	f003 0308 	and.w	r3, r3, #8
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d006      	beq.n	8005dee <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	2208      	movs	r2, #8
 8005de6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f000 f908 	bl	8005ffe <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8005dee:	6a3b      	ldr	r3, [r7, #32]
 8005df0:	f003 0310 	and.w	r3, r3, #16
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d009      	beq.n	8005e0c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	691b      	ldr	r3, [r3, #16]
 8005dfe:	f003 0303 	and.w	r3, r3, #3
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d002      	beq.n	8005e0c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f7fe fe90 	bl	8004b2c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8005e0c:	6a3b      	ldr	r3, [r7, #32]
 8005e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d00b      	beq.n	8005e2e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8005e16:	69fb      	ldr	r3, [r7, #28]
 8005e18:	f003 0310 	and.w	r3, r3, #16
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d006      	beq.n	8005e2e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	2210      	movs	r2, #16
 8005e26:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f000 f8f2 	bl	8006012 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005e2e:	6a3b      	ldr	r3, [r7, #32]
 8005e30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d00b      	beq.n	8005e50 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8005e38:	69fb      	ldr	r3, [r7, #28]
 8005e3a:	f003 0308 	and.w	r3, r3, #8
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d006      	beq.n	8005e50 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	2208      	movs	r2, #8
 8005e48:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f000 f8eb 	bl	8006026 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8005e50:	6a3b      	ldr	r3, [r7, #32]
 8005e52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d07b      	beq.n	8005f52 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005e5a:	69fb      	ldr	r3, [r7, #28]
 8005e5c:	f003 0304 	and.w	r3, r3, #4
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d072      	beq.n	8005f4a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005e64:	6a3b      	ldr	r3, [r7, #32]
 8005e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d008      	beq.n	8005e80 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d003      	beq.n	8005e80 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8005e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e7a:	f043 0301 	orr.w	r3, r3, #1
 8005e7e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005e80:	6a3b      	ldr	r3, [r7, #32]
 8005e82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d008      	beq.n	8005e9c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d003      	beq.n	8005e9c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8005e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e96:	f043 0302 	orr.w	r3, r3, #2
 8005e9a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005e9c:	6a3b      	ldr	r3, [r7, #32]
 8005e9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d008      	beq.n	8005eb8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d003      	beq.n	8005eb8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8005eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb2:	f043 0304 	orr.w	r3, r3, #4
 8005eb6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005eb8:	6a3b      	ldr	r3, [r7, #32]
 8005eba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d043      	beq.n	8005f4a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d03e      	beq.n	8005f4a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005ed2:	2b60      	cmp	r3, #96	; 0x60
 8005ed4:	d02b      	beq.n	8005f2e <HAL_CAN_IRQHandler+0x32a>
 8005ed6:	2b60      	cmp	r3, #96	; 0x60
 8005ed8:	d82e      	bhi.n	8005f38 <HAL_CAN_IRQHandler+0x334>
 8005eda:	2b50      	cmp	r3, #80	; 0x50
 8005edc:	d022      	beq.n	8005f24 <HAL_CAN_IRQHandler+0x320>
 8005ede:	2b50      	cmp	r3, #80	; 0x50
 8005ee0:	d82a      	bhi.n	8005f38 <HAL_CAN_IRQHandler+0x334>
 8005ee2:	2b40      	cmp	r3, #64	; 0x40
 8005ee4:	d019      	beq.n	8005f1a <HAL_CAN_IRQHandler+0x316>
 8005ee6:	2b40      	cmp	r3, #64	; 0x40
 8005ee8:	d826      	bhi.n	8005f38 <HAL_CAN_IRQHandler+0x334>
 8005eea:	2b30      	cmp	r3, #48	; 0x30
 8005eec:	d010      	beq.n	8005f10 <HAL_CAN_IRQHandler+0x30c>
 8005eee:	2b30      	cmp	r3, #48	; 0x30
 8005ef0:	d822      	bhi.n	8005f38 <HAL_CAN_IRQHandler+0x334>
 8005ef2:	2b10      	cmp	r3, #16
 8005ef4:	d002      	beq.n	8005efc <HAL_CAN_IRQHandler+0x2f8>
 8005ef6:	2b20      	cmp	r3, #32
 8005ef8:	d005      	beq.n	8005f06 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8005efa:	e01d      	b.n	8005f38 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8005efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efe:	f043 0308 	orr.w	r3, r3, #8
 8005f02:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005f04:	e019      	b.n	8005f3a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f08:	f043 0310 	orr.w	r3, r3, #16
 8005f0c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005f0e:	e014      	b.n	8005f3a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8005f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f12:	f043 0320 	orr.w	r3, r3, #32
 8005f16:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005f18:	e00f      	b.n	8005f3a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8005f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f20:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005f22:	e00a      	b.n	8005f3a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8005f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f2a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005f2c:	e005      	b.n	8005f3a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8005f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f34:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005f36:	e000      	b.n	8005f3a <HAL_CAN_IRQHandler+0x336>
            break;
 8005f38:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	699a      	ldr	r2, [r3, #24]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005f48:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	2204      	movs	r2, #4
 8005f50:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d008      	beq.n	8005f6a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5e:	431a      	orrs	r2, r3
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f000 f868 	bl	800603a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005f6a:	bf00      	nop
 8005f6c:	3728      	adds	r7, #40	; 0x28
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}

08005f72 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005f72:	b480      	push	{r7}
 8005f74:	b083      	sub	sp, #12
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8005f7a:	bf00      	nop
 8005f7c:	370c      	adds	r7, #12
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr

08005f86 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005f86:	b480      	push	{r7}
 8005f88:	b083      	sub	sp, #12
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8005f8e:	bf00      	nop
 8005f90:	370c      	adds	r7, #12
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr

08005f9a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005f9a:	b480      	push	{r7}
 8005f9c:	b083      	sub	sp, #12
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8005fa2:	bf00      	nop
 8005fa4:	370c      	adds	r7, #12
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr

08005fae <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005fae:	b480      	push	{r7}
 8005fb0:	b083      	sub	sp, #12
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8005fb6:	bf00      	nop
 8005fb8:	370c      	adds	r7, #12
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr

08005fc2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005fc2:	b480      	push	{r7}
 8005fc4:	b083      	sub	sp, #12
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8005fca:	bf00      	nop
 8005fcc:	370c      	adds	r7, #12
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr

08005fd6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005fd6:	b480      	push	{r7}
 8005fd8:	b083      	sub	sp, #12
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8005fde:	bf00      	nop
 8005fe0:	370c      	adds	r7, #12
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr

08005fea <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8005fea:	b480      	push	{r7}
 8005fec:	b083      	sub	sp, #12
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8005ff2:	bf00      	nop
 8005ff4:	370c      	adds	r7, #12
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr

08005ffe <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8005ffe:	b480      	push	{r7}
 8006000:	b083      	sub	sp, #12
 8006002:	af00      	add	r7, sp, #0
 8006004:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8006006:	bf00      	nop
 8006008:	370c      	adds	r7, #12
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr

08006012 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8006012:	b480      	push	{r7}
 8006014:	b083      	sub	sp, #12
 8006016:	af00      	add	r7, sp, #0
 8006018:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800601a:	bf00      	nop
 800601c:	370c      	adds	r7, #12
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr

08006026 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8006026:	b480      	push	{r7}
 8006028:	b083      	sub	sp, #12
 800602a:	af00      	add	r7, sp, #0
 800602c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800602e:	bf00      	nop
 8006030:	370c      	adds	r7, #12
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr

0800603a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800603a:	b480      	push	{r7}
 800603c:	b083      	sub	sp, #12
 800603e:	af00      	add	r7, sp, #0
 8006040:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8006042:	bf00      	nop
 8006044:	370c      	adds	r7, #12
 8006046:	46bd      	mov	sp, r7
 8006048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604c:	4770      	bx	lr
	...

08006050 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006050:	b480      	push	{r7}
 8006052:	b085      	sub	sp, #20
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f003 0307 	and.w	r3, r3, #7
 800605e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006060:	4b0c      	ldr	r3, [pc, #48]	; (8006094 <__NVIC_SetPriorityGrouping+0x44>)
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006066:	68ba      	ldr	r2, [r7, #8]
 8006068:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800606c:	4013      	ands	r3, r2
 800606e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006078:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800607c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006080:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006082:	4a04      	ldr	r2, [pc, #16]	; (8006094 <__NVIC_SetPriorityGrouping+0x44>)
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	60d3      	str	r3, [r2, #12]
}
 8006088:	bf00      	nop
 800608a:	3714      	adds	r7, #20
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr
 8006094:	e000ed00 	.word	0xe000ed00

08006098 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006098:	b480      	push	{r7}
 800609a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800609c:	4b04      	ldr	r3, [pc, #16]	; (80060b0 <__NVIC_GetPriorityGrouping+0x18>)
 800609e:	68db      	ldr	r3, [r3, #12]
 80060a0:	0a1b      	lsrs	r3, r3, #8
 80060a2:	f003 0307 	and.w	r3, r3, #7
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr
 80060b0:	e000ed00 	.word	0xe000ed00

080060b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b083      	sub	sp, #12
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	4603      	mov	r3, r0
 80060bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80060be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	db0b      	blt.n	80060de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80060c6:	79fb      	ldrb	r3, [r7, #7]
 80060c8:	f003 021f 	and.w	r2, r3, #31
 80060cc:	4907      	ldr	r1, [pc, #28]	; (80060ec <__NVIC_EnableIRQ+0x38>)
 80060ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060d2:	095b      	lsrs	r3, r3, #5
 80060d4:	2001      	movs	r0, #1
 80060d6:	fa00 f202 	lsl.w	r2, r0, r2
 80060da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80060de:	bf00      	nop
 80060e0:	370c      	adds	r7, #12
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr
 80060ea:	bf00      	nop
 80060ec:	e000e100 	.word	0xe000e100

080060f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b083      	sub	sp, #12
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	4603      	mov	r3, r0
 80060f8:	6039      	str	r1, [r7, #0]
 80060fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80060fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006100:	2b00      	cmp	r3, #0
 8006102:	db0a      	blt.n	800611a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	b2da      	uxtb	r2, r3
 8006108:	490c      	ldr	r1, [pc, #48]	; (800613c <__NVIC_SetPriority+0x4c>)
 800610a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800610e:	0112      	lsls	r2, r2, #4
 8006110:	b2d2      	uxtb	r2, r2
 8006112:	440b      	add	r3, r1
 8006114:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006118:	e00a      	b.n	8006130 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	b2da      	uxtb	r2, r3
 800611e:	4908      	ldr	r1, [pc, #32]	; (8006140 <__NVIC_SetPriority+0x50>)
 8006120:	79fb      	ldrb	r3, [r7, #7]
 8006122:	f003 030f 	and.w	r3, r3, #15
 8006126:	3b04      	subs	r3, #4
 8006128:	0112      	lsls	r2, r2, #4
 800612a:	b2d2      	uxtb	r2, r2
 800612c:	440b      	add	r3, r1
 800612e:	761a      	strb	r2, [r3, #24]
}
 8006130:	bf00      	nop
 8006132:	370c      	adds	r7, #12
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr
 800613c:	e000e100 	.word	0xe000e100
 8006140:	e000ed00 	.word	0xe000ed00

08006144 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006144:	b480      	push	{r7}
 8006146:	b089      	sub	sp, #36	; 0x24
 8006148:	af00      	add	r7, sp, #0
 800614a:	60f8      	str	r0, [r7, #12]
 800614c:	60b9      	str	r1, [r7, #8]
 800614e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f003 0307 	and.w	r3, r3, #7
 8006156:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006158:	69fb      	ldr	r3, [r7, #28]
 800615a:	f1c3 0307 	rsb	r3, r3, #7
 800615e:	2b04      	cmp	r3, #4
 8006160:	bf28      	it	cs
 8006162:	2304      	movcs	r3, #4
 8006164:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006166:	69fb      	ldr	r3, [r7, #28]
 8006168:	3304      	adds	r3, #4
 800616a:	2b06      	cmp	r3, #6
 800616c:	d902      	bls.n	8006174 <NVIC_EncodePriority+0x30>
 800616e:	69fb      	ldr	r3, [r7, #28]
 8006170:	3b03      	subs	r3, #3
 8006172:	e000      	b.n	8006176 <NVIC_EncodePriority+0x32>
 8006174:	2300      	movs	r3, #0
 8006176:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006178:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800617c:	69bb      	ldr	r3, [r7, #24]
 800617e:	fa02 f303 	lsl.w	r3, r2, r3
 8006182:	43da      	mvns	r2, r3
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	401a      	ands	r2, r3
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800618c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	fa01 f303 	lsl.w	r3, r1, r3
 8006196:	43d9      	mvns	r1, r3
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800619c:	4313      	orrs	r3, r2
         );
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3724      	adds	r7, #36	; 0x24
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr
	...

080061ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b082      	sub	sp, #8
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	3b01      	subs	r3, #1
 80061b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80061bc:	d301      	bcc.n	80061c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80061be:	2301      	movs	r3, #1
 80061c0:	e00f      	b.n	80061e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80061c2:	4a0a      	ldr	r2, [pc, #40]	; (80061ec <SysTick_Config+0x40>)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	3b01      	subs	r3, #1
 80061c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80061ca:	210f      	movs	r1, #15
 80061cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80061d0:	f7ff ff8e 	bl	80060f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80061d4:	4b05      	ldr	r3, [pc, #20]	; (80061ec <SysTick_Config+0x40>)
 80061d6:	2200      	movs	r2, #0
 80061d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80061da:	4b04      	ldr	r3, [pc, #16]	; (80061ec <SysTick_Config+0x40>)
 80061dc:	2207      	movs	r2, #7
 80061de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80061e0:	2300      	movs	r3, #0
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3708      	adds	r7, #8
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}
 80061ea:	bf00      	nop
 80061ec:	e000e010 	.word	0xe000e010

080061f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b082      	sub	sp, #8
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f7ff ff29 	bl	8006050 <__NVIC_SetPriorityGrouping>
}
 80061fe:	bf00      	nop
 8006200:	3708      	adds	r7, #8
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}

08006206 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006206:	b580      	push	{r7, lr}
 8006208:	b086      	sub	sp, #24
 800620a:	af00      	add	r7, sp, #0
 800620c:	4603      	mov	r3, r0
 800620e:	60b9      	str	r1, [r7, #8]
 8006210:	607a      	str	r2, [r7, #4]
 8006212:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006214:	2300      	movs	r3, #0
 8006216:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006218:	f7ff ff3e 	bl	8006098 <__NVIC_GetPriorityGrouping>
 800621c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	68b9      	ldr	r1, [r7, #8]
 8006222:	6978      	ldr	r0, [r7, #20]
 8006224:	f7ff ff8e 	bl	8006144 <NVIC_EncodePriority>
 8006228:	4602      	mov	r2, r0
 800622a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800622e:	4611      	mov	r1, r2
 8006230:	4618      	mov	r0, r3
 8006232:	f7ff ff5d 	bl	80060f0 <__NVIC_SetPriority>
}
 8006236:	bf00      	nop
 8006238:	3718      	adds	r7, #24
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}

0800623e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800623e:	b580      	push	{r7, lr}
 8006240:	b082      	sub	sp, #8
 8006242:	af00      	add	r7, sp, #0
 8006244:	4603      	mov	r3, r0
 8006246:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006248:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800624c:	4618      	mov	r0, r3
 800624e:	f7ff ff31 	bl	80060b4 <__NVIC_EnableIRQ>
}
 8006252:	bf00      	nop
 8006254:	3708      	adds	r7, #8
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}

0800625a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800625a:	b580      	push	{r7, lr}
 800625c:	b082      	sub	sp, #8
 800625e:	af00      	add	r7, sp, #0
 8006260:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f7ff ffa2 	bl	80061ac <SysTick_Config>
 8006268:	4603      	mov	r3, r0
}
 800626a:	4618      	mov	r0, r3
 800626c:	3708      	adds	r7, #8
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
	...

08006274 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b086      	sub	sp, #24
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800627c:	2300      	movs	r3, #0
 800627e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006280:	f7fe ff92 	bl	80051a8 <HAL_GetTick>
 8006284:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d101      	bne.n	8006290 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800628c:	2301      	movs	r3, #1
 800628e:	e099      	b.n	80063c4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2200      	movs	r2, #0
 8006294:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2202      	movs	r2, #2
 800629c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f022 0201 	bic.w	r2, r2, #1
 80062ae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80062b0:	e00f      	b.n	80062d2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80062b2:	f7fe ff79 	bl	80051a8 <HAL_GetTick>
 80062b6:	4602      	mov	r2, r0
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	1ad3      	subs	r3, r2, r3
 80062bc:	2b05      	cmp	r3, #5
 80062be:	d908      	bls.n	80062d2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2220      	movs	r2, #32
 80062c4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2203      	movs	r2, #3
 80062ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80062ce:	2303      	movs	r3, #3
 80062d0:	e078      	b.n	80063c4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f003 0301 	and.w	r3, r3, #1
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d1e8      	bne.n	80062b2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80062e8:	697a      	ldr	r2, [r7, #20]
 80062ea:	4b38      	ldr	r3, [pc, #224]	; (80063cc <HAL_DMA_Init+0x158>)
 80062ec:	4013      	ands	r3, r2
 80062ee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	685a      	ldr	r2, [r3, #4]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80062fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	691b      	ldr	r3, [r3, #16]
 8006304:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800630a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	699b      	ldr	r3, [r3, #24]
 8006310:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006316:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6a1b      	ldr	r3, [r3, #32]
 800631c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800631e:	697a      	ldr	r2, [r7, #20]
 8006320:	4313      	orrs	r3, r2
 8006322:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006328:	2b04      	cmp	r3, #4
 800632a:	d107      	bne.n	800633c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006334:	4313      	orrs	r3, r2
 8006336:	697a      	ldr	r2, [r7, #20]
 8006338:	4313      	orrs	r3, r2
 800633a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	697a      	ldr	r2, [r7, #20]
 8006342:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	695b      	ldr	r3, [r3, #20]
 800634a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	f023 0307 	bic.w	r3, r3, #7
 8006352:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006358:	697a      	ldr	r2, [r7, #20]
 800635a:	4313      	orrs	r3, r2
 800635c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006362:	2b04      	cmp	r3, #4
 8006364:	d117      	bne.n	8006396 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800636a:	697a      	ldr	r2, [r7, #20]
 800636c:	4313      	orrs	r3, r2
 800636e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006374:	2b00      	cmp	r3, #0
 8006376:	d00e      	beq.n	8006396 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f000 fa9f 	bl	80068bc <DMA_CheckFifoParam>
 800637e:	4603      	mov	r3, r0
 8006380:	2b00      	cmp	r3, #0
 8006382:	d008      	beq.n	8006396 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2240      	movs	r2, #64	; 0x40
 8006388:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2201      	movs	r2, #1
 800638e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006392:	2301      	movs	r3, #1
 8006394:	e016      	b.n	80063c4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	697a      	ldr	r2, [r7, #20]
 800639c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f000 fa56 	bl	8006850 <DMA_CalcBaseAndBitshift>
 80063a4:	4603      	mov	r3, r0
 80063a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063ac:	223f      	movs	r2, #63	; 0x3f
 80063ae:	409a      	lsls	r2, r3
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2200      	movs	r2, #0
 80063b8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2201      	movs	r2, #1
 80063be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80063c2:	2300      	movs	r3, #0
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3718      	adds	r7, #24
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}
 80063cc:	f010803f 	.word	0xf010803f

080063d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b086      	sub	sp, #24
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	60f8      	str	r0, [r7, #12]
 80063d8:	60b9      	str	r1, [r7, #8]
 80063da:	607a      	str	r2, [r7, #4]
 80063dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80063de:	2300      	movs	r3, #0
 80063e0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063e6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d101      	bne.n	80063f6 <HAL_DMA_Start_IT+0x26>
 80063f2:	2302      	movs	r3, #2
 80063f4:	e040      	b.n	8006478 <HAL_DMA_Start_IT+0xa8>
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2201      	movs	r2, #1
 80063fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006404:	b2db      	uxtb	r3, r3
 8006406:	2b01      	cmp	r3, #1
 8006408:	d12f      	bne.n	800646a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2202      	movs	r2, #2
 800640e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2200      	movs	r2, #0
 8006416:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	687a      	ldr	r2, [r7, #4]
 800641c:	68b9      	ldr	r1, [r7, #8]
 800641e:	68f8      	ldr	r0, [r7, #12]
 8006420:	f000 f9e8 	bl	80067f4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006428:	223f      	movs	r2, #63	; 0x3f
 800642a:	409a      	lsls	r2, r3
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f042 0216 	orr.w	r2, r2, #22
 800643e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006444:	2b00      	cmp	r3, #0
 8006446:	d007      	beq.n	8006458 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f042 0208 	orr.w	r2, r2, #8
 8006456:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f042 0201 	orr.w	r2, r2, #1
 8006466:	601a      	str	r2, [r3, #0]
 8006468:	e005      	b.n	8006476 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2200      	movs	r2, #0
 800646e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006472:	2302      	movs	r3, #2
 8006474:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006476:	7dfb      	ldrb	r3, [r7, #23]
}
 8006478:	4618      	mov	r0, r3
 800647a:	3718      	adds	r7, #24
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}

08006480 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006480:	b480      	push	{r7}
 8006482:	b083      	sub	sp, #12
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800648e:	b2db      	uxtb	r3, r3
 8006490:	2b02      	cmp	r3, #2
 8006492:	d004      	beq.n	800649e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2280      	movs	r2, #128	; 0x80
 8006498:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	e00c      	b.n	80064b8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2205      	movs	r2, #5
 80064a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	681a      	ldr	r2, [r3, #0]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f022 0201 	bic.w	r2, r2, #1
 80064b4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80064b6:	2300      	movs	r3, #0
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	370c      	adds	r7, #12
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr

080064c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b086      	sub	sp, #24
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80064cc:	2300      	movs	r3, #0
 80064ce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80064d0:	4b8e      	ldr	r3, [pc, #568]	; (800670c <HAL_DMA_IRQHandler+0x248>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a8e      	ldr	r2, [pc, #568]	; (8006710 <HAL_DMA_IRQHandler+0x24c>)
 80064d6:	fba2 2303 	umull	r2, r3, r2, r3
 80064da:	0a9b      	lsrs	r3, r3, #10
 80064dc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064e2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064ee:	2208      	movs	r2, #8
 80064f0:	409a      	lsls	r2, r3
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	4013      	ands	r3, r2
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d01a      	beq.n	8006530 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f003 0304 	and.w	r3, r3, #4
 8006504:	2b00      	cmp	r3, #0
 8006506:	d013      	beq.n	8006530 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f022 0204 	bic.w	r2, r2, #4
 8006516:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800651c:	2208      	movs	r2, #8
 800651e:	409a      	lsls	r2, r3
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006528:	f043 0201 	orr.w	r2, r3, #1
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006534:	2201      	movs	r2, #1
 8006536:	409a      	lsls	r2, r3
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	4013      	ands	r3, r2
 800653c:	2b00      	cmp	r3, #0
 800653e:	d012      	beq.n	8006566 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	695b      	ldr	r3, [r3, #20]
 8006546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800654a:	2b00      	cmp	r3, #0
 800654c:	d00b      	beq.n	8006566 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006552:	2201      	movs	r2, #1
 8006554:	409a      	lsls	r2, r3
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800655e:	f043 0202 	orr.w	r2, r3, #2
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800656a:	2204      	movs	r2, #4
 800656c:	409a      	lsls	r2, r3
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	4013      	ands	r3, r2
 8006572:	2b00      	cmp	r3, #0
 8006574:	d012      	beq.n	800659c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f003 0302 	and.w	r3, r3, #2
 8006580:	2b00      	cmp	r3, #0
 8006582:	d00b      	beq.n	800659c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006588:	2204      	movs	r2, #4
 800658a:	409a      	lsls	r2, r3
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006594:	f043 0204 	orr.w	r2, r3, #4
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065a0:	2210      	movs	r2, #16
 80065a2:	409a      	lsls	r2, r3
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	4013      	ands	r3, r2
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d043      	beq.n	8006634 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f003 0308 	and.w	r3, r3, #8
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d03c      	beq.n	8006634 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065be:	2210      	movs	r2, #16
 80065c0:	409a      	lsls	r2, r3
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d018      	beq.n	8006606 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d108      	bne.n	80065f4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d024      	beq.n	8006634 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	4798      	blx	r3
 80065f2:	e01f      	b.n	8006634 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d01b      	beq.n	8006634 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	4798      	blx	r3
 8006604:	e016      	b.n	8006634 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006610:	2b00      	cmp	r3, #0
 8006612:	d107      	bne.n	8006624 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	681a      	ldr	r2, [r3, #0]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f022 0208 	bic.w	r2, r2, #8
 8006622:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006628:	2b00      	cmp	r3, #0
 800662a:	d003      	beq.n	8006634 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006638:	2220      	movs	r2, #32
 800663a:	409a      	lsls	r2, r3
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	4013      	ands	r3, r2
 8006640:	2b00      	cmp	r3, #0
 8006642:	f000 808f 	beq.w	8006764 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f003 0310 	and.w	r3, r3, #16
 8006650:	2b00      	cmp	r3, #0
 8006652:	f000 8087 	beq.w	8006764 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800665a:	2220      	movs	r2, #32
 800665c:	409a      	lsls	r2, r3
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006668:	b2db      	uxtb	r3, r3
 800666a:	2b05      	cmp	r3, #5
 800666c:	d136      	bne.n	80066dc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	681a      	ldr	r2, [r3, #0]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f022 0216 	bic.w	r2, r2, #22
 800667c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	695a      	ldr	r2, [r3, #20]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800668c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006692:	2b00      	cmp	r3, #0
 8006694:	d103      	bne.n	800669e <HAL_DMA_IRQHandler+0x1da>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800669a:	2b00      	cmp	r3, #0
 800669c:	d007      	beq.n	80066ae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f022 0208 	bic.w	r2, r2, #8
 80066ac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066b2:	223f      	movs	r2, #63	; 0x3f
 80066b4:	409a      	lsls	r2, r3
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2200      	movs	r2, #0
 80066be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2201      	movs	r2, #1
 80066c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d07e      	beq.n	80067d0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	4798      	blx	r3
        }
        return;
 80066da:	e079      	b.n	80067d0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d01d      	beq.n	8006726 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d10d      	bne.n	8006714 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d031      	beq.n	8006764 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	4798      	blx	r3
 8006708:	e02c      	b.n	8006764 <HAL_DMA_IRQHandler+0x2a0>
 800670a:	bf00      	nop
 800670c:	2000000c 	.word	0x2000000c
 8006710:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006718:	2b00      	cmp	r3, #0
 800671a:	d023      	beq.n	8006764 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	4798      	blx	r3
 8006724:	e01e      	b.n	8006764 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006730:	2b00      	cmp	r3, #0
 8006732:	d10f      	bne.n	8006754 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f022 0210 	bic.w	r2, r2, #16
 8006742:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2200      	movs	r2, #0
 8006748:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2201      	movs	r2, #1
 8006750:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006758:	2b00      	cmp	r3, #0
 800675a:	d003      	beq.n	8006764 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006768:	2b00      	cmp	r3, #0
 800676a:	d032      	beq.n	80067d2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006770:	f003 0301 	and.w	r3, r3, #1
 8006774:	2b00      	cmp	r3, #0
 8006776:	d022      	beq.n	80067be <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2205      	movs	r2, #5
 800677c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f022 0201 	bic.w	r2, r2, #1
 800678e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	3301      	adds	r3, #1
 8006794:	60bb      	str	r3, [r7, #8]
 8006796:	697a      	ldr	r2, [r7, #20]
 8006798:	429a      	cmp	r2, r3
 800679a:	d307      	bcc.n	80067ac <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f003 0301 	and.w	r3, r3, #1
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d1f2      	bne.n	8006790 <HAL_DMA_IRQHandler+0x2cc>
 80067aa:	e000      	b.n	80067ae <HAL_DMA_IRQHandler+0x2ea>
          break;
 80067ac:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2200      	movs	r2, #0
 80067b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2201      	movs	r2, #1
 80067ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d005      	beq.n	80067d2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	4798      	blx	r3
 80067ce:	e000      	b.n	80067d2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80067d0:	bf00      	nop
    }
  }
}
 80067d2:	3718      	adds	r7, #24
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}

080067d8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80067d8:	b480      	push	{r7}
 80067da:	b083      	sub	sp, #12
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80067e6:	b2db      	uxtb	r3, r3
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	370c      	adds	r7, #12
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr

080067f4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b085      	sub	sp, #20
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	60f8      	str	r0, [r7, #12]
 80067fc:	60b9      	str	r1, [r7, #8]
 80067fe:	607a      	str	r2, [r7, #4]
 8006800:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	681a      	ldr	r2, [r3, #0]
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006810:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	683a      	ldr	r2, [r7, #0]
 8006818:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	689b      	ldr	r3, [r3, #8]
 800681e:	2b40      	cmp	r3, #64	; 0x40
 8006820:	d108      	bne.n	8006834 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	687a      	ldr	r2, [r7, #4]
 8006828:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	68ba      	ldr	r2, [r7, #8]
 8006830:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006832:	e007      	b.n	8006844 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	68ba      	ldr	r2, [r7, #8]
 800683a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	687a      	ldr	r2, [r7, #4]
 8006842:	60da      	str	r2, [r3, #12]
}
 8006844:	bf00      	nop
 8006846:	3714      	adds	r7, #20
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr

08006850 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006850:	b480      	push	{r7}
 8006852:	b085      	sub	sp, #20
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	b2db      	uxtb	r3, r3
 800685e:	3b10      	subs	r3, #16
 8006860:	4a14      	ldr	r2, [pc, #80]	; (80068b4 <DMA_CalcBaseAndBitshift+0x64>)
 8006862:	fba2 2303 	umull	r2, r3, r2, r3
 8006866:	091b      	lsrs	r3, r3, #4
 8006868:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800686a:	4a13      	ldr	r2, [pc, #76]	; (80068b8 <DMA_CalcBaseAndBitshift+0x68>)
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	4413      	add	r3, r2
 8006870:	781b      	ldrb	r3, [r3, #0]
 8006872:	461a      	mov	r2, r3
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2b03      	cmp	r3, #3
 800687c:	d909      	bls.n	8006892 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006886:	f023 0303 	bic.w	r3, r3, #3
 800688a:	1d1a      	adds	r2, r3, #4
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	659a      	str	r2, [r3, #88]	; 0x58
 8006890:	e007      	b.n	80068a2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800689a:	f023 0303 	bic.w	r3, r3, #3
 800689e:	687a      	ldr	r2, [r7, #4]
 80068a0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3714      	adds	r7, #20
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr
 80068b2:	bf00      	nop
 80068b4:	aaaaaaab 	.word	0xaaaaaaab
 80068b8:	0800bc40 	.word	0x0800bc40

080068bc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80068bc:	b480      	push	{r7}
 80068be:	b085      	sub	sp, #20
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80068c4:	2300      	movs	r3, #0
 80068c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068cc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	699b      	ldr	r3, [r3, #24]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d11f      	bne.n	8006916 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	2b03      	cmp	r3, #3
 80068da:	d856      	bhi.n	800698a <DMA_CheckFifoParam+0xce>
 80068dc:	a201      	add	r2, pc, #4	; (adr r2, 80068e4 <DMA_CheckFifoParam+0x28>)
 80068de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068e2:	bf00      	nop
 80068e4:	080068f5 	.word	0x080068f5
 80068e8:	08006907 	.word	0x08006907
 80068ec:	080068f5 	.word	0x080068f5
 80068f0:	0800698b 	.word	0x0800698b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d046      	beq.n	800698e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006900:	2301      	movs	r3, #1
 8006902:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006904:	e043      	b.n	800698e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800690a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800690e:	d140      	bne.n	8006992 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006910:	2301      	movs	r3, #1
 8006912:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006914:	e03d      	b.n	8006992 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	699b      	ldr	r3, [r3, #24]
 800691a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800691e:	d121      	bne.n	8006964 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	2b03      	cmp	r3, #3
 8006924:	d837      	bhi.n	8006996 <DMA_CheckFifoParam+0xda>
 8006926:	a201      	add	r2, pc, #4	; (adr r2, 800692c <DMA_CheckFifoParam+0x70>)
 8006928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800692c:	0800693d 	.word	0x0800693d
 8006930:	08006943 	.word	0x08006943
 8006934:	0800693d 	.word	0x0800693d
 8006938:	08006955 	.word	0x08006955
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800693c:	2301      	movs	r3, #1
 800693e:	73fb      	strb	r3, [r7, #15]
      break;
 8006940:	e030      	b.n	80069a4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006946:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800694a:	2b00      	cmp	r3, #0
 800694c:	d025      	beq.n	800699a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006952:	e022      	b.n	800699a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006958:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800695c:	d11f      	bne.n	800699e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006962:	e01c      	b.n	800699e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	2b02      	cmp	r3, #2
 8006968:	d903      	bls.n	8006972 <DMA_CheckFifoParam+0xb6>
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	2b03      	cmp	r3, #3
 800696e:	d003      	beq.n	8006978 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006970:	e018      	b.n	80069a4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006972:	2301      	movs	r3, #1
 8006974:	73fb      	strb	r3, [r7, #15]
      break;
 8006976:	e015      	b.n	80069a4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800697c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006980:	2b00      	cmp	r3, #0
 8006982:	d00e      	beq.n	80069a2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006984:	2301      	movs	r3, #1
 8006986:	73fb      	strb	r3, [r7, #15]
      break;
 8006988:	e00b      	b.n	80069a2 <DMA_CheckFifoParam+0xe6>
      break;
 800698a:	bf00      	nop
 800698c:	e00a      	b.n	80069a4 <DMA_CheckFifoParam+0xe8>
      break;
 800698e:	bf00      	nop
 8006990:	e008      	b.n	80069a4 <DMA_CheckFifoParam+0xe8>
      break;
 8006992:	bf00      	nop
 8006994:	e006      	b.n	80069a4 <DMA_CheckFifoParam+0xe8>
      break;
 8006996:	bf00      	nop
 8006998:	e004      	b.n	80069a4 <DMA_CheckFifoParam+0xe8>
      break;
 800699a:	bf00      	nop
 800699c:	e002      	b.n	80069a4 <DMA_CheckFifoParam+0xe8>
      break;   
 800699e:	bf00      	nop
 80069a0:	e000      	b.n	80069a4 <DMA_CheckFifoParam+0xe8>
      break;
 80069a2:	bf00      	nop
    }
  } 
  
  return status; 
 80069a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3714      	adds	r7, #20
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr
 80069b2:	bf00      	nop

080069b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b089      	sub	sp, #36	; 0x24
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80069be:	2300      	movs	r3, #0
 80069c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80069c2:	2300      	movs	r3, #0
 80069c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80069c6:	2300      	movs	r3, #0
 80069c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80069ca:	2300      	movs	r3, #0
 80069cc:	61fb      	str	r3, [r7, #28]
 80069ce:	e16b      	b.n	8006ca8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80069d0:	2201      	movs	r2, #1
 80069d2:	69fb      	ldr	r3, [r7, #28]
 80069d4:	fa02 f303 	lsl.w	r3, r2, r3
 80069d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	697a      	ldr	r2, [r7, #20]
 80069e0:	4013      	ands	r3, r2
 80069e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80069e4:	693a      	ldr	r2, [r7, #16]
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	429a      	cmp	r2, r3
 80069ea:	f040 815a 	bne.w	8006ca2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	2b01      	cmp	r3, #1
 80069f4:	d00b      	beq.n	8006a0e <HAL_GPIO_Init+0x5a>
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	2b02      	cmp	r3, #2
 80069fc:	d007      	beq.n	8006a0e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006a02:	2b11      	cmp	r3, #17
 8006a04:	d003      	beq.n	8006a0e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	2b12      	cmp	r3, #18
 8006a0c:	d130      	bne.n	8006a70 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006a14:	69fb      	ldr	r3, [r7, #28]
 8006a16:	005b      	lsls	r3, r3, #1
 8006a18:	2203      	movs	r2, #3
 8006a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a1e:	43db      	mvns	r3, r3
 8006a20:	69ba      	ldr	r2, [r7, #24]
 8006a22:	4013      	ands	r3, r2
 8006a24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	68da      	ldr	r2, [r3, #12]
 8006a2a:	69fb      	ldr	r3, [r7, #28]
 8006a2c:	005b      	lsls	r3, r3, #1
 8006a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a32:	69ba      	ldr	r2, [r7, #24]
 8006a34:	4313      	orrs	r3, r2
 8006a36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	69ba      	ldr	r2, [r7, #24]
 8006a3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006a44:	2201      	movs	r2, #1
 8006a46:	69fb      	ldr	r3, [r7, #28]
 8006a48:	fa02 f303 	lsl.w	r3, r2, r3
 8006a4c:	43db      	mvns	r3, r3
 8006a4e:	69ba      	ldr	r2, [r7, #24]
 8006a50:	4013      	ands	r3, r2
 8006a52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	091b      	lsrs	r3, r3, #4
 8006a5a:	f003 0201 	and.w	r2, r3, #1
 8006a5e:	69fb      	ldr	r3, [r7, #28]
 8006a60:	fa02 f303 	lsl.w	r3, r2, r3
 8006a64:	69ba      	ldr	r2, [r7, #24]
 8006a66:	4313      	orrs	r3, r2
 8006a68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	69ba      	ldr	r2, [r7, #24]
 8006a6e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	68db      	ldr	r3, [r3, #12]
 8006a74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006a76:	69fb      	ldr	r3, [r7, #28]
 8006a78:	005b      	lsls	r3, r3, #1
 8006a7a:	2203      	movs	r2, #3
 8006a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a80:	43db      	mvns	r3, r3
 8006a82:	69ba      	ldr	r2, [r7, #24]
 8006a84:	4013      	ands	r3, r2
 8006a86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	689a      	ldr	r2, [r3, #8]
 8006a8c:	69fb      	ldr	r3, [r7, #28]
 8006a8e:	005b      	lsls	r3, r3, #1
 8006a90:	fa02 f303 	lsl.w	r3, r2, r3
 8006a94:	69ba      	ldr	r2, [r7, #24]
 8006a96:	4313      	orrs	r3, r2
 8006a98:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	69ba      	ldr	r2, [r7, #24]
 8006a9e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	2b02      	cmp	r3, #2
 8006aa6:	d003      	beq.n	8006ab0 <HAL_GPIO_Init+0xfc>
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	2b12      	cmp	r3, #18
 8006aae:	d123      	bne.n	8006af8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006ab0:	69fb      	ldr	r3, [r7, #28]
 8006ab2:	08da      	lsrs	r2, r3, #3
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	3208      	adds	r2, #8
 8006ab8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006abc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006abe:	69fb      	ldr	r3, [r7, #28]
 8006ac0:	f003 0307 	and.w	r3, r3, #7
 8006ac4:	009b      	lsls	r3, r3, #2
 8006ac6:	220f      	movs	r2, #15
 8006ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8006acc:	43db      	mvns	r3, r3
 8006ace:	69ba      	ldr	r2, [r7, #24]
 8006ad0:	4013      	ands	r3, r2
 8006ad2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	691a      	ldr	r2, [r3, #16]
 8006ad8:	69fb      	ldr	r3, [r7, #28]
 8006ada:	f003 0307 	and.w	r3, r3, #7
 8006ade:	009b      	lsls	r3, r3, #2
 8006ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ae4:	69ba      	ldr	r2, [r7, #24]
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006aea:	69fb      	ldr	r3, [r7, #28]
 8006aec:	08da      	lsrs	r2, r3, #3
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	3208      	adds	r2, #8
 8006af2:	69b9      	ldr	r1, [r7, #24]
 8006af4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006afe:	69fb      	ldr	r3, [r7, #28]
 8006b00:	005b      	lsls	r3, r3, #1
 8006b02:	2203      	movs	r2, #3
 8006b04:	fa02 f303 	lsl.w	r3, r2, r3
 8006b08:	43db      	mvns	r3, r3
 8006b0a:	69ba      	ldr	r2, [r7, #24]
 8006b0c:	4013      	ands	r3, r2
 8006b0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	f003 0203 	and.w	r2, r3, #3
 8006b18:	69fb      	ldr	r3, [r7, #28]
 8006b1a:	005b      	lsls	r3, r3, #1
 8006b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b20:	69ba      	ldr	r2, [r7, #24]
 8006b22:	4313      	orrs	r3, r2
 8006b24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	69ba      	ldr	r2, [r7, #24]
 8006b2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	f000 80b4 	beq.w	8006ca2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	60fb      	str	r3, [r7, #12]
 8006b3e:	4b60      	ldr	r3, [pc, #384]	; (8006cc0 <HAL_GPIO_Init+0x30c>)
 8006b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b42:	4a5f      	ldr	r2, [pc, #380]	; (8006cc0 <HAL_GPIO_Init+0x30c>)
 8006b44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006b48:	6453      	str	r3, [r2, #68]	; 0x44
 8006b4a:	4b5d      	ldr	r3, [pc, #372]	; (8006cc0 <HAL_GPIO_Init+0x30c>)
 8006b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b52:	60fb      	str	r3, [r7, #12]
 8006b54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006b56:	4a5b      	ldr	r2, [pc, #364]	; (8006cc4 <HAL_GPIO_Init+0x310>)
 8006b58:	69fb      	ldr	r3, [r7, #28]
 8006b5a:	089b      	lsrs	r3, r3, #2
 8006b5c:	3302      	adds	r3, #2
 8006b5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006b64:	69fb      	ldr	r3, [r7, #28]
 8006b66:	f003 0303 	and.w	r3, r3, #3
 8006b6a:	009b      	lsls	r3, r3, #2
 8006b6c:	220f      	movs	r2, #15
 8006b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b72:	43db      	mvns	r3, r3
 8006b74:	69ba      	ldr	r2, [r7, #24]
 8006b76:	4013      	ands	r3, r2
 8006b78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	4a52      	ldr	r2, [pc, #328]	; (8006cc8 <HAL_GPIO_Init+0x314>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d02b      	beq.n	8006bda <HAL_GPIO_Init+0x226>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	4a51      	ldr	r2, [pc, #324]	; (8006ccc <HAL_GPIO_Init+0x318>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d025      	beq.n	8006bd6 <HAL_GPIO_Init+0x222>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	4a50      	ldr	r2, [pc, #320]	; (8006cd0 <HAL_GPIO_Init+0x31c>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d01f      	beq.n	8006bd2 <HAL_GPIO_Init+0x21e>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	4a4f      	ldr	r2, [pc, #316]	; (8006cd4 <HAL_GPIO_Init+0x320>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d019      	beq.n	8006bce <HAL_GPIO_Init+0x21a>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	4a4e      	ldr	r2, [pc, #312]	; (8006cd8 <HAL_GPIO_Init+0x324>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d013      	beq.n	8006bca <HAL_GPIO_Init+0x216>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	4a4d      	ldr	r2, [pc, #308]	; (8006cdc <HAL_GPIO_Init+0x328>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d00d      	beq.n	8006bc6 <HAL_GPIO_Init+0x212>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	4a4c      	ldr	r2, [pc, #304]	; (8006ce0 <HAL_GPIO_Init+0x32c>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d007      	beq.n	8006bc2 <HAL_GPIO_Init+0x20e>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	4a4b      	ldr	r2, [pc, #300]	; (8006ce4 <HAL_GPIO_Init+0x330>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d101      	bne.n	8006bbe <HAL_GPIO_Init+0x20a>
 8006bba:	2307      	movs	r3, #7
 8006bbc:	e00e      	b.n	8006bdc <HAL_GPIO_Init+0x228>
 8006bbe:	2308      	movs	r3, #8
 8006bc0:	e00c      	b.n	8006bdc <HAL_GPIO_Init+0x228>
 8006bc2:	2306      	movs	r3, #6
 8006bc4:	e00a      	b.n	8006bdc <HAL_GPIO_Init+0x228>
 8006bc6:	2305      	movs	r3, #5
 8006bc8:	e008      	b.n	8006bdc <HAL_GPIO_Init+0x228>
 8006bca:	2304      	movs	r3, #4
 8006bcc:	e006      	b.n	8006bdc <HAL_GPIO_Init+0x228>
 8006bce:	2303      	movs	r3, #3
 8006bd0:	e004      	b.n	8006bdc <HAL_GPIO_Init+0x228>
 8006bd2:	2302      	movs	r3, #2
 8006bd4:	e002      	b.n	8006bdc <HAL_GPIO_Init+0x228>
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	e000      	b.n	8006bdc <HAL_GPIO_Init+0x228>
 8006bda:	2300      	movs	r3, #0
 8006bdc:	69fa      	ldr	r2, [r7, #28]
 8006bde:	f002 0203 	and.w	r2, r2, #3
 8006be2:	0092      	lsls	r2, r2, #2
 8006be4:	4093      	lsls	r3, r2
 8006be6:	69ba      	ldr	r2, [r7, #24]
 8006be8:	4313      	orrs	r3, r2
 8006bea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006bec:	4935      	ldr	r1, [pc, #212]	; (8006cc4 <HAL_GPIO_Init+0x310>)
 8006bee:	69fb      	ldr	r3, [r7, #28]
 8006bf0:	089b      	lsrs	r3, r3, #2
 8006bf2:	3302      	adds	r3, #2
 8006bf4:	69ba      	ldr	r2, [r7, #24]
 8006bf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006bfa:	4b3b      	ldr	r3, [pc, #236]	; (8006ce8 <HAL_GPIO_Init+0x334>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	43db      	mvns	r3, r3
 8006c04:	69ba      	ldr	r2, [r7, #24]
 8006c06:	4013      	ands	r3, r2
 8006c08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d003      	beq.n	8006c1e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006c16:	69ba      	ldr	r2, [r7, #24]
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006c1e:	4a32      	ldr	r2, [pc, #200]	; (8006ce8 <HAL_GPIO_Init+0x334>)
 8006c20:	69bb      	ldr	r3, [r7, #24]
 8006c22:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006c24:	4b30      	ldr	r3, [pc, #192]	; (8006ce8 <HAL_GPIO_Init+0x334>)
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	43db      	mvns	r3, r3
 8006c2e:	69ba      	ldr	r2, [r7, #24]
 8006c30:	4013      	ands	r3, r2
 8006c32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d003      	beq.n	8006c48 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006c40:	69ba      	ldr	r2, [r7, #24]
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	4313      	orrs	r3, r2
 8006c46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006c48:	4a27      	ldr	r2, [pc, #156]	; (8006ce8 <HAL_GPIO_Init+0x334>)
 8006c4a:	69bb      	ldr	r3, [r7, #24]
 8006c4c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006c4e:	4b26      	ldr	r3, [pc, #152]	; (8006ce8 <HAL_GPIO_Init+0x334>)
 8006c50:	689b      	ldr	r3, [r3, #8]
 8006c52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	43db      	mvns	r3, r3
 8006c58:	69ba      	ldr	r2, [r7, #24]
 8006c5a:	4013      	ands	r3, r2
 8006c5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d003      	beq.n	8006c72 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006c6a:	69ba      	ldr	r2, [r7, #24]
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006c72:	4a1d      	ldr	r2, [pc, #116]	; (8006ce8 <HAL_GPIO_Init+0x334>)
 8006c74:	69bb      	ldr	r3, [r7, #24]
 8006c76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006c78:	4b1b      	ldr	r3, [pc, #108]	; (8006ce8 <HAL_GPIO_Init+0x334>)
 8006c7a:	68db      	ldr	r3, [r3, #12]
 8006c7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	43db      	mvns	r3, r3
 8006c82:	69ba      	ldr	r2, [r7, #24]
 8006c84:	4013      	ands	r3, r2
 8006c86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	685b      	ldr	r3, [r3, #4]
 8006c8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d003      	beq.n	8006c9c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006c94:	69ba      	ldr	r2, [r7, #24]
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006c9c:	4a12      	ldr	r2, [pc, #72]	; (8006ce8 <HAL_GPIO_Init+0x334>)
 8006c9e:	69bb      	ldr	r3, [r7, #24]
 8006ca0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006ca2:	69fb      	ldr	r3, [r7, #28]
 8006ca4:	3301      	adds	r3, #1
 8006ca6:	61fb      	str	r3, [r7, #28]
 8006ca8:	69fb      	ldr	r3, [r7, #28]
 8006caa:	2b0f      	cmp	r3, #15
 8006cac:	f67f ae90 	bls.w	80069d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006cb0:	bf00      	nop
 8006cb2:	bf00      	nop
 8006cb4:	3724      	adds	r7, #36	; 0x24
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbc:	4770      	bx	lr
 8006cbe:	bf00      	nop
 8006cc0:	40023800 	.word	0x40023800
 8006cc4:	40013800 	.word	0x40013800
 8006cc8:	40020000 	.word	0x40020000
 8006ccc:	40020400 	.word	0x40020400
 8006cd0:	40020800 	.word	0x40020800
 8006cd4:	40020c00 	.word	0x40020c00
 8006cd8:	40021000 	.word	0x40021000
 8006cdc:	40021400 	.word	0x40021400
 8006ce0:	40021800 	.word	0x40021800
 8006ce4:	40021c00 	.word	0x40021c00
 8006ce8:	40013c00 	.word	0x40013c00

08006cec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b085      	sub	sp, #20
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
 8006cf4:	460b      	mov	r3, r1
 8006cf6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	691a      	ldr	r2, [r3, #16]
 8006cfc:	887b      	ldrh	r3, [r7, #2]
 8006cfe:	4013      	ands	r3, r2
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d002      	beq.n	8006d0a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006d04:	2301      	movs	r3, #1
 8006d06:	73fb      	strb	r3, [r7, #15]
 8006d08:	e001      	b.n	8006d0e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3714      	adds	r7, #20
 8006d14:	46bd      	mov	sp, r7
 8006d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1a:	4770      	bx	lr

08006d1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b083      	sub	sp, #12
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
 8006d24:	460b      	mov	r3, r1
 8006d26:	807b      	strh	r3, [r7, #2]
 8006d28:	4613      	mov	r3, r2
 8006d2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006d2c:	787b      	ldrb	r3, [r7, #1]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d003      	beq.n	8006d3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006d32:	887a      	ldrh	r2, [r7, #2]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006d38:	e003      	b.n	8006d42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006d3a:	887b      	ldrh	r3, [r7, #2]
 8006d3c:	041a      	lsls	r2, r3, #16
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	619a      	str	r2, [r3, #24]
}
 8006d42:	bf00      	nop
 8006d44:	370c      	adds	r7, #12
 8006d46:	46bd      	mov	sp, r7
 8006d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4c:	4770      	bx	lr

08006d4e <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006d4e:	b580      	push	{r7, lr}
 8006d50:	b088      	sub	sp, #32
 8006d52:	af00      	add	r7, sp, #0
 8006d54:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8006d56:	2300      	movs	r3, #0
 8006d58:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d66:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d6e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d76:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006d78:	7bfb      	ldrb	r3, [r7, #15]
 8006d7a:	2b10      	cmp	r3, #16
 8006d7c:	d003      	beq.n	8006d86 <HAL_I2C_EV_IRQHandler+0x38>
 8006d7e:	7bfb      	ldrb	r3, [r7, #15]
 8006d80:	2b40      	cmp	r3, #64	; 0x40
 8006d82:	f040 80bd 	bne.w	8006f00 <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	699b      	ldr	r3, [r3, #24]
 8006d8c:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	695b      	ldr	r3, [r3, #20]
 8006d94:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8006d96:	69fb      	ldr	r3, [r7, #28]
 8006d98:	f003 0301 	and.w	r3, r3, #1
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d10d      	bne.n	8006dbc <HAL_I2C_EV_IRQHandler+0x6e>
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006da6:	d003      	beq.n	8006db0 <HAL_I2C_EV_IRQHandler+0x62>
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006dae:	d101      	bne.n	8006db4 <HAL_I2C_EV_IRQHandler+0x66>
 8006db0:	2301      	movs	r3, #1
 8006db2:	e000      	b.n	8006db6 <HAL_I2C_EV_IRQHandler+0x68>
 8006db4:	2300      	movs	r3, #0
 8006db6:	2b01      	cmp	r3, #1
 8006db8:	f000 812e 	beq.w	8007018 <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006dbc:	69fb      	ldr	r3, [r7, #28]
 8006dbe:	f003 0301 	and.w	r3, r3, #1
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d00c      	beq.n	8006de0 <HAL_I2C_EV_IRQHandler+0x92>
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	0a5b      	lsrs	r3, r3, #9
 8006dca:	f003 0301 	and.w	r3, r3, #1
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d006      	beq.n	8006de0 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f001 fc4a 	bl	800866c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f000 fd58 	bl	800788e <I2C_Master_SB>
 8006dde:	e08e      	b.n	8006efe <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006de0:	69fb      	ldr	r3, [r7, #28]
 8006de2:	08db      	lsrs	r3, r3, #3
 8006de4:	f003 0301 	and.w	r3, r3, #1
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d009      	beq.n	8006e00 <HAL_I2C_EV_IRQHandler+0xb2>
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	0a5b      	lsrs	r3, r3, #9
 8006df0:	f003 0301 	and.w	r3, r3, #1
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d003      	beq.n	8006e00 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f000 fdce 	bl	800799a <I2C_Master_ADD10>
 8006dfe:	e07e      	b.n	8006efe <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006e00:	69fb      	ldr	r3, [r7, #28]
 8006e02:	085b      	lsrs	r3, r3, #1
 8006e04:	f003 0301 	and.w	r3, r3, #1
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d009      	beq.n	8006e20 <HAL_I2C_EV_IRQHandler+0xd2>
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	0a5b      	lsrs	r3, r3, #9
 8006e10:	f003 0301 	and.w	r3, r3, #1
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d003      	beq.n	8006e20 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f000 fde8 	bl	80079ee <I2C_Master_ADDR>
 8006e1e:	e06e      	b.n	8006efe <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8006e20:	69bb      	ldr	r3, [r7, #24]
 8006e22:	089b      	lsrs	r3, r3, #2
 8006e24:	f003 0301 	and.w	r3, r3, #1
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d037      	beq.n	8006e9c <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	685b      	ldr	r3, [r3, #4]
 8006e32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e3a:	f000 80ef 	beq.w	800701c <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006e3e:	69fb      	ldr	r3, [r7, #28]
 8006e40:	09db      	lsrs	r3, r3, #7
 8006e42:	f003 0301 	and.w	r3, r3, #1
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d00f      	beq.n	8006e6a <HAL_I2C_EV_IRQHandler+0x11c>
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	0a9b      	lsrs	r3, r3, #10
 8006e4e:	f003 0301 	and.w	r3, r3, #1
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d009      	beq.n	8006e6a <HAL_I2C_EV_IRQHandler+0x11c>
 8006e56:	69fb      	ldr	r3, [r7, #28]
 8006e58:	089b      	lsrs	r3, r3, #2
 8006e5a:	f003 0301 	and.w	r3, r3, #1
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d103      	bne.n	8006e6a <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f000 f9e5 	bl	8007232 <I2C_MasterTransmit_TXE>
 8006e68:	e049      	b.n	8006efe <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006e6a:	69fb      	ldr	r3, [r7, #28]
 8006e6c:	089b      	lsrs	r3, r3, #2
 8006e6e:	f003 0301 	and.w	r3, r3, #1
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	f000 80d2 	beq.w	800701c <HAL_I2C_EV_IRQHandler+0x2ce>
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	0a5b      	lsrs	r3, r3, #9
 8006e7c:	f003 0301 	and.w	r3, r3, #1
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	f000 80cb 	beq.w	800701c <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8006e86:	7bfb      	ldrb	r3, [r7, #15]
 8006e88:	2b10      	cmp	r3, #16
 8006e8a:	d103      	bne.n	8006e94 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f000 fa6c 	bl	800736a <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006e92:	e0c3      	b.n	800701c <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f000 fad0 	bl	800743a <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006e9a:	e0bf      	b.n	800701c <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ea6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006eaa:	f000 80b7 	beq.w	800701c <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006eae:	69fb      	ldr	r3, [r7, #28]
 8006eb0:	099b      	lsrs	r3, r3, #6
 8006eb2:	f003 0301 	and.w	r3, r3, #1
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d00f      	beq.n	8006eda <HAL_I2C_EV_IRQHandler+0x18c>
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	0a9b      	lsrs	r3, r3, #10
 8006ebe:	f003 0301 	and.w	r3, r3, #1
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d009      	beq.n	8006eda <HAL_I2C_EV_IRQHandler+0x18c>
 8006ec6:	69fb      	ldr	r3, [r7, #28]
 8006ec8:	089b      	lsrs	r3, r3, #2
 8006eca:	f003 0301 	and.w	r3, r3, #1
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d103      	bne.n	8006eda <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f000 fb40 	bl	8007558 <I2C_MasterReceive_RXNE>
 8006ed8:	e011      	b.n	8006efe <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006eda:	69fb      	ldr	r3, [r7, #28]
 8006edc:	089b      	lsrs	r3, r3, #2
 8006ede:	f003 0301 	and.w	r3, r3, #1
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	f000 809a 	beq.w	800701c <HAL_I2C_EV_IRQHandler+0x2ce>
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	0a5b      	lsrs	r3, r3, #9
 8006eec:	f003 0301 	and.w	r3, r3, #1
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	f000 8093 	beq.w	800701c <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f000 fbdf 	bl	80076ba <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006efc:	e08e      	b.n	800701c <HAL_I2C_EV_IRQHandler+0x2ce>
 8006efe:	e08d      	b.n	800701c <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d004      	beq.n	8006f12 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	695b      	ldr	r3, [r3, #20]
 8006f0e:	61fb      	str	r3, [r7, #28]
 8006f10:	e007      	b.n	8006f22 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	699b      	ldr	r3, [r3, #24]
 8006f18:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	695b      	ldr	r3, [r3, #20]
 8006f20:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006f22:	69fb      	ldr	r3, [r7, #28]
 8006f24:	085b      	lsrs	r3, r3, #1
 8006f26:	f003 0301 	and.w	r3, r3, #1
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d012      	beq.n	8006f54 <HAL_I2C_EV_IRQHandler+0x206>
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	0a5b      	lsrs	r3, r3, #9
 8006f32:	f003 0301 	and.w	r3, r3, #1
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d00c      	beq.n	8006f54 <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d003      	beq.n	8006f4a <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	699b      	ldr	r3, [r3, #24]
 8006f48:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8006f4a:	69b9      	ldr	r1, [r7, #24]
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f000 ff9d 	bl	8007e8c <I2C_Slave_ADDR>
 8006f52:	e066      	b.n	8007022 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006f54:	69fb      	ldr	r3, [r7, #28]
 8006f56:	091b      	lsrs	r3, r3, #4
 8006f58:	f003 0301 	and.w	r3, r3, #1
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d009      	beq.n	8006f74 <HAL_I2C_EV_IRQHandler+0x226>
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	0a5b      	lsrs	r3, r3, #9
 8006f64:	f003 0301 	and.w	r3, r3, #1
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d003      	beq.n	8006f74 <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f000 ffd1 	bl	8007f14 <I2C_Slave_STOPF>
 8006f72:	e056      	b.n	8007022 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006f74:	7bbb      	ldrb	r3, [r7, #14]
 8006f76:	2b21      	cmp	r3, #33	; 0x21
 8006f78:	d002      	beq.n	8006f80 <HAL_I2C_EV_IRQHandler+0x232>
 8006f7a:	7bbb      	ldrb	r3, [r7, #14]
 8006f7c:	2b29      	cmp	r3, #41	; 0x29
 8006f7e:	d125      	bne.n	8006fcc <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006f80:	69fb      	ldr	r3, [r7, #28]
 8006f82:	09db      	lsrs	r3, r3, #7
 8006f84:	f003 0301 	and.w	r3, r3, #1
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d00f      	beq.n	8006fac <HAL_I2C_EV_IRQHandler+0x25e>
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	0a9b      	lsrs	r3, r3, #10
 8006f90:	f003 0301 	and.w	r3, r3, #1
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d009      	beq.n	8006fac <HAL_I2C_EV_IRQHandler+0x25e>
 8006f98:	69fb      	ldr	r3, [r7, #28]
 8006f9a:	089b      	lsrs	r3, r3, #2
 8006f9c:	f003 0301 	and.w	r3, r3, #1
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d103      	bne.n	8006fac <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f000 feb3 	bl	8007d10 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006faa:	e039      	b.n	8007020 <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006fac:	69fb      	ldr	r3, [r7, #28]
 8006fae:	089b      	lsrs	r3, r3, #2
 8006fb0:	f003 0301 	and.w	r3, r3, #1
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d033      	beq.n	8007020 <HAL_I2C_EV_IRQHandler+0x2d2>
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	0a5b      	lsrs	r3, r3, #9
 8006fbc:	f003 0301 	and.w	r3, r3, #1
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d02d      	beq.n	8007020 <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f000 fee0 	bl	8007d8a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006fca:	e029      	b.n	8007020 <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006fcc:	69fb      	ldr	r3, [r7, #28]
 8006fce:	099b      	lsrs	r3, r3, #6
 8006fd0:	f003 0301 	and.w	r3, r3, #1
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d00f      	beq.n	8006ff8 <HAL_I2C_EV_IRQHandler+0x2aa>
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	0a9b      	lsrs	r3, r3, #10
 8006fdc:	f003 0301 	and.w	r3, r3, #1
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d009      	beq.n	8006ff8 <HAL_I2C_EV_IRQHandler+0x2aa>
 8006fe4:	69fb      	ldr	r3, [r7, #28]
 8006fe6:	089b      	lsrs	r3, r3, #2
 8006fe8:	f003 0301 	and.w	r3, r3, #1
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d103      	bne.n	8006ff8 <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f000 feeb 	bl	8007dcc <I2C_SlaveReceive_RXNE>
 8006ff6:	e014      	b.n	8007022 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006ff8:	69fb      	ldr	r3, [r7, #28]
 8006ffa:	089b      	lsrs	r3, r3, #2
 8006ffc:	f003 0301 	and.w	r3, r3, #1
 8007000:	2b00      	cmp	r3, #0
 8007002:	d00e      	beq.n	8007022 <HAL_I2C_EV_IRQHandler+0x2d4>
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	0a5b      	lsrs	r3, r3, #9
 8007008:	f003 0301 	and.w	r3, r3, #1
 800700c:	2b00      	cmp	r3, #0
 800700e:	d008      	beq.n	8007022 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f000 ff19 	bl	8007e48 <I2C_SlaveReceive_BTF>
 8007016:	e004      	b.n	8007022 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 8007018:	bf00      	nop
 800701a:	e002      	b.n	8007022 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800701c:	bf00      	nop
 800701e:	e000      	b.n	8007022 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007020:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8007022:	3720      	adds	r7, #32
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}

08007028 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b08a      	sub	sp, #40	; 0x28
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	695b      	ldr	r3, [r3, #20]
 8007036:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8007040:	2300      	movs	r3, #0
 8007042:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800704a:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800704c:	6a3b      	ldr	r3, [r7, #32]
 800704e:	0a1b      	lsrs	r3, r3, #8
 8007050:	f003 0301 	and.w	r3, r3, #1
 8007054:	2b00      	cmp	r3, #0
 8007056:	d00e      	beq.n	8007076 <HAL_I2C_ER_IRQHandler+0x4e>
 8007058:	69fb      	ldr	r3, [r7, #28]
 800705a:	0a1b      	lsrs	r3, r3, #8
 800705c:	f003 0301 	and.w	r3, r3, #1
 8007060:	2b00      	cmp	r3, #0
 8007062:	d008      	beq.n	8007076 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8007064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007066:	f043 0301 	orr.w	r3, r3, #1
 800706a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007074:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007076:	6a3b      	ldr	r3, [r7, #32]
 8007078:	0a5b      	lsrs	r3, r3, #9
 800707a:	f003 0301 	and.w	r3, r3, #1
 800707e:	2b00      	cmp	r3, #0
 8007080:	d00e      	beq.n	80070a0 <HAL_I2C_ER_IRQHandler+0x78>
 8007082:	69fb      	ldr	r3, [r7, #28]
 8007084:	0a1b      	lsrs	r3, r3, #8
 8007086:	f003 0301 	and.w	r3, r3, #1
 800708a:	2b00      	cmp	r3, #0
 800708c:	d008      	beq.n	80070a0 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800708e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007090:	f043 0302 	orr.w	r3, r3, #2
 8007094:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800709e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80070a0:	6a3b      	ldr	r3, [r7, #32]
 80070a2:	0a9b      	lsrs	r3, r3, #10
 80070a4:	f003 0301 	and.w	r3, r3, #1
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d03f      	beq.n	800712c <HAL_I2C_ER_IRQHandler+0x104>
 80070ac:	69fb      	ldr	r3, [r7, #28]
 80070ae:	0a1b      	lsrs	r3, r3, #8
 80070b0:	f003 0301 	and.w	r3, r3, #1
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d039      	beq.n	800712c <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80070b8:	7efb      	ldrb	r3, [r7, #27]
 80070ba:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070c0:	b29b      	uxth	r3, r3
 80070c2:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070ca:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070d0:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80070d2:	7ebb      	ldrb	r3, [r7, #26]
 80070d4:	2b20      	cmp	r3, #32
 80070d6:	d112      	bne.n	80070fe <HAL_I2C_ER_IRQHandler+0xd6>
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d10f      	bne.n	80070fe <HAL_I2C_ER_IRQHandler+0xd6>
 80070de:	7cfb      	ldrb	r3, [r7, #19]
 80070e0:	2b21      	cmp	r3, #33	; 0x21
 80070e2:	d008      	beq.n	80070f6 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80070e4:	7cfb      	ldrb	r3, [r7, #19]
 80070e6:	2b29      	cmp	r3, #41	; 0x29
 80070e8:	d005      	beq.n	80070f6 <HAL_I2C_ER_IRQHandler+0xce>
 80070ea:	7cfb      	ldrb	r3, [r7, #19]
 80070ec:	2b28      	cmp	r3, #40	; 0x28
 80070ee:	d106      	bne.n	80070fe <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2b21      	cmp	r3, #33	; 0x21
 80070f4:	d103      	bne.n	80070fe <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f001 f83c 	bl	8008174 <I2C_Slave_AF>
 80070fc:	e016      	b.n	800712c <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007106:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8007108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710a:	f043 0304 	orr.w	r3, r3, #4
 800710e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8007110:	7efb      	ldrb	r3, [r7, #27]
 8007112:	2b10      	cmp	r3, #16
 8007114:	d002      	beq.n	800711c <HAL_I2C_ER_IRQHandler+0xf4>
 8007116:	7efb      	ldrb	r3, [r7, #27]
 8007118:	2b40      	cmp	r3, #64	; 0x40
 800711a:	d107      	bne.n	800712c <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	681a      	ldr	r2, [r3, #0]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800712a:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800712c:	6a3b      	ldr	r3, [r7, #32]
 800712e:	0adb      	lsrs	r3, r3, #11
 8007130:	f003 0301 	and.w	r3, r3, #1
 8007134:	2b00      	cmp	r3, #0
 8007136:	d00e      	beq.n	8007156 <HAL_I2C_ER_IRQHandler+0x12e>
 8007138:	69fb      	ldr	r3, [r7, #28]
 800713a:	0a1b      	lsrs	r3, r3, #8
 800713c:	f003 0301 	and.w	r3, r3, #1
 8007140:	2b00      	cmp	r3, #0
 8007142:	d008      	beq.n	8007156 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8007144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007146:	f043 0308 	orr.w	r3, r3, #8
 800714a:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8007154:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8007156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007158:	2b00      	cmp	r3, #0
 800715a:	d008      	beq.n	800716e <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007162:	431a      	orrs	r2, r3
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f001 f873 	bl	8008254 <I2C_ITError>
  }
}
 800716e:	bf00      	nop
 8007170:	3728      	adds	r7, #40	; 0x28
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}

08007176 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007176:	b480      	push	{r7}
 8007178:	b083      	sub	sp, #12
 800717a:	af00      	add	r7, sp, #0
 800717c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800717e:	bf00      	nop
 8007180:	370c      	adds	r7, #12
 8007182:	46bd      	mov	sp, r7
 8007184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007188:	4770      	bx	lr

0800718a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800718a:	b480      	push	{r7}
 800718c:	b083      	sub	sp, #12
 800718e:	af00      	add	r7, sp, #0
 8007190:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007192:	bf00      	nop
 8007194:	370c      	adds	r7, #12
 8007196:	46bd      	mov	sp, r7
 8007198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719c:	4770      	bx	lr

0800719e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800719e:	b480      	push	{r7}
 80071a0:	b083      	sub	sp, #12
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80071a6:	bf00      	nop
 80071a8:	370c      	adds	r7, #12
 80071aa:	46bd      	mov	sp, r7
 80071ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b0:	4770      	bx	lr

080071b2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80071b2:	b480      	push	{r7}
 80071b4:	b083      	sub	sp, #12
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	6078      	str	r0, [r7, #4]
 80071ba:	460b      	mov	r3, r1
 80071bc:	70fb      	strb	r3, [r7, #3]
 80071be:	4613      	mov	r3, r2
 80071c0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80071c2:	bf00      	nop
 80071c4:	370c      	adds	r7, #12
 80071c6:	46bd      	mov	sp, r7
 80071c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071cc:	4770      	bx	lr

080071ce <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80071ce:	b480      	push	{r7}
 80071d0:	b083      	sub	sp, #12
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80071d6:	bf00      	nop
 80071d8:	370c      	adds	r7, #12
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr

080071e2 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80071e2:	b480      	push	{r7}
 80071e4:	b083      	sub	sp, #12
 80071e6:	af00      	add	r7, sp, #0
 80071e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80071ea:	bf00      	nop
 80071ec:	370c      	adds	r7, #12
 80071ee:	46bd      	mov	sp, r7
 80071f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f4:	4770      	bx	lr

080071f6 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80071f6:	b480      	push	{r7}
 80071f8:	b083      	sub	sp, #12
 80071fa:	af00      	add	r7, sp, #0
 80071fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80071fe:	bf00      	nop
 8007200:	370c      	adds	r7, #12
 8007202:	46bd      	mov	sp, r7
 8007204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007208:	4770      	bx	lr

0800720a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800720a:	b480      	push	{r7}
 800720c:	b083      	sub	sp, #12
 800720e:	af00      	add	r7, sp, #0
 8007210:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8007212:	bf00      	nop
 8007214:	370c      	adds	r7, #12
 8007216:	46bd      	mov	sp, r7
 8007218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721c:	4770      	bx	lr

0800721e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800721e:	b480      	push	{r7}
 8007220:	b083      	sub	sp, #12
 8007222:	af00      	add	r7, sp, #0
 8007224:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007226:	bf00      	nop
 8007228:	370c      	adds	r7, #12
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr

08007232 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007232:	b580      	push	{r7, lr}
 8007234:	b084      	sub	sp, #16
 8007236:	af00      	add	r7, sp, #0
 8007238:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007240:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007248:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800724e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007254:	2b00      	cmp	r3, #0
 8007256:	d150      	bne.n	80072fa <I2C_MasterTransmit_TXE+0xc8>
 8007258:	7bfb      	ldrb	r3, [r7, #15]
 800725a:	2b21      	cmp	r3, #33	; 0x21
 800725c:	d14d      	bne.n	80072fa <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	2b08      	cmp	r3, #8
 8007262:	d01d      	beq.n	80072a0 <I2C_MasterTransmit_TXE+0x6e>
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	2b20      	cmp	r3, #32
 8007268:	d01a      	beq.n	80072a0 <I2C_MasterTransmit_TXE+0x6e>
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007270:	d016      	beq.n	80072a0 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	685a      	ldr	r2, [r3, #4]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007280:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2211      	movs	r2, #17
 8007286:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2200      	movs	r2, #0
 800728c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2220      	movs	r2, #32
 8007294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f7ff ff6c 	bl	8007176 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800729e:	e060      	b.n	8007362 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	685a      	ldr	r2, [r3, #4]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80072ae:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	681a      	ldr	r2, [r3, #0]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072be:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2200      	movs	r2, #0
 80072c4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2220      	movs	r2, #32
 80072ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80072d4:	b2db      	uxtb	r3, r3
 80072d6:	2b40      	cmp	r3, #64	; 0x40
 80072d8:	d107      	bne.n	80072ea <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2200      	movs	r2, #0
 80072de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f7ff ff7d 	bl	80071e2 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80072e8:	e03b      	b.n	8007362 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2200      	movs	r2, #0
 80072ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f7ff ff3f 	bl	8007176 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80072f8:	e033      	b.n	8007362 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80072fa:	7bfb      	ldrb	r3, [r7, #15]
 80072fc:	2b21      	cmp	r3, #33	; 0x21
 80072fe:	d005      	beq.n	800730c <I2C_MasterTransmit_TXE+0xda>
 8007300:	7bbb      	ldrb	r3, [r7, #14]
 8007302:	2b40      	cmp	r3, #64	; 0x40
 8007304:	d12d      	bne.n	8007362 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8007306:	7bfb      	ldrb	r3, [r7, #15]
 8007308:	2b22      	cmp	r3, #34	; 0x22
 800730a:	d12a      	bne.n	8007362 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007310:	b29b      	uxth	r3, r3
 8007312:	2b00      	cmp	r3, #0
 8007314:	d108      	bne.n	8007328 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	685a      	ldr	r2, [r3, #4]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007324:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8007326:	e01c      	b.n	8007362 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800732e:	b2db      	uxtb	r3, r3
 8007330:	2b40      	cmp	r3, #64	; 0x40
 8007332:	d103      	bne.n	800733c <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f000 f880 	bl	800743a <I2C_MemoryTransmit_TXE_BTF>
}
 800733a:	e012      	b.n	8007362 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007340:	781a      	ldrb	r2, [r3, #0]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800734c:	1c5a      	adds	r2, r3, #1
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007356:	b29b      	uxth	r3, r3
 8007358:	3b01      	subs	r3, #1
 800735a:	b29a      	uxth	r2, r3
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007360:	e7ff      	b.n	8007362 <I2C_MasterTransmit_TXE+0x130>
 8007362:	bf00      	nop
 8007364:	3710      	adds	r7, #16
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}

0800736a <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800736a:	b580      	push	{r7, lr}
 800736c:	b084      	sub	sp, #16
 800736e:	af00      	add	r7, sp, #0
 8007370:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007376:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800737e:	b2db      	uxtb	r3, r3
 8007380:	2b21      	cmp	r3, #33	; 0x21
 8007382:	d156      	bne.n	8007432 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007388:	b29b      	uxth	r3, r3
 800738a:	2b00      	cmp	r3, #0
 800738c:	d012      	beq.n	80073b4 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007392:	781a      	ldrb	r2, [r3, #0]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800739e:	1c5a      	adds	r2, r3, #1
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073a8:	b29b      	uxth	r3, r3
 80073aa:	3b01      	subs	r3, #1
 80073ac:	b29a      	uxth	r2, r3
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80073b2:	e03e      	b.n	8007432 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	2b08      	cmp	r3, #8
 80073b8:	d01d      	beq.n	80073f6 <I2C_MasterTransmit_BTF+0x8c>
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2b20      	cmp	r3, #32
 80073be:	d01a      	beq.n	80073f6 <I2C_MasterTransmit_BTF+0x8c>
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80073c6:	d016      	beq.n	80073f6 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	685a      	ldr	r2, [r3, #4]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80073d6:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2211      	movs	r2, #17
 80073dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2200      	movs	r2, #0
 80073e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2220      	movs	r2, #32
 80073ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f7ff fec1 	bl	8007176 <HAL_I2C_MasterTxCpltCallback>
}
 80073f4:	e01d      	b.n	8007432 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	685a      	ldr	r2, [r3, #4]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007404:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	681a      	ldr	r2, [r3, #0]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007414:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2200      	movs	r2, #0
 800741a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2220      	movs	r2, #32
 8007420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2200      	movs	r2, #0
 8007428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f7ff fea2 	bl	8007176 <HAL_I2C_MasterTxCpltCallback>
}
 8007432:	bf00      	nop
 8007434:	3710      	adds	r7, #16
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}

0800743a <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800743a:	b580      	push	{r7, lr}
 800743c:	b084      	sub	sp, #16
 800743e:	af00      	add	r7, sp, #0
 8007440:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007448:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800744e:	2b00      	cmp	r3, #0
 8007450:	d11d      	bne.n	800748e <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007456:	2b01      	cmp	r3, #1
 8007458:	d10b      	bne.n	8007472 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800745e:	b2da      	uxtb	r2, r3
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800746a:	1c9a      	adds	r2, r3, #2
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8007470:	e06e      	b.n	8007550 <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007476:	b29b      	uxth	r3, r3
 8007478:	121b      	asrs	r3, r3, #8
 800747a:	b2da      	uxtb	r2, r3
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007486:	1c5a      	adds	r2, r3, #1
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800748c:	e060      	b.n	8007550 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007492:	2b01      	cmp	r3, #1
 8007494:	d10b      	bne.n	80074ae <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800749a:	b2da      	uxtb	r2, r3
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074a6:	1c5a      	adds	r2, r3, #1
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	651a      	str	r2, [r3, #80]	; 0x50
}
 80074ac:	e050      	b.n	8007550 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074b2:	2b02      	cmp	r3, #2
 80074b4:	d14c      	bne.n	8007550 <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80074b6:	7bfb      	ldrb	r3, [r7, #15]
 80074b8:	2b22      	cmp	r3, #34	; 0x22
 80074ba:	d108      	bne.n	80074ce <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	681a      	ldr	r2, [r3, #0]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80074ca:	601a      	str	r2, [r3, #0]
}
 80074cc:	e040      	b.n	8007550 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074d2:	b29b      	uxth	r3, r3
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d015      	beq.n	8007504 <I2C_MemoryTransmit_TXE_BTF+0xca>
 80074d8:	7bfb      	ldrb	r3, [r7, #15]
 80074da:	2b21      	cmp	r3, #33	; 0x21
 80074dc:	d112      	bne.n	8007504 <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e2:	781a      	ldrb	r2, [r3, #0]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ee:	1c5a      	adds	r2, r3, #1
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	3b01      	subs	r3, #1
 80074fc:	b29a      	uxth	r2, r3
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007502:	e025      	b.n	8007550 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007508:	b29b      	uxth	r3, r3
 800750a:	2b00      	cmp	r3, #0
 800750c:	d120      	bne.n	8007550 <I2C_MemoryTransmit_TXE_BTF+0x116>
 800750e:	7bfb      	ldrb	r3, [r7, #15]
 8007510:	2b21      	cmp	r3, #33	; 0x21
 8007512:	d11d      	bne.n	8007550 <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	685a      	ldr	r2, [r3, #4]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007522:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	681a      	ldr	r2, [r3, #0]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007532:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2200      	movs	r2, #0
 8007538:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2220      	movs	r2, #32
 800753e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2200      	movs	r2, #0
 8007546:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f7ff fe49 	bl	80071e2 <HAL_I2C_MemTxCpltCallback>
}
 8007550:	bf00      	nop
 8007552:	3710      	adds	r7, #16
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}

08007558 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b084      	sub	sp, #16
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007566:	b2db      	uxtb	r3, r3
 8007568:	2b22      	cmp	r3, #34	; 0x22
 800756a:	f040 80a2 	bne.w	80076b2 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007572:	b29b      	uxth	r3, r3
 8007574:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	2b03      	cmp	r3, #3
 800757a:	d921      	bls.n	80075c0 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	691a      	ldr	r2, [r3, #16]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007586:	b2d2      	uxtb	r2, r2
 8007588:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800758e:	1c5a      	adds	r2, r3, #1
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007598:	b29b      	uxth	r3, r3
 800759a:	3b01      	subs	r3, #1
 800759c:	b29a      	uxth	r2, r3
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075a6:	b29b      	uxth	r3, r3
 80075a8:	2b03      	cmp	r3, #3
 80075aa:	f040 8082 	bne.w	80076b2 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	685a      	ldr	r2, [r3, #4]
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075bc:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80075be:	e078      	b.n	80076b2 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075c4:	2b02      	cmp	r3, #2
 80075c6:	d074      	beq.n	80076b2 <I2C_MasterReceive_RXNE+0x15a>
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	2b01      	cmp	r3, #1
 80075cc:	d002      	beq.n	80075d4 <I2C_MasterReceive_RXNE+0x7c>
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d16e      	bne.n	80076b2 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f001 f817 	bl	8008608 <I2C_WaitOnSTOPRequestThroughIT>
 80075da:	4603      	mov	r3, r0
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d142      	bne.n	8007666 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	681a      	ldr	r2, [r3, #0]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075ee:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	685a      	ldr	r2, [r3, #4]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80075fe:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	691a      	ldr	r2, [r3, #16]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800760a:	b2d2      	uxtb	r2, r2
 800760c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007612:	1c5a      	adds	r2, r3, #1
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800761c:	b29b      	uxth	r3, r3
 800761e:	3b01      	subs	r3, #1
 8007620:	b29a      	uxth	r2, r3
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2220      	movs	r2, #32
 800762a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007634:	b2db      	uxtb	r3, r3
 8007636:	2b40      	cmp	r3, #64	; 0x40
 8007638:	d10a      	bne.n	8007650 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2200      	movs	r2, #0
 800763e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2200      	movs	r2, #0
 8007646:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f7ff fdd4 	bl	80071f6 <HAL_I2C_MemRxCpltCallback>
}
 800764e:	e030      	b.n	80076b2 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2200      	movs	r2, #0
 8007654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2212      	movs	r2, #18
 800765c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f7fd fc88 	bl	8004f74 <HAL_I2C_MasterRxCpltCallback>
}
 8007664:	e025      	b.n	80076b2 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	685a      	ldr	r2, [r3, #4]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007674:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	691a      	ldr	r2, [r3, #16]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007680:	b2d2      	uxtb	r2, r2
 8007682:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007688:	1c5a      	adds	r2, r3, #1
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007692:	b29b      	uxth	r3, r3
 8007694:	3b01      	subs	r3, #1
 8007696:	b29a      	uxth	r2, r3
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2220      	movs	r2, #32
 80076a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2200      	movs	r2, #0
 80076a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f7ff fdac 	bl	800720a <HAL_I2C_ErrorCallback>
}
 80076b2:	bf00      	nop
 80076b4:	3710      	adds	r7, #16
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}

080076ba <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80076ba:	b580      	push	{r7, lr}
 80076bc:	b084      	sub	sp, #16
 80076be:	af00      	add	r7, sp, #0
 80076c0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076c6:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076cc:	b29b      	uxth	r3, r3
 80076ce:	2b04      	cmp	r3, #4
 80076d0:	d11b      	bne.n	800770a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	685a      	ldr	r2, [r3, #4]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076e0:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	691a      	ldr	r2, [r3, #16]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ec:	b2d2      	uxtb	r2, r2
 80076ee:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f4:	1c5a      	adds	r2, r3, #1
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076fe:	b29b      	uxth	r3, r3
 8007700:	3b01      	subs	r3, #1
 8007702:	b29a      	uxth	r2, r3
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8007708:	e0bd      	b.n	8007886 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800770e:	b29b      	uxth	r3, r3
 8007710:	2b03      	cmp	r3, #3
 8007712:	d129      	bne.n	8007768 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	685a      	ldr	r2, [r3, #4]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007722:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2b04      	cmp	r3, #4
 8007728:	d00a      	beq.n	8007740 <I2C_MasterReceive_BTF+0x86>
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	2b02      	cmp	r3, #2
 800772e:	d007      	beq.n	8007740 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	681a      	ldr	r2, [r3, #0]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800773e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	691a      	ldr	r2, [r3, #16]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800774a:	b2d2      	uxtb	r2, r2
 800774c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007752:	1c5a      	adds	r2, r3, #1
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800775c:	b29b      	uxth	r3, r3
 800775e:	3b01      	subs	r3, #1
 8007760:	b29a      	uxth	r2, r3
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007766:	e08e      	b.n	8007886 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800776c:	b29b      	uxth	r3, r3
 800776e:	2b02      	cmp	r3, #2
 8007770:	d176      	bne.n	8007860 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2b01      	cmp	r3, #1
 8007776:	d002      	beq.n	800777e <I2C_MasterReceive_BTF+0xc4>
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2b10      	cmp	r3, #16
 800777c:	d108      	bne.n	8007790 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	681a      	ldr	r2, [r3, #0]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800778c:	601a      	str	r2, [r3, #0]
 800778e:	e019      	b.n	80077c4 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2b04      	cmp	r3, #4
 8007794:	d002      	beq.n	800779c <I2C_MasterReceive_BTF+0xe2>
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2b02      	cmp	r3, #2
 800779a:	d108      	bne.n	80077ae <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	681a      	ldr	r2, [r3, #0]
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80077aa:	601a      	str	r2, [r3, #0]
 80077ac:	e00a      	b.n	80077c4 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	2b10      	cmp	r3, #16
 80077b2:	d007      	beq.n	80077c4 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	681a      	ldr	r2, [r3, #0]
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077c2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	691a      	ldr	r2, [r3, #16]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ce:	b2d2      	uxtb	r2, r2
 80077d0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d6:	1c5a      	adds	r2, r3, #1
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077e0:	b29b      	uxth	r3, r3
 80077e2:	3b01      	subs	r3, #1
 80077e4:	b29a      	uxth	r2, r3
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	691a      	ldr	r2, [r3, #16]
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f4:	b2d2      	uxtb	r2, r2
 80077f6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077fc:	1c5a      	adds	r2, r3, #1
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007806:	b29b      	uxth	r3, r3
 8007808:	3b01      	subs	r3, #1
 800780a:	b29a      	uxth	r2, r3
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	685a      	ldr	r2, [r3, #4]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800781e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2220      	movs	r2, #32
 8007824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800782e:	b2db      	uxtb	r3, r3
 8007830:	2b40      	cmp	r3, #64	; 0x40
 8007832:	d10a      	bne.n	800784a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2200      	movs	r2, #0
 8007838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2200      	movs	r2, #0
 8007840:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f7ff fcd7 	bl	80071f6 <HAL_I2C_MemRxCpltCallback>
}
 8007848:	e01d      	b.n	8007886 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2200      	movs	r2, #0
 800784e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2212      	movs	r2, #18
 8007856:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f7fd fb8b 	bl	8004f74 <HAL_I2C_MasterRxCpltCallback>
}
 800785e:	e012      	b.n	8007886 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	691a      	ldr	r2, [r3, #16]
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800786a:	b2d2      	uxtb	r2, r2
 800786c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007872:	1c5a      	adds	r2, r3, #1
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800787c:	b29b      	uxth	r3, r3
 800787e:	3b01      	subs	r3, #1
 8007880:	b29a      	uxth	r2, r3
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007886:	bf00      	nop
 8007888:	3710      	adds	r7, #16
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}

0800788e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800788e:	b480      	push	{r7}
 8007890:	b083      	sub	sp, #12
 8007892:	af00      	add	r7, sp, #0
 8007894:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800789c:	b2db      	uxtb	r3, r3
 800789e:	2b40      	cmp	r3, #64	; 0x40
 80078a0:	d117      	bne.n	80078d2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d109      	bne.n	80078be <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078ae:	b2db      	uxtb	r3, r3
 80078b0:	461a      	mov	r2, r3
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80078ba:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80078bc:	e067      	b.n	800798e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078c2:	b2db      	uxtb	r3, r3
 80078c4:	f043 0301 	orr.w	r3, r3, #1
 80078c8:	b2da      	uxtb	r2, r3
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	611a      	str	r2, [r3, #16]
}
 80078d0:	e05d      	b.n	800798e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	691b      	ldr	r3, [r3, #16]
 80078d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80078da:	d133      	bne.n	8007944 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078e2:	b2db      	uxtb	r3, r3
 80078e4:	2b21      	cmp	r3, #33	; 0x21
 80078e6:	d109      	bne.n	80078fc <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078ec:	b2db      	uxtb	r3, r3
 80078ee:	461a      	mov	r2, r3
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80078f8:	611a      	str	r2, [r3, #16]
 80078fa:	e008      	b.n	800790e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007900:	b2db      	uxtb	r3, r3
 8007902:	f043 0301 	orr.w	r3, r3, #1
 8007906:	b2da      	uxtb	r2, r3
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007912:	2b00      	cmp	r3, #0
 8007914:	d004      	beq.n	8007920 <I2C_Master_SB+0x92>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800791a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800791c:	2b00      	cmp	r3, #0
 800791e:	d108      	bne.n	8007932 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007924:	2b00      	cmp	r3, #0
 8007926:	d032      	beq.n	800798e <I2C_Master_SB+0x100>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800792c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800792e:	2b00      	cmp	r3, #0
 8007930:	d02d      	beq.n	800798e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	685a      	ldr	r2, [r3, #4]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007940:	605a      	str	r2, [r3, #4]
}
 8007942:	e024      	b.n	800798e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007948:	2b00      	cmp	r3, #0
 800794a:	d10e      	bne.n	800796a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007950:	b29b      	uxth	r3, r3
 8007952:	11db      	asrs	r3, r3, #7
 8007954:	b2db      	uxtb	r3, r3
 8007956:	f003 0306 	and.w	r3, r3, #6
 800795a:	b2db      	uxtb	r3, r3
 800795c:	f063 030f 	orn	r3, r3, #15
 8007960:	b2da      	uxtb	r2, r3
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	611a      	str	r2, [r3, #16]
}
 8007968:	e011      	b.n	800798e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800796e:	2b01      	cmp	r3, #1
 8007970:	d10d      	bne.n	800798e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007976:	b29b      	uxth	r3, r3
 8007978:	11db      	asrs	r3, r3, #7
 800797a:	b2db      	uxtb	r3, r3
 800797c:	f003 0306 	and.w	r3, r3, #6
 8007980:	b2db      	uxtb	r3, r3
 8007982:	f063 030e 	orn	r3, r3, #14
 8007986:	b2da      	uxtb	r2, r3
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	611a      	str	r2, [r3, #16]
}
 800798e:	bf00      	nop
 8007990:	370c      	adds	r7, #12
 8007992:	46bd      	mov	sp, r7
 8007994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007998:	4770      	bx	lr

0800799a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800799a:	b480      	push	{r7}
 800799c:	b083      	sub	sp, #12
 800799e:	af00      	add	r7, sp, #0
 80079a0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079a6:	b2da      	uxtb	r2, r3
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d103      	bne.n	80079be <I2C_Master_ADD10+0x24>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d011      	beq.n	80079e2 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d104      	bne.n	80079d2 <I2C_Master_ADD10+0x38>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d007      	beq.n	80079e2 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	685a      	ldr	r2, [r3, #4]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80079e0:	605a      	str	r2, [r3, #4]
    }
  }
}
 80079e2:	bf00      	nop
 80079e4:	370c      	adds	r7, #12
 80079e6:	46bd      	mov	sp, r7
 80079e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ec:	4770      	bx	lr

080079ee <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80079ee:	b480      	push	{r7}
 80079f0:	b091      	sub	sp, #68	; 0x44
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80079fc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a04:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a0a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a12:	b2db      	uxtb	r3, r3
 8007a14:	2b22      	cmp	r3, #34	; 0x22
 8007a16:	f040 8169 	bne.w	8007cec <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d10f      	bne.n	8007a42 <I2C_Master_ADDR+0x54>
 8007a22:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007a26:	2b40      	cmp	r3, #64	; 0x40
 8007a28:	d10b      	bne.n	8007a42 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	633b      	str	r3, [r7, #48]	; 0x30
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	695b      	ldr	r3, [r3, #20]
 8007a34:	633b      	str	r3, [r7, #48]	; 0x30
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	699b      	ldr	r3, [r3, #24]
 8007a3c:	633b      	str	r3, [r7, #48]	; 0x30
 8007a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a40:	e160      	b.n	8007d04 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d11d      	bne.n	8007a86 <I2C_Master_ADDR+0x98>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	691b      	ldr	r3, [r3, #16]
 8007a4e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007a52:	d118      	bne.n	8007a86 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a54:	2300      	movs	r3, #0
 8007a56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	695b      	ldr	r3, [r3, #20]
 8007a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	699b      	ldr	r3, [r3, #24]
 8007a66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	681a      	ldr	r2, [r3, #0]
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a78:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a7e:	1c5a      	adds	r2, r3, #1
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	651a      	str	r2, [r3, #80]	; 0x50
 8007a84:	e13e      	b.n	8007d04 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a8a:	b29b      	uxth	r3, r3
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d113      	bne.n	8007ab8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a90:	2300      	movs	r3, #0
 8007a92:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	695b      	ldr	r3, [r3, #20]
 8007a9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	699b      	ldr	r3, [r3, #24]
 8007aa2:	62bb      	str	r3, [r7, #40]	; 0x28
 8007aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	681a      	ldr	r2, [r3, #0]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ab4:	601a      	str	r2, [r3, #0]
 8007ab6:	e115      	b.n	8007ce4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007abc:	b29b      	uxth	r3, r3
 8007abe:	2b01      	cmp	r3, #1
 8007ac0:	f040 808a 	bne.w	8007bd8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8007ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ac6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007aca:	d137      	bne.n	8007b3c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	681a      	ldr	r2, [r3, #0]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ada:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ae6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007aea:	d113      	bne.n	8007b14 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	681a      	ldr	r2, [r3, #0]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007afa:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007afc:	2300      	movs	r3, #0
 8007afe:	627b      	str	r3, [r7, #36]	; 0x24
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	695b      	ldr	r3, [r3, #20]
 8007b06:	627b      	str	r3, [r7, #36]	; 0x24
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	699b      	ldr	r3, [r3, #24]
 8007b0e:	627b      	str	r3, [r7, #36]	; 0x24
 8007b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b12:	e0e7      	b.n	8007ce4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b14:	2300      	movs	r3, #0
 8007b16:	623b      	str	r3, [r7, #32]
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	695b      	ldr	r3, [r3, #20]
 8007b1e:	623b      	str	r3, [r7, #32]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	699b      	ldr	r3, [r3, #24]
 8007b26:	623b      	str	r3, [r7, #32]
 8007b28:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	681a      	ldr	r2, [r3, #0]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b38:	601a      	str	r2, [r3, #0]
 8007b3a:	e0d3      	b.n	8007ce4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8007b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b3e:	2b08      	cmp	r3, #8
 8007b40:	d02e      	beq.n	8007ba0 <I2C_Master_ADDR+0x1b2>
 8007b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b44:	2b20      	cmp	r3, #32
 8007b46:	d02b      	beq.n	8007ba0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8007b48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b4a:	2b12      	cmp	r3, #18
 8007b4c:	d102      	bne.n	8007b54 <I2C_Master_ADDR+0x166>
 8007b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b50:	2b01      	cmp	r3, #1
 8007b52:	d125      	bne.n	8007ba0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b56:	2b04      	cmp	r3, #4
 8007b58:	d00e      	beq.n	8007b78 <I2C_Master_ADDR+0x18a>
 8007b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b5c:	2b02      	cmp	r3, #2
 8007b5e:	d00b      	beq.n	8007b78 <I2C_Master_ADDR+0x18a>
 8007b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b62:	2b10      	cmp	r3, #16
 8007b64:	d008      	beq.n	8007b78 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	681a      	ldr	r2, [r3, #0]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b74:	601a      	str	r2, [r3, #0]
 8007b76:	e007      	b.n	8007b88 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	681a      	ldr	r2, [r3, #0]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007b86:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b88:	2300      	movs	r3, #0
 8007b8a:	61fb      	str	r3, [r7, #28]
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	695b      	ldr	r3, [r3, #20]
 8007b92:	61fb      	str	r3, [r7, #28]
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	699b      	ldr	r3, [r3, #24]
 8007b9a:	61fb      	str	r3, [r7, #28]
 8007b9c:	69fb      	ldr	r3, [r7, #28]
 8007b9e:	e0a1      	b.n	8007ce4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	681a      	ldr	r2, [r3, #0]
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007bae:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	61bb      	str	r3, [r7, #24]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	695b      	ldr	r3, [r3, #20]
 8007bba:	61bb      	str	r3, [r7, #24]
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	699b      	ldr	r3, [r3, #24]
 8007bc2:	61bb      	str	r3, [r7, #24]
 8007bc4:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	681a      	ldr	r2, [r3, #0]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007bd4:	601a      	str	r2, [r3, #0]
 8007bd6:	e085      	b.n	8007ce4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	2b02      	cmp	r3, #2
 8007be0:	d14d      	bne.n	8007c7e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007be4:	2b04      	cmp	r3, #4
 8007be6:	d016      	beq.n	8007c16 <I2C_Master_ADDR+0x228>
 8007be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bea:	2b02      	cmp	r3, #2
 8007bec:	d013      	beq.n	8007c16 <I2C_Master_ADDR+0x228>
 8007bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bf0:	2b10      	cmp	r3, #16
 8007bf2:	d010      	beq.n	8007c16 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	681a      	ldr	r2, [r3, #0]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c02:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	681a      	ldr	r2, [r3, #0]
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c12:	601a      	str	r2, [r3, #0]
 8007c14:	e007      	b.n	8007c26 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	681a      	ldr	r2, [r3, #0]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007c24:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c34:	d117      	bne.n	8007c66 <I2C_Master_ADDR+0x278>
 8007c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c38:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007c3c:	d00b      	beq.n	8007c56 <I2C_Master_ADDR+0x268>
 8007c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c40:	2b01      	cmp	r3, #1
 8007c42:	d008      	beq.n	8007c56 <I2C_Master_ADDR+0x268>
 8007c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c46:	2b08      	cmp	r3, #8
 8007c48:	d005      	beq.n	8007c56 <I2C_Master_ADDR+0x268>
 8007c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c4c:	2b10      	cmp	r3, #16
 8007c4e:	d002      	beq.n	8007c56 <I2C_Master_ADDR+0x268>
 8007c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c52:	2b20      	cmp	r3, #32
 8007c54:	d107      	bne.n	8007c66 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	685a      	ldr	r2, [r3, #4]
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007c64:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c66:	2300      	movs	r3, #0
 8007c68:	617b      	str	r3, [r7, #20]
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	695b      	ldr	r3, [r3, #20]
 8007c70:	617b      	str	r3, [r7, #20]
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	699b      	ldr	r3, [r3, #24]
 8007c78:	617b      	str	r3, [r7, #20]
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	e032      	b.n	8007ce4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	681a      	ldr	r2, [r3, #0]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007c8c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c9c:	d117      	bne.n	8007cce <I2C_Master_ADDR+0x2e0>
 8007c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ca0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007ca4:	d00b      	beq.n	8007cbe <I2C_Master_ADDR+0x2d0>
 8007ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	d008      	beq.n	8007cbe <I2C_Master_ADDR+0x2d0>
 8007cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cae:	2b08      	cmp	r3, #8
 8007cb0:	d005      	beq.n	8007cbe <I2C_Master_ADDR+0x2d0>
 8007cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cb4:	2b10      	cmp	r3, #16
 8007cb6:	d002      	beq.n	8007cbe <I2C_Master_ADDR+0x2d0>
 8007cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cba:	2b20      	cmp	r3, #32
 8007cbc:	d107      	bne.n	8007cce <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	685a      	ldr	r2, [r3, #4]
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007ccc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007cce:	2300      	movs	r3, #0
 8007cd0:	613b      	str	r3, [r7, #16]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	695b      	ldr	r3, [r3, #20]
 8007cd8:	613b      	str	r3, [r7, #16]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	699b      	ldr	r3, [r3, #24]
 8007ce0:	613b      	str	r3, [r7, #16]
 8007ce2:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8007cea:	e00b      	b.n	8007d04 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007cec:	2300      	movs	r3, #0
 8007cee:	60fb      	str	r3, [r7, #12]
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	695b      	ldr	r3, [r3, #20]
 8007cf6:	60fb      	str	r3, [r7, #12]
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	699b      	ldr	r3, [r3, #24]
 8007cfe:	60fb      	str	r3, [r7, #12]
 8007d00:	68fb      	ldr	r3, [r7, #12]
}
 8007d02:	e7ff      	b.n	8007d04 <I2C_Master_ADDR+0x316>
 8007d04:	bf00      	nop
 8007d06:	3744      	adds	r7, #68	; 0x44
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0e:	4770      	bx	lr

08007d10 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b084      	sub	sp, #16
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d1e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d24:	b29b      	uxth	r3, r3
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d02b      	beq.n	8007d82 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d2e:	781a      	ldrb	r2, [r3, #0]
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d3a:	1c5a      	adds	r2, r3, #1
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d44:	b29b      	uxth	r3, r3
 8007d46:	3b01      	subs	r3, #1
 8007d48:	b29a      	uxth	r2, r3
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d52:	b29b      	uxth	r3, r3
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d114      	bne.n	8007d82 <I2C_SlaveTransmit_TXE+0x72>
 8007d58:	7bfb      	ldrb	r3, [r7, #15]
 8007d5a:	2b29      	cmp	r3, #41	; 0x29
 8007d5c:	d111      	bne.n	8007d82 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	685a      	ldr	r2, [r3, #4]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d6c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2221      	movs	r2, #33	; 0x21
 8007d72:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2228      	movs	r2, #40	; 0x28
 8007d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f7ff fa04 	bl	800718a <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007d82:	bf00      	nop
 8007d84:	3710      	adds	r7, #16
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}

08007d8a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007d8a:	b480      	push	{r7}
 8007d8c:	b083      	sub	sp, #12
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d96:	b29b      	uxth	r3, r3
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d011      	beq.n	8007dc0 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da0:	781a      	ldrb	r2, [r3, #0]
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dac:	1c5a      	adds	r2, r3, #1
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007db6:	b29b      	uxth	r3, r3
 8007db8:	3b01      	subs	r3, #1
 8007dba:	b29a      	uxth	r2, r3
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007dc0:	bf00      	nop
 8007dc2:	370c      	adds	r7, #12
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dca:	4770      	bx	lr

08007dcc <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b084      	sub	sp, #16
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007dda:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007de0:	b29b      	uxth	r3, r3
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d02c      	beq.n	8007e40 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	691a      	ldr	r2, [r3, #16]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df0:	b2d2      	uxtb	r2, r2
 8007df2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df8:	1c5a      	adds	r2, r3, #1
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e02:	b29b      	uxth	r3, r3
 8007e04:	3b01      	subs	r3, #1
 8007e06:	b29a      	uxth	r2, r3
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e10:	b29b      	uxth	r3, r3
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d114      	bne.n	8007e40 <I2C_SlaveReceive_RXNE+0x74>
 8007e16:	7bfb      	ldrb	r3, [r7, #15]
 8007e18:	2b2a      	cmp	r3, #42	; 0x2a
 8007e1a:	d111      	bne.n	8007e40 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	685a      	ldr	r2, [r3, #4]
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e2a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2222      	movs	r2, #34	; 0x22
 8007e30:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2228      	movs	r2, #40	; 0x28
 8007e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f7ff f9af 	bl	800719e <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007e40:	bf00      	nop
 8007e42:	3710      	adds	r7, #16
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}

08007e48 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b083      	sub	sp, #12
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e54:	b29b      	uxth	r3, r3
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d012      	beq.n	8007e80 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	691a      	ldr	r2, [r3, #16]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e64:	b2d2      	uxtb	r2, r2
 8007e66:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e6c:	1c5a      	adds	r2, r3, #1
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e76:	b29b      	uxth	r3, r3
 8007e78:	3b01      	subs	r3, #1
 8007e7a:	b29a      	uxth	r2, r3
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007e80:	bf00      	nop
 8007e82:	370c      	adds	r7, #12
 8007e84:	46bd      	mov	sp, r7
 8007e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8a:	4770      	bx	lr

08007e8c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b084      	sub	sp, #16
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8007e96:	2300      	movs	r3, #0
 8007e98:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ea0:	b2db      	uxtb	r3, r3
 8007ea2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007ea6:	2b28      	cmp	r3, #40	; 0x28
 8007ea8:	d127      	bne.n	8007efa <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	685a      	ldr	r2, [r3, #4]
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007eb8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	089b      	lsrs	r3, r3, #2
 8007ebe:	f003 0301 	and.w	r3, r3, #1
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d101      	bne.n	8007eca <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	09db      	lsrs	r3, r3, #7
 8007ece:	f003 0301 	and.w	r3, r3, #1
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d103      	bne.n	8007ede <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	68db      	ldr	r3, [r3, #12]
 8007eda:	81bb      	strh	r3, [r7, #12]
 8007edc:	e002      	b.n	8007ee4 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	699b      	ldr	r3, [r3, #24]
 8007ee2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8007eec:	89ba      	ldrh	r2, [r7, #12]
 8007eee:	7bfb      	ldrb	r3, [r7, #15]
 8007ef0:	4619      	mov	r1, r3
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f7ff f95d 	bl	80071b2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007ef8:	e008      	b.n	8007f0c <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f06f 0202 	mvn.w	r2, #2
 8007f02:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2200      	movs	r2, #0
 8007f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8007f0c:	bf00      	nop
 8007f0e:	3710      	adds	r7, #16
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}

08007f14 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b084      	sub	sp, #16
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f22:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	685a      	ldr	r2, [r3, #4]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007f32:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8007f34:	2300      	movs	r3, #0
 8007f36:	60bb      	str	r3, [r7, #8]
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	695b      	ldr	r3, [r3, #20]
 8007f3e:	60bb      	str	r3, [r7, #8]
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	681a      	ldr	r2, [r3, #0]
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f042 0201 	orr.w	r2, r2, #1
 8007f4e:	601a      	str	r2, [r3, #0]
 8007f50:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	681a      	ldr	r2, [r3, #0]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f60:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f70:	d172      	bne.n	8008058 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007f72:	7bfb      	ldrb	r3, [r7, #15]
 8007f74:	2b22      	cmp	r3, #34	; 0x22
 8007f76:	d002      	beq.n	8007f7e <I2C_Slave_STOPF+0x6a>
 8007f78:	7bfb      	ldrb	r3, [r7, #15]
 8007f7a:	2b2a      	cmp	r3, #42	; 0x2a
 8007f7c:	d135      	bne.n	8007fea <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	685b      	ldr	r3, [r3, #4]
 8007f86:	b29a      	uxth	r2, r3
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f90:	b29b      	uxth	r3, r3
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d005      	beq.n	8007fa2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f9a:	f043 0204 	orr.w	r2, r3, #4
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	685a      	ldr	r2, [r3, #4]
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007fb0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	f7fe fc0e 	bl	80067d8 <HAL_DMA_GetState>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	2b01      	cmp	r3, #1
 8007fc0:	d049      	beq.n	8008056 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fc6:	4a69      	ldr	r2, [pc, #420]	; (800816c <I2C_Slave_STOPF+0x258>)
 8007fc8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f7fe fa56 	bl	8006480 <HAL_DMA_Abort_IT>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d03d      	beq.n	8008056 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fe0:	687a      	ldr	r2, [r7, #4]
 8007fe2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007fe4:	4610      	mov	r0, r2
 8007fe6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007fe8:	e035      	b.n	8008056 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	685b      	ldr	r3, [r3, #4]
 8007ff2:	b29a      	uxth	r2, r3
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ffc:	b29b      	uxth	r3, r3
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d005      	beq.n	800800e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008006:	f043 0204 	orr.w	r2, r3, #4
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	685a      	ldr	r2, [r3, #4]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800801c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008022:	4618      	mov	r0, r3
 8008024:	f7fe fbd8 	bl	80067d8 <HAL_DMA_GetState>
 8008028:	4603      	mov	r3, r0
 800802a:	2b01      	cmp	r3, #1
 800802c:	d014      	beq.n	8008058 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008032:	4a4e      	ldr	r2, [pc, #312]	; (800816c <I2C_Slave_STOPF+0x258>)
 8008034:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800803a:	4618      	mov	r0, r3
 800803c:	f7fe fa20 	bl	8006480 <HAL_DMA_Abort_IT>
 8008040:	4603      	mov	r3, r0
 8008042:	2b00      	cmp	r3, #0
 8008044:	d008      	beq.n	8008058 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800804a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800804c:	687a      	ldr	r2, [r7, #4]
 800804e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008050:	4610      	mov	r0, r2
 8008052:	4798      	blx	r3
 8008054:	e000      	b.n	8008058 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008056:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800805c:	b29b      	uxth	r3, r3
 800805e:	2b00      	cmp	r3, #0
 8008060:	d03e      	beq.n	80080e0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	695b      	ldr	r3, [r3, #20]
 8008068:	f003 0304 	and.w	r3, r3, #4
 800806c:	2b04      	cmp	r3, #4
 800806e:	d112      	bne.n	8008096 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	691a      	ldr	r2, [r3, #16]
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800807a:	b2d2      	uxtb	r2, r2
 800807c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008082:	1c5a      	adds	r2, r3, #1
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800808c:	b29b      	uxth	r3, r3
 800808e:	3b01      	subs	r3, #1
 8008090:	b29a      	uxth	r2, r3
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	695b      	ldr	r3, [r3, #20]
 800809c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080a0:	2b40      	cmp	r3, #64	; 0x40
 80080a2:	d112      	bne.n	80080ca <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	691a      	ldr	r2, [r3, #16]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ae:	b2d2      	uxtb	r2, r2
 80080b0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b6:	1c5a      	adds	r2, r3, #1
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080c0:	b29b      	uxth	r3, r3
 80080c2:	3b01      	subs	r3, #1
 80080c4:	b29a      	uxth	r2, r3
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080ce:	b29b      	uxth	r3, r3
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d005      	beq.n	80080e0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080d8:	f043 0204 	orr.w	r2, r3, #4
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d003      	beq.n	80080f0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f000 f8b3 	bl	8008254 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80080ee:	e039      	b.n	8008164 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80080f0:	7bfb      	ldrb	r3, [r7, #15]
 80080f2:	2b2a      	cmp	r3, #42	; 0x2a
 80080f4:	d109      	bne.n	800810a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2200      	movs	r2, #0
 80080fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2228      	movs	r2, #40	; 0x28
 8008100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f7ff f84a 	bl	800719e <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008110:	b2db      	uxtb	r3, r3
 8008112:	2b28      	cmp	r3, #40	; 0x28
 8008114:	d111      	bne.n	800813a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	4a15      	ldr	r2, [pc, #84]	; (8008170 <I2C_Slave_STOPF+0x25c>)
 800811a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2200      	movs	r2, #0
 8008120:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2220      	movs	r2, #32
 8008126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2200      	movs	r2, #0
 800812e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f7ff f84b 	bl	80071ce <HAL_I2C_ListenCpltCallback>
}
 8008138:	e014      	b.n	8008164 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800813e:	2b22      	cmp	r3, #34	; 0x22
 8008140:	d002      	beq.n	8008148 <I2C_Slave_STOPF+0x234>
 8008142:	7bfb      	ldrb	r3, [r7, #15]
 8008144:	2b22      	cmp	r3, #34	; 0x22
 8008146:	d10d      	bne.n	8008164 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2200      	movs	r2, #0
 800814c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2220      	movs	r2, #32
 8008152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2200      	movs	r2, #0
 800815a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f7ff f81d 	bl	800719e <HAL_I2C_SlaveRxCpltCallback>
}
 8008164:	bf00      	nop
 8008166:	3710      	adds	r7, #16
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}
 800816c:	080084b9 	.word	0x080084b9
 8008170:	ffff0000 	.word	0xffff0000

08008174 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b084      	sub	sp, #16
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008182:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008188:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	2b08      	cmp	r3, #8
 800818e:	d002      	beq.n	8008196 <I2C_Slave_AF+0x22>
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	2b20      	cmp	r3, #32
 8008194:	d129      	bne.n	80081ea <I2C_Slave_AF+0x76>
 8008196:	7bfb      	ldrb	r3, [r7, #15]
 8008198:	2b28      	cmp	r3, #40	; 0x28
 800819a:	d126      	bne.n	80081ea <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	4a2c      	ldr	r2, [pc, #176]	; (8008250 <I2C_Slave_AF+0xdc>)
 80081a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	685a      	ldr	r2, [r3, #4]
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80081b0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80081ba:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	681a      	ldr	r2, [r3, #0]
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80081ca:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2200      	movs	r2, #0
 80081d0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2220      	movs	r2, #32
 80081d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2200      	movs	r2, #0
 80081de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f7fe fff3 	bl	80071ce <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80081e8:	e02e      	b.n	8008248 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80081ea:	7bfb      	ldrb	r3, [r7, #15]
 80081ec:	2b21      	cmp	r3, #33	; 0x21
 80081ee:	d126      	bne.n	800823e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	4a17      	ldr	r2, [pc, #92]	; (8008250 <I2C_Slave_AF+0xdc>)
 80081f4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2221      	movs	r2, #33	; 0x21
 80081fa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2220      	movs	r2, #32
 8008200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2200      	movs	r2, #0
 8008208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	685a      	ldr	r2, [r3, #4]
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800821a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008224:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	681a      	ldr	r2, [r3, #0]
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008234:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f7fe ffa7 	bl	800718a <HAL_I2C_SlaveTxCpltCallback>
}
 800823c:	e004      	b.n	8008248 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008246:	615a      	str	r2, [r3, #20]
}
 8008248:	bf00      	nop
 800824a:	3710      	adds	r7, #16
 800824c:	46bd      	mov	sp, r7
 800824e:	bd80      	pop	{r7, pc}
 8008250:	ffff0000 	.word	0xffff0000

08008254 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b084      	sub	sp, #16
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008262:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800826a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800826c:	7bbb      	ldrb	r3, [r7, #14]
 800826e:	2b10      	cmp	r3, #16
 8008270:	d002      	beq.n	8008278 <I2C_ITError+0x24>
 8008272:	7bbb      	ldrb	r3, [r7, #14]
 8008274:	2b40      	cmp	r3, #64	; 0x40
 8008276:	d10a      	bne.n	800828e <I2C_ITError+0x3a>
 8008278:	7bfb      	ldrb	r3, [r7, #15]
 800827a:	2b22      	cmp	r3, #34	; 0x22
 800827c:	d107      	bne.n	800828e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	681a      	ldr	r2, [r3, #0]
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800828c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800828e:	7bfb      	ldrb	r3, [r7, #15]
 8008290:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008294:	2b28      	cmp	r3, #40	; 0x28
 8008296:	d107      	bne.n	80082a8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2200      	movs	r2, #0
 800829c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2228      	movs	r2, #40	; 0x28
 80082a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80082a6:	e015      	b.n	80082d4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	685b      	ldr	r3, [r3, #4]
 80082ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80082b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082b6:	d00a      	beq.n	80082ce <I2C_ITError+0x7a>
 80082b8:	7bfb      	ldrb	r3, [r7, #15]
 80082ba:	2b60      	cmp	r3, #96	; 0x60
 80082bc:	d007      	beq.n	80082ce <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2220      	movs	r2, #32
 80082c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2200      	movs	r2, #0
 80082ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2200      	movs	r2, #0
 80082d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	685b      	ldr	r3, [r3, #4]
 80082da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80082de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082e2:	d162      	bne.n	80083aa <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	685a      	ldr	r2, [r3, #4]
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80082f2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80082fc:	b2db      	uxtb	r3, r3
 80082fe:	2b01      	cmp	r3, #1
 8008300:	d020      	beq.n	8008344 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008306:	4a6a      	ldr	r2, [pc, #424]	; (80084b0 <I2C_ITError+0x25c>)
 8008308:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800830e:	4618      	mov	r0, r3
 8008310:	f7fe f8b6 	bl	8006480 <HAL_DMA_Abort_IT>
 8008314:	4603      	mov	r3, r0
 8008316:	2b00      	cmp	r3, #0
 8008318:	f000 8089 	beq.w	800842e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	681a      	ldr	r2, [r3, #0]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f022 0201 	bic.w	r2, r2, #1
 800832a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2220      	movs	r2, #32
 8008330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008338:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800833a:	687a      	ldr	r2, [r7, #4]
 800833c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800833e:	4610      	mov	r0, r2
 8008340:	4798      	blx	r3
 8008342:	e074      	b.n	800842e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008348:	4a59      	ldr	r2, [pc, #356]	; (80084b0 <I2C_ITError+0x25c>)
 800834a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008350:	4618      	mov	r0, r3
 8008352:	f7fe f895 	bl	8006480 <HAL_DMA_Abort_IT>
 8008356:	4603      	mov	r3, r0
 8008358:	2b00      	cmp	r3, #0
 800835a:	d068      	beq.n	800842e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	695b      	ldr	r3, [r3, #20]
 8008362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008366:	2b40      	cmp	r3, #64	; 0x40
 8008368:	d10b      	bne.n	8008382 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	691a      	ldr	r2, [r3, #16]
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008374:	b2d2      	uxtb	r2, r2
 8008376:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800837c:	1c5a      	adds	r2, r3, #1
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	681a      	ldr	r2, [r3, #0]
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f022 0201 	bic.w	r2, r2, #1
 8008390:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2220      	movs	r2, #32
 8008396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800839e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083a0:	687a      	ldr	r2, [r7, #4]
 80083a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80083a4:	4610      	mov	r0, r2
 80083a6:	4798      	blx	r3
 80083a8:	e041      	b.n	800842e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083b0:	b2db      	uxtb	r3, r3
 80083b2:	2b60      	cmp	r3, #96	; 0x60
 80083b4:	d125      	bne.n	8008402 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2220      	movs	r2, #32
 80083ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2200      	movs	r2, #0
 80083c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	695b      	ldr	r3, [r3, #20]
 80083ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083ce:	2b40      	cmp	r3, #64	; 0x40
 80083d0:	d10b      	bne.n	80083ea <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	691a      	ldr	r2, [r3, #16]
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083dc:	b2d2      	uxtb	r2, r2
 80083de:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083e4:	1c5a      	adds	r2, r3, #1
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	681a      	ldr	r2, [r3, #0]
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f022 0201 	bic.w	r2, r2, #1
 80083f8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f7fe ff0f 	bl	800721e <HAL_I2C_AbortCpltCallback>
 8008400:	e015      	b.n	800842e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	695b      	ldr	r3, [r3, #20]
 8008408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800840c:	2b40      	cmp	r3, #64	; 0x40
 800840e:	d10b      	bne.n	8008428 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	691a      	ldr	r2, [r3, #16]
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800841a:	b2d2      	uxtb	r2, r2
 800841c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008422:	1c5a      	adds	r2, r3, #1
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f7fe feee 	bl	800720a <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008432:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	f003 0301 	and.w	r3, r3, #1
 800843a:	2b00      	cmp	r3, #0
 800843c:	d10e      	bne.n	800845c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008444:	2b00      	cmp	r3, #0
 8008446:	d109      	bne.n	800845c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800844e:	2b00      	cmp	r3, #0
 8008450:	d104      	bne.n	800845c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008458:	2b00      	cmp	r3, #0
 800845a:	d007      	beq.n	800846c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	685a      	ldr	r2, [r3, #4]
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800846a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008472:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008478:	f003 0304 	and.w	r3, r3, #4
 800847c:	2b04      	cmp	r3, #4
 800847e:	d113      	bne.n	80084a8 <I2C_ITError+0x254>
 8008480:	7bfb      	ldrb	r3, [r7, #15]
 8008482:	2b28      	cmp	r3, #40	; 0x28
 8008484:	d110      	bne.n	80084a8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	4a0a      	ldr	r2, [pc, #40]	; (80084b4 <I2C_ITError+0x260>)
 800848a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2200      	movs	r2, #0
 8008490:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2220      	movs	r2, #32
 8008496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2200      	movs	r2, #0
 800849e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f7fe fe93 	bl	80071ce <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80084a8:	bf00      	nop
 80084aa:	3710      	adds	r7, #16
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}
 80084b0:	080084b9 	.word	0x080084b9
 80084b4:	ffff0000 	.word	0xffff0000

080084b8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b086      	sub	sp, #24
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80084c0:	2300      	movs	r3, #0
 80084c2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084c8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084d0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80084d2:	4b4b      	ldr	r3, [pc, #300]	; (8008600 <I2C_DMAAbort+0x148>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	08db      	lsrs	r3, r3, #3
 80084d8:	4a4a      	ldr	r2, [pc, #296]	; (8008604 <I2C_DMAAbort+0x14c>)
 80084da:	fba2 2303 	umull	r2, r3, r2, r3
 80084de:	0a1a      	lsrs	r2, r3, #8
 80084e0:	4613      	mov	r3, r2
 80084e2:	009b      	lsls	r3, r3, #2
 80084e4:	4413      	add	r3, r2
 80084e6:	00da      	lsls	r2, r3, #3
 80084e8:	1ad3      	subs	r3, r2, r3
 80084ea:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d106      	bne.n	8008500 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80084f2:	697b      	ldr	r3, [r7, #20]
 80084f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084f6:	f043 0220 	orr.w	r2, r3, #32
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80084fe:	e00a      	b.n	8008516 <I2C_DMAAbort+0x5e>
    }
    count--;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	3b01      	subs	r3, #1
 8008504:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008510:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008514:	d0ea      	beq.n	80084ec <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800851a:	2b00      	cmp	r3, #0
 800851c:	d003      	beq.n	8008526 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800851e:	697b      	ldr	r3, [r7, #20]
 8008520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008522:	2200      	movs	r2, #0
 8008524:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800852a:	2b00      	cmp	r3, #0
 800852c:	d003      	beq.n	8008536 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008532:	2200      	movs	r2, #0
 8008534:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008536:	697b      	ldr	r3, [r7, #20]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	681a      	ldr	r2, [r3, #0]
 800853c:	697b      	ldr	r3, [r7, #20]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008544:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8008546:	697b      	ldr	r3, [r7, #20]
 8008548:	2200      	movs	r2, #0
 800854a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800854c:	697b      	ldr	r3, [r7, #20]
 800854e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008550:	2b00      	cmp	r3, #0
 8008552:	d003      	beq.n	800855c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008554:	697b      	ldr	r3, [r7, #20]
 8008556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008558:	2200      	movs	r2, #0
 800855a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800855c:	697b      	ldr	r3, [r7, #20]
 800855e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008560:	2b00      	cmp	r3, #0
 8008562:	d003      	beq.n	800856c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008568:	2200      	movs	r2, #0
 800856a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800856c:	697b      	ldr	r3, [r7, #20]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	681a      	ldr	r2, [r3, #0]
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f022 0201 	bic.w	r2, r2, #1
 800857a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800857c:	697b      	ldr	r3, [r7, #20]
 800857e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008582:	b2db      	uxtb	r3, r3
 8008584:	2b60      	cmp	r3, #96	; 0x60
 8008586:	d10e      	bne.n	80085a6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	2220      	movs	r2, #32
 800858c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008590:	697b      	ldr	r3, [r7, #20]
 8008592:	2200      	movs	r2, #0
 8008594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8008598:	697b      	ldr	r3, [r7, #20]
 800859a:	2200      	movs	r2, #0
 800859c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800859e:	6978      	ldr	r0, [r7, #20]
 80085a0:	f7fe fe3d 	bl	800721e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80085a4:	e027      	b.n	80085f6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80085a6:	7cfb      	ldrb	r3, [r7, #19]
 80085a8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80085ac:	2b28      	cmp	r3, #40	; 0x28
 80085ae:	d117      	bne.n	80085e0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80085b0:	697b      	ldr	r3, [r7, #20]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	681a      	ldr	r2, [r3, #0]
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f042 0201 	orr.w	r2, r2, #1
 80085be:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80085c0:	697b      	ldr	r3, [r7, #20]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	681a      	ldr	r2, [r3, #0]
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80085ce:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80085d0:	697b      	ldr	r3, [r7, #20]
 80085d2:	2200      	movs	r2, #0
 80085d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	2228      	movs	r2, #40	; 0x28
 80085da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80085de:	e007      	b.n	80085f0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80085e0:	697b      	ldr	r3, [r7, #20]
 80085e2:	2220      	movs	r2, #32
 80085e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	2200      	movs	r2, #0
 80085ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80085f0:	6978      	ldr	r0, [r7, #20]
 80085f2:	f7fe fe0a 	bl	800720a <HAL_I2C_ErrorCallback>
}
 80085f6:	bf00      	nop
 80085f8:	3718      	adds	r7, #24
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}
 80085fe:	bf00      	nop
 8008600:	2000000c 	.word	0x2000000c
 8008604:	14f8b589 	.word	0x14f8b589

08008608 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8008608:	b480      	push	{r7}
 800860a:	b085      	sub	sp, #20
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008610:	2300      	movs	r3, #0
 8008612:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8008614:	4b13      	ldr	r3, [pc, #76]	; (8008664 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	08db      	lsrs	r3, r3, #3
 800861a:	4a13      	ldr	r2, [pc, #76]	; (8008668 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800861c:	fba2 2303 	umull	r2, r3, r2, r3
 8008620:	0a1a      	lsrs	r2, r3, #8
 8008622:	4613      	mov	r3, r2
 8008624:	009b      	lsls	r3, r3, #2
 8008626:	4413      	add	r3, r2
 8008628:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	3b01      	subs	r3, #1
 800862e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d107      	bne.n	8008646 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800863a:	f043 0220 	orr.w	r2, r3, #32
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008642:	2301      	movs	r3, #1
 8008644:	e008      	b.n	8008658 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008650:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008654:	d0e9      	beq.n	800862a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8008656:	2300      	movs	r3, #0
}
 8008658:	4618      	mov	r0, r3
 800865a:	3714      	adds	r7, #20
 800865c:	46bd      	mov	sp, r7
 800865e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008662:	4770      	bx	lr
 8008664:	2000000c 	.word	0x2000000c
 8008668:	14f8b589 	.word	0x14f8b589

0800866c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800866c:	b480      	push	{r7}
 800866e:	b083      	sub	sp, #12
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008678:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800867c:	d103      	bne.n	8008686 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2201      	movs	r2, #1
 8008682:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8008684:	e007      	b.n	8008696 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800868a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800868e:	d102      	bne.n	8008696 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2208      	movs	r2, #8
 8008694:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8008696:	bf00      	nop
 8008698:	370c      	adds	r7, #12
 800869a:	46bd      	mov	sp, r7
 800869c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a0:	4770      	bx	lr
	...

080086a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b086      	sub	sp, #24
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d101      	bne.n	80086b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80086b2:	2301      	movs	r3, #1
 80086b4:	e25e      	b.n	8008b74 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f003 0301 	and.w	r3, r3, #1
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d075      	beq.n	80087ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80086c2:	4b88      	ldr	r3, [pc, #544]	; (80088e4 <HAL_RCC_OscConfig+0x240>)
 80086c4:	689b      	ldr	r3, [r3, #8]
 80086c6:	f003 030c 	and.w	r3, r3, #12
 80086ca:	2b04      	cmp	r3, #4
 80086cc:	d00c      	beq.n	80086e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80086ce:	4b85      	ldr	r3, [pc, #532]	; (80088e4 <HAL_RCC_OscConfig+0x240>)
 80086d0:	689b      	ldr	r3, [r3, #8]
 80086d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80086d6:	2b08      	cmp	r3, #8
 80086d8:	d112      	bne.n	8008700 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80086da:	4b82      	ldr	r3, [pc, #520]	; (80088e4 <HAL_RCC_OscConfig+0x240>)
 80086dc:	685b      	ldr	r3, [r3, #4]
 80086de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80086e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80086e6:	d10b      	bne.n	8008700 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80086e8:	4b7e      	ldr	r3, [pc, #504]	; (80088e4 <HAL_RCC_OscConfig+0x240>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d05b      	beq.n	80087ac <HAL_RCC_OscConfig+0x108>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	685b      	ldr	r3, [r3, #4]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d157      	bne.n	80087ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80086fc:	2301      	movs	r3, #1
 80086fe:	e239      	b.n	8008b74 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	685b      	ldr	r3, [r3, #4]
 8008704:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008708:	d106      	bne.n	8008718 <HAL_RCC_OscConfig+0x74>
 800870a:	4b76      	ldr	r3, [pc, #472]	; (80088e4 <HAL_RCC_OscConfig+0x240>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	4a75      	ldr	r2, [pc, #468]	; (80088e4 <HAL_RCC_OscConfig+0x240>)
 8008710:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008714:	6013      	str	r3, [r2, #0]
 8008716:	e01d      	b.n	8008754 <HAL_RCC_OscConfig+0xb0>
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	685b      	ldr	r3, [r3, #4]
 800871c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008720:	d10c      	bne.n	800873c <HAL_RCC_OscConfig+0x98>
 8008722:	4b70      	ldr	r3, [pc, #448]	; (80088e4 <HAL_RCC_OscConfig+0x240>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	4a6f      	ldr	r2, [pc, #444]	; (80088e4 <HAL_RCC_OscConfig+0x240>)
 8008728:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800872c:	6013      	str	r3, [r2, #0]
 800872e:	4b6d      	ldr	r3, [pc, #436]	; (80088e4 <HAL_RCC_OscConfig+0x240>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	4a6c      	ldr	r2, [pc, #432]	; (80088e4 <HAL_RCC_OscConfig+0x240>)
 8008734:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008738:	6013      	str	r3, [r2, #0]
 800873a:	e00b      	b.n	8008754 <HAL_RCC_OscConfig+0xb0>
 800873c:	4b69      	ldr	r3, [pc, #420]	; (80088e4 <HAL_RCC_OscConfig+0x240>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	4a68      	ldr	r2, [pc, #416]	; (80088e4 <HAL_RCC_OscConfig+0x240>)
 8008742:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008746:	6013      	str	r3, [r2, #0]
 8008748:	4b66      	ldr	r3, [pc, #408]	; (80088e4 <HAL_RCC_OscConfig+0x240>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	4a65      	ldr	r2, [pc, #404]	; (80088e4 <HAL_RCC_OscConfig+0x240>)
 800874e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008752:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	685b      	ldr	r3, [r3, #4]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d013      	beq.n	8008784 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800875c:	f7fc fd24 	bl	80051a8 <HAL_GetTick>
 8008760:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008762:	e008      	b.n	8008776 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008764:	f7fc fd20 	bl	80051a8 <HAL_GetTick>
 8008768:	4602      	mov	r2, r0
 800876a:	693b      	ldr	r3, [r7, #16]
 800876c:	1ad3      	subs	r3, r2, r3
 800876e:	2b64      	cmp	r3, #100	; 0x64
 8008770:	d901      	bls.n	8008776 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008772:	2303      	movs	r3, #3
 8008774:	e1fe      	b.n	8008b74 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008776:	4b5b      	ldr	r3, [pc, #364]	; (80088e4 <HAL_RCC_OscConfig+0x240>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800877e:	2b00      	cmp	r3, #0
 8008780:	d0f0      	beq.n	8008764 <HAL_RCC_OscConfig+0xc0>
 8008782:	e014      	b.n	80087ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008784:	f7fc fd10 	bl	80051a8 <HAL_GetTick>
 8008788:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800878a:	e008      	b.n	800879e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800878c:	f7fc fd0c 	bl	80051a8 <HAL_GetTick>
 8008790:	4602      	mov	r2, r0
 8008792:	693b      	ldr	r3, [r7, #16]
 8008794:	1ad3      	subs	r3, r2, r3
 8008796:	2b64      	cmp	r3, #100	; 0x64
 8008798:	d901      	bls.n	800879e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800879a:	2303      	movs	r3, #3
 800879c:	e1ea      	b.n	8008b74 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800879e:	4b51      	ldr	r3, [pc, #324]	; (80088e4 <HAL_RCC_OscConfig+0x240>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d1f0      	bne.n	800878c <HAL_RCC_OscConfig+0xe8>
 80087aa:	e000      	b.n	80087ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80087ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f003 0302 	and.w	r3, r3, #2
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d063      	beq.n	8008882 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80087ba:	4b4a      	ldr	r3, [pc, #296]	; (80088e4 <HAL_RCC_OscConfig+0x240>)
 80087bc:	689b      	ldr	r3, [r3, #8]
 80087be:	f003 030c 	and.w	r3, r3, #12
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d00b      	beq.n	80087de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80087c6:	4b47      	ldr	r3, [pc, #284]	; (80088e4 <HAL_RCC_OscConfig+0x240>)
 80087c8:	689b      	ldr	r3, [r3, #8]
 80087ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80087ce:	2b08      	cmp	r3, #8
 80087d0:	d11c      	bne.n	800880c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80087d2:	4b44      	ldr	r3, [pc, #272]	; (80088e4 <HAL_RCC_OscConfig+0x240>)
 80087d4:	685b      	ldr	r3, [r3, #4]
 80087d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d116      	bne.n	800880c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80087de:	4b41      	ldr	r3, [pc, #260]	; (80088e4 <HAL_RCC_OscConfig+0x240>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f003 0302 	and.w	r3, r3, #2
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d005      	beq.n	80087f6 <HAL_RCC_OscConfig+0x152>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	68db      	ldr	r3, [r3, #12]
 80087ee:	2b01      	cmp	r3, #1
 80087f0:	d001      	beq.n	80087f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80087f2:	2301      	movs	r3, #1
 80087f4:	e1be      	b.n	8008b74 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80087f6:	4b3b      	ldr	r3, [pc, #236]	; (80088e4 <HAL_RCC_OscConfig+0x240>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	691b      	ldr	r3, [r3, #16]
 8008802:	00db      	lsls	r3, r3, #3
 8008804:	4937      	ldr	r1, [pc, #220]	; (80088e4 <HAL_RCC_OscConfig+0x240>)
 8008806:	4313      	orrs	r3, r2
 8008808:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800880a:	e03a      	b.n	8008882 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	68db      	ldr	r3, [r3, #12]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d020      	beq.n	8008856 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008814:	4b34      	ldr	r3, [pc, #208]	; (80088e8 <HAL_RCC_OscConfig+0x244>)
 8008816:	2201      	movs	r2, #1
 8008818:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800881a:	f7fc fcc5 	bl	80051a8 <HAL_GetTick>
 800881e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008820:	e008      	b.n	8008834 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008822:	f7fc fcc1 	bl	80051a8 <HAL_GetTick>
 8008826:	4602      	mov	r2, r0
 8008828:	693b      	ldr	r3, [r7, #16]
 800882a:	1ad3      	subs	r3, r2, r3
 800882c:	2b02      	cmp	r3, #2
 800882e:	d901      	bls.n	8008834 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008830:	2303      	movs	r3, #3
 8008832:	e19f      	b.n	8008b74 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008834:	4b2b      	ldr	r3, [pc, #172]	; (80088e4 <HAL_RCC_OscConfig+0x240>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f003 0302 	and.w	r3, r3, #2
 800883c:	2b00      	cmp	r3, #0
 800883e:	d0f0      	beq.n	8008822 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008840:	4b28      	ldr	r3, [pc, #160]	; (80088e4 <HAL_RCC_OscConfig+0x240>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	691b      	ldr	r3, [r3, #16]
 800884c:	00db      	lsls	r3, r3, #3
 800884e:	4925      	ldr	r1, [pc, #148]	; (80088e4 <HAL_RCC_OscConfig+0x240>)
 8008850:	4313      	orrs	r3, r2
 8008852:	600b      	str	r3, [r1, #0]
 8008854:	e015      	b.n	8008882 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008856:	4b24      	ldr	r3, [pc, #144]	; (80088e8 <HAL_RCC_OscConfig+0x244>)
 8008858:	2200      	movs	r2, #0
 800885a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800885c:	f7fc fca4 	bl	80051a8 <HAL_GetTick>
 8008860:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008862:	e008      	b.n	8008876 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008864:	f7fc fca0 	bl	80051a8 <HAL_GetTick>
 8008868:	4602      	mov	r2, r0
 800886a:	693b      	ldr	r3, [r7, #16]
 800886c:	1ad3      	subs	r3, r2, r3
 800886e:	2b02      	cmp	r3, #2
 8008870:	d901      	bls.n	8008876 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008872:	2303      	movs	r3, #3
 8008874:	e17e      	b.n	8008b74 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008876:	4b1b      	ldr	r3, [pc, #108]	; (80088e4 <HAL_RCC_OscConfig+0x240>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f003 0302 	and.w	r3, r3, #2
 800887e:	2b00      	cmp	r3, #0
 8008880:	d1f0      	bne.n	8008864 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f003 0308 	and.w	r3, r3, #8
 800888a:	2b00      	cmp	r3, #0
 800888c:	d036      	beq.n	80088fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	695b      	ldr	r3, [r3, #20]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d016      	beq.n	80088c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008896:	4b15      	ldr	r3, [pc, #84]	; (80088ec <HAL_RCC_OscConfig+0x248>)
 8008898:	2201      	movs	r2, #1
 800889a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800889c:	f7fc fc84 	bl	80051a8 <HAL_GetTick>
 80088a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80088a2:	e008      	b.n	80088b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80088a4:	f7fc fc80 	bl	80051a8 <HAL_GetTick>
 80088a8:	4602      	mov	r2, r0
 80088aa:	693b      	ldr	r3, [r7, #16]
 80088ac:	1ad3      	subs	r3, r2, r3
 80088ae:	2b02      	cmp	r3, #2
 80088b0:	d901      	bls.n	80088b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80088b2:	2303      	movs	r3, #3
 80088b4:	e15e      	b.n	8008b74 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80088b6:	4b0b      	ldr	r3, [pc, #44]	; (80088e4 <HAL_RCC_OscConfig+0x240>)
 80088b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80088ba:	f003 0302 	and.w	r3, r3, #2
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d0f0      	beq.n	80088a4 <HAL_RCC_OscConfig+0x200>
 80088c2:	e01b      	b.n	80088fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80088c4:	4b09      	ldr	r3, [pc, #36]	; (80088ec <HAL_RCC_OscConfig+0x248>)
 80088c6:	2200      	movs	r2, #0
 80088c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80088ca:	f7fc fc6d 	bl	80051a8 <HAL_GetTick>
 80088ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80088d0:	e00e      	b.n	80088f0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80088d2:	f7fc fc69 	bl	80051a8 <HAL_GetTick>
 80088d6:	4602      	mov	r2, r0
 80088d8:	693b      	ldr	r3, [r7, #16]
 80088da:	1ad3      	subs	r3, r2, r3
 80088dc:	2b02      	cmp	r3, #2
 80088de:	d907      	bls.n	80088f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80088e0:	2303      	movs	r3, #3
 80088e2:	e147      	b.n	8008b74 <HAL_RCC_OscConfig+0x4d0>
 80088e4:	40023800 	.word	0x40023800
 80088e8:	42470000 	.word	0x42470000
 80088ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80088f0:	4b88      	ldr	r3, [pc, #544]	; (8008b14 <HAL_RCC_OscConfig+0x470>)
 80088f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80088f4:	f003 0302 	and.w	r3, r3, #2
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d1ea      	bne.n	80088d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f003 0304 	and.w	r3, r3, #4
 8008904:	2b00      	cmp	r3, #0
 8008906:	f000 8097 	beq.w	8008a38 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800890a:	2300      	movs	r3, #0
 800890c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800890e:	4b81      	ldr	r3, [pc, #516]	; (8008b14 <HAL_RCC_OscConfig+0x470>)
 8008910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008916:	2b00      	cmp	r3, #0
 8008918:	d10f      	bne.n	800893a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800891a:	2300      	movs	r3, #0
 800891c:	60bb      	str	r3, [r7, #8]
 800891e:	4b7d      	ldr	r3, [pc, #500]	; (8008b14 <HAL_RCC_OscConfig+0x470>)
 8008920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008922:	4a7c      	ldr	r2, [pc, #496]	; (8008b14 <HAL_RCC_OscConfig+0x470>)
 8008924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008928:	6413      	str	r3, [r2, #64]	; 0x40
 800892a:	4b7a      	ldr	r3, [pc, #488]	; (8008b14 <HAL_RCC_OscConfig+0x470>)
 800892c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800892e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008932:	60bb      	str	r3, [r7, #8]
 8008934:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008936:	2301      	movs	r3, #1
 8008938:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800893a:	4b77      	ldr	r3, [pc, #476]	; (8008b18 <HAL_RCC_OscConfig+0x474>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008942:	2b00      	cmp	r3, #0
 8008944:	d118      	bne.n	8008978 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008946:	4b74      	ldr	r3, [pc, #464]	; (8008b18 <HAL_RCC_OscConfig+0x474>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	4a73      	ldr	r2, [pc, #460]	; (8008b18 <HAL_RCC_OscConfig+0x474>)
 800894c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008950:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008952:	f7fc fc29 	bl	80051a8 <HAL_GetTick>
 8008956:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008958:	e008      	b.n	800896c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800895a:	f7fc fc25 	bl	80051a8 <HAL_GetTick>
 800895e:	4602      	mov	r2, r0
 8008960:	693b      	ldr	r3, [r7, #16]
 8008962:	1ad3      	subs	r3, r2, r3
 8008964:	2b02      	cmp	r3, #2
 8008966:	d901      	bls.n	800896c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008968:	2303      	movs	r3, #3
 800896a:	e103      	b.n	8008b74 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800896c:	4b6a      	ldr	r3, [pc, #424]	; (8008b18 <HAL_RCC_OscConfig+0x474>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008974:	2b00      	cmp	r3, #0
 8008976:	d0f0      	beq.n	800895a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	689b      	ldr	r3, [r3, #8]
 800897c:	2b01      	cmp	r3, #1
 800897e:	d106      	bne.n	800898e <HAL_RCC_OscConfig+0x2ea>
 8008980:	4b64      	ldr	r3, [pc, #400]	; (8008b14 <HAL_RCC_OscConfig+0x470>)
 8008982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008984:	4a63      	ldr	r2, [pc, #396]	; (8008b14 <HAL_RCC_OscConfig+0x470>)
 8008986:	f043 0301 	orr.w	r3, r3, #1
 800898a:	6713      	str	r3, [r2, #112]	; 0x70
 800898c:	e01c      	b.n	80089c8 <HAL_RCC_OscConfig+0x324>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	689b      	ldr	r3, [r3, #8]
 8008992:	2b05      	cmp	r3, #5
 8008994:	d10c      	bne.n	80089b0 <HAL_RCC_OscConfig+0x30c>
 8008996:	4b5f      	ldr	r3, [pc, #380]	; (8008b14 <HAL_RCC_OscConfig+0x470>)
 8008998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800899a:	4a5e      	ldr	r2, [pc, #376]	; (8008b14 <HAL_RCC_OscConfig+0x470>)
 800899c:	f043 0304 	orr.w	r3, r3, #4
 80089a0:	6713      	str	r3, [r2, #112]	; 0x70
 80089a2:	4b5c      	ldr	r3, [pc, #368]	; (8008b14 <HAL_RCC_OscConfig+0x470>)
 80089a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089a6:	4a5b      	ldr	r2, [pc, #364]	; (8008b14 <HAL_RCC_OscConfig+0x470>)
 80089a8:	f043 0301 	orr.w	r3, r3, #1
 80089ac:	6713      	str	r3, [r2, #112]	; 0x70
 80089ae:	e00b      	b.n	80089c8 <HAL_RCC_OscConfig+0x324>
 80089b0:	4b58      	ldr	r3, [pc, #352]	; (8008b14 <HAL_RCC_OscConfig+0x470>)
 80089b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089b4:	4a57      	ldr	r2, [pc, #348]	; (8008b14 <HAL_RCC_OscConfig+0x470>)
 80089b6:	f023 0301 	bic.w	r3, r3, #1
 80089ba:	6713      	str	r3, [r2, #112]	; 0x70
 80089bc:	4b55      	ldr	r3, [pc, #340]	; (8008b14 <HAL_RCC_OscConfig+0x470>)
 80089be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089c0:	4a54      	ldr	r2, [pc, #336]	; (8008b14 <HAL_RCC_OscConfig+0x470>)
 80089c2:	f023 0304 	bic.w	r3, r3, #4
 80089c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	689b      	ldr	r3, [r3, #8]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d015      	beq.n	80089fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089d0:	f7fc fbea 	bl	80051a8 <HAL_GetTick>
 80089d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80089d6:	e00a      	b.n	80089ee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80089d8:	f7fc fbe6 	bl	80051a8 <HAL_GetTick>
 80089dc:	4602      	mov	r2, r0
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	1ad3      	subs	r3, r2, r3
 80089e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d901      	bls.n	80089ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80089ea:	2303      	movs	r3, #3
 80089ec:	e0c2      	b.n	8008b74 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80089ee:	4b49      	ldr	r3, [pc, #292]	; (8008b14 <HAL_RCC_OscConfig+0x470>)
 80089f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089f2:	f003 0302 	and.w	r3, r3, #2
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d0ee      	beq.n	80089d8 <HAL_RCC_OscConfig+0x334>
 80089fa:	e014      	b.n	8008a26 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80089fc:	f7fc fbd4 	bl	80051a8 <HAL_GetTick>
 8008a00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008a02:	e00a      	b.n	8008a1a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008a04:	f7fc fbd0 	bl	80051a8 <HAL_GetTick>
 8008a08:	4602      	mov	r2, r0
 8008a0a:	693b      	ldr	r3, [r7, #16]
 8008a0c:	1ad3      	subs	r3, r2, r3
 8008a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a12:	4293      	cmp	r3, r2
 8008a14:	d901      	bls.n	8008a1a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008a16:	2303      	movs	r3, #3
 8008a18:	e0ac      	b.n	8008b74 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008a1a:	4b3e      	ldr	r3, [pc, #248]	; (8008b14 <HAL_RCC_OscConfig+0x470>)
 8008a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a1e:	f003 0302 	and.w	r3, r3, #2
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d1ee      	bne.n	8008a04 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008a26:	7dfb      	ldrb	r3, [r7, #23]
 8008a28:	2b01      	cmp	r3, #1
 8008a2a:	d105      	bne.n	8008a38 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008a2c:	4b39      	ldr	r3, [pc, #228]	; (8008b14 <HAL_RCC_OscConfig+0x470>)
 8008a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a30:	4a38      	ldr	r2, [pc, #224]	; (8008b14 <HAL_RCC_OscConfig+0x470>)
 8008a32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a36:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	699b      	ldr	r3, [r3, #24]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	f000 8098 	beq.w	8008b72 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008a42:	4b34      	ldr	r3, [pc, #208]	; (8008b14 <HAL_RCC_OscConfig+0x470>)
 8008a44:	689b      	ldr	r3, [r3, #8]
 8008a46:	f003 030c 	and.w	r3, r3, #12
 8008a4a:	2b08      	cmp	r3, #8
 8008a4c:	d05c      	beq.n	8008b08 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	699b      	ldr	r3, [r3, #24]
 8008a52:	2b02      	cmp	r3, #2
 8008a54:	d141      	bne.n	8008ada <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a56:	4b31      	ldr	r3, [pc, #196]	; (8008b1c <HAL_RCC_OscConfig+0x478>)
 8008a58:	2200      	movs	r2, #0
 8008a5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a5c:	f7fc fba4 	bl	80051a8 <HAL_GetTick>
 8008a60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a62:	e008      	b.n	8008a76 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008a64:	f7fc fba0 	bl	80051a8 <HAL_GetTick>
 8008a68:	4602      	mov	r2, r0
 8008a6a:	693b      	ldr	r3, [r7, #16]
 8008a6c:	1ad3      	subs	r3, r2, r3
 8008a6e:	2b02      	cmp	r3, #2
 8008a70:	d901      	bls.n	8008a76 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008a72:	2303      	movs	r3, #3
 8008a74:	e07e      	b.n	8008b74 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a76:	4b27      	ldr	r3, [pc, #156]	; (8008b14 <HAL_RCC_OscConfig+0x470>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d1f0      	bne.n	8008a64 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	69da      	ldr	r2, [r3, #28]
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6a1b      	ldr	r3, [r3, #32]
 8008a8a:	431a      	orrs	r2, r3
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a90:	019b      	lsls	r3, r3, #6
 8008a92:	431a      	orrs	r2, r3
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a98:	085b      	lsrs	r3, r3, #1
 8008a9a:	3b01      	subs	r3, #1
 8008a9c:	041b      	lsls	r3, r3, #16
 8008a9e:	431a      	orrs	r2, r3
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aa4:	061b      	lsls	r3, r3, #24
 8008aa6:	491b      	ldr	r1, [pc, #108]	; (8008b14 <HAL_RCC_OscConfig+0x470>)
 8008aa8:	4313      	orrs	r3, r2
 8008aaa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008aac:	4b1b      	ldr	r3, [pc, #108]	; (8008b1c <HAL_RCC_OscConfig+0x478>)
 8008aae:	2201      	movs	r2, #1
 8008ab0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ab2:	f7fc fb79 	bl	80051a8 <HAL_GetTick>
 8008ab6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008ab8:	e008      	b.n	8008acc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008aba:	f7fc fb75 	bl	80051a8 <HAL_GetTick>
 8008abe:	4602      	mov	r2, r0
 8008ac0:	693b      	ldr	r3, [r7, #16]
 8008ac2:	1ad3      	subs	r3, r2, r3
 8008ac4:	2b02      	cmp	r3, #2
 8008ac6:	d901      	bls.n	8008acc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008ac8:	2303      	movs	r3, #3
 8008aca:	e053      	b.n	8008b74 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008acc:	4b11      	ldr	r3, [pc, #68]	; (8008b14 <HAL_RCC_OscConfig+0x470>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d0f0      	beq.n	8008aba <HAL_RCC_OscConfig+0x416>
 8008ad8:	e04b      	b.n	8008b72 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ada:	4b10      	ldr	r3, [pc, #64]	; (8008b1c <HAL_RCC_OscConfig+0x478>)
 8008adc:	2200      	movs	r2, #0
 8008ade:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ae0:	f7fc fb62 	bl	80051a8 <HAL_GetTick>
 8008ae4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008ae6:	e008      	b.n	8008afa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008ae8:	f7fc fb5e 	bl	80051a8 <HAL_GetTick>
 8008aec:	4602      	mov	r2, r0
 8008aee:	693b      	ldr	r3, [r7, #16]
 8008af0:	1ad3      	subs	r3, r2, r3
 8008af2:	2b02      	cmp	r3, #2
 8008af4:	d901      	bls.n	8008afa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008af6:	2303      	movs	r3, #3
 8008af8:	e03c      	b.n	8008b74 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008afa:	4b06      	ldr	r3, [pc, #24]	; (8008b14 <HAL_RCC_OscConfig+0x470>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d1f0      	bne.n	8008ae8 <HAL_RCC_OscConfig+0x444>
 8008b06:	e034      	b.n	8008b72 <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	699b      	ldr	r3, [r3, #24]
 8008b0c:	2b01      	cmp	r3, #1
 8008b0e:	d107      	bne.n	8008b20 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008b10:	2301      	movs	r3, #1
 8008b12:	e02f      	b.n	8008b74 <HAL_RCC_OscConfig+0x4d0>
 8008b14:	40023800 	.word	0x40023800
 8008b18:	40007000 	.word	0x40007000
 8008b1c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008b20:	4b16      	ldr	r3, [pc, #88]	; (8008b7c <HAL_RCC_OscConfig+0x4d8>)
 8008b22:	685b      	ldr	r3, [r3, #4]
 8008b24:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	69db      	ldr	r3, [r3, #28]
 8008b30:	429a      	cmp	r2, r3
 8008b32:	d11c      	bne.n	8008b6e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b3e:	429a      	cmp	r2, r3
 8008b40:	d115      	bne.n	8008b6e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8008b42:	68fa      	ldr	r2, [r7, #12]
 8008b44:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008b48:	4013      	ands	r3, r2
 8008b4a:	687a      	ldr	r2, [r7, #4]
 8008b4c:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d10d      	bne.n	8008b6e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8008b5c:	429a      	cmp	r2, r3
 8008b5e:	d106      	bne.n	8008b6e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008b6a:	429a      	cmp	r2, r3
 8008b6c:	d001      	beq.n	8008b72 <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 8008b6e:	2301      	movs	r3, #1
 8008b70:	e000      	b.n	8008b74 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 8008b72:	2300      	movs	r3, #0
}
 8008b74:	4618      	mov	r0, r3
 8008b76:	3718      	adds	r7, #24
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}
 8008b7c:	40023800 	.word	0x40023800

08008b80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b084      	sub	sp, #16
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
 8008b88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d101      	bne.n	8008b94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008b90:	2301      	movs	r3, #1
 8008b92:	e0cc      	b.n	8008d2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008b94:	4b68      	ldr	r3, [pc, #416]	; (8008d38 <HAL_RCC_ClockConfig+0x1b8>)
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f003 030f 	and.w	r3, r3, #15
 8008b9c:	683a      	ldr	r2, [r7, #0]
 8008b9e:	429a      	cmp	r2, r3
 8008ba0:	d90c      	bls.n	8008bbc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ba2:	4b65      	ldr	r3, [pc, #404]	; (8008d38 <HAL_RCC_ClockConfig+0x1b8>)
 8008ba4:	683a      	ldr	r2, [r7, #0]
 8008ba6:	b2d2      	uxtb	r2, r2
 8008ba8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008baa:	4b63      	ldr	r3, [pc, #396]	; (8008d38 <HAL_RCC_ClockConfig+0x1b8>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f003 030f 	and.w	r3, r3, #15
 8008bb2:	683a      	ldr	r2, [r7, #0]
 8008bb4:	429a      	cmp	r2, r3
 8008bb6:	d001      	beq.n	8008bbc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008bb8:	2301      	movs	r3, #1
 8008bba:	e0b8      	b.n	8008d2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f003 0302 	and.w	r3, r3, #2
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d020      	beq.n	8008c0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f003 0304 	and.w	r3, r3, #4
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d005      	beq.n	8008be0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008bd4:	4b59      	ldr	r3, [pc, #356]	; (8008d3c <HAL_RCC_ClockConfig+0x1bc>)
 8008bd6:	689b      	ldr	r3, [r3, #8]
 8008bd8:	4a58      	ldr	r2, [pc, #352]	; (8008d3c <HAL_RCC_ClockConfig+0x1bc>)
 8008bda:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008bde:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f003 0308 	and.w	r3, r3, #8
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d005      	beq.n	8008bf8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008bec:	4b53      	ldr	r3, [pc, #332]	; (8008d3c <HAL_RCC_ClockConfig+0x1bc>)
 8008bee:	689b      	ldr	r3, [r3, #8]
 8008bf0:	4a52      	ldr	r2, [pc, #328]	; (8008d3c <HAL_RCC_ClockConfig+0x1bc>)
 8008bf2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008bf6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008bf8:	4b50      	ldr	r3, [pc, #320]	; (8008d3c <HAL_RCC_ClockConfig+0x1bc>)
 8008bfa:	689b      	ldr	r3, [r3, #8]
 8008bfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	689b      	ldr	r3, [r3, #8]
 8008c04:	494d      	ldr	r1, [pc, #308]	; (8008d3c <HAL_RCC_ClockConfig+0x1bc>)
 8008c06:	4313      	orrs	r3, r2
 8008c08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f003 0301 	and.w	r3, r3, #1
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d044      	beq.n	8008ca0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	685b      	ldr	r3, [r3, #4]
 8008c1a:	2b01      	cmp	r3, #1
 8008c1c:	d107      	bne.n	8008c2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008c1e:	4b47      	ldr	r3, [pc, #284]	; (8008d3c <HAL_RCC_ClockConfig+0x1bc>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d119      	bne.n	8008c5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	e07f      	b.n	8008d2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	685b      	ldr	r3, [r3, #4]
 8008c32:	2b02      	cmp	r3, #2
 8008c34:	d003      	beq.n	8008c3e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008c3a:	2b03      	cmp	r3, #3
 8008c3c:	d107      	bne.n	8008c4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008c3e:	4b3f      	ldr	r3, [pc, #252]	; (8008d3c <HAL_RCC_ClockConfig+0x1bc>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d109      	bne.n	8008c5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	e06f      	b.n	8008d2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008c4e:	4b3b      	ldr	r3, [pc, #236]	; (8008d3c <HAL_RCC_ClockConfig+0x1bc>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f003 0302 	and.w	r3, r3, #2
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d101      	bne.n	8008c5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	e067      	b.n	8008d2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008c5e:	4b37      	ldr	r3, [pc, #220]	; (8008d3c <HAL_RCC_ClockConfig+0x1bc>)
 8008c60:	689b      	ldr	r3, [r3, #8]
 8008c62:	f023 0203 	bic.w	r2, r3, #3
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	685b      	ldr	r3, [r3, #4]
 8008c6a:	4934      	ldr	r1, [pc, #208]	; (8008d3c <HAL_RCC_ClockConfig+0x1bc>)
 8008c6c:	4313      	orrs	r3, r2
 8008c6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008c70:	f7fc fa9a 	bl	80051a8 <HAL_GetTick>
 8008c74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c76:	e00a      	b.n	8008c8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008c78:	f7fc fa96 	bl	80051a8 <HAL_GetTick>
 8008c7c:	4602      	mov	r2, r0
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	1ad3      	subs	r3, r2, r3
 8008c82:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d901      	bls.n	8008c8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008c8a:	2303      	movs	r3, #3
 8008c8c:	e04f      	b.n	8008d2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c8e:	4b2b      	ldr	r3, [pc, #172]	; (8008d3c <HAL_RCC_ClockConfig+0x1bc>)
 8008c90:	689b      	ldr	r3, [r3, #8]
 8008c92:	f003 020c 	and.w	r2, r3, #12
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	685b      	ldr	r3, [r3, #4]
 8008c9a:	009b      	lsls	r3, r3, #2
 8008c9c:	429a      	cmp	r2, r3
 8008c9e:	d1eb      	bne.n	8008c78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008ca0:	4b25      	ldr	r3, [pc, #148]	; (8008d38 <HAL_RCC_ClockConfig+0x1b8>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f003 030f 	and.w	r3, r3, #15
 8008ca8:	683a      	ldr	r2, [r7, #0]
 8008caa:	429a      	cmp	r2, r3
 8008cac:	d20c      	bcs.n	8008cc8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008cae:	4b22      	ldr	r3, [pc, #136]	; (8008d38 <HAL_RCC_ClockConfig+0x1b8>)
 8008cb0:	683a      	ldr	r2, [r7, #0]
 8008cb2:	b2d2      	uxtb	r2, r2
 8008cb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008cb6:	4b20      	ldr	r3, [pc, #128]	; (8008d38 <HAL_RCC_ClockConfig+0x1b8>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	f003 030f 	and.w	r3, r3, #15
 8008cbe:	683a      	ldr	r2, [r7, #0]
 8008cc0:	429a      	cmp	r2, r3
 8008cc2:	d001      	beq.n	8008cc8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008cc4:	2301      	movs	r3, #1
 8008cc6:	e032      	b.n	8008d2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f003 0304 	and.w	r3, r3, #4
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d008      	beq.n	8008ce6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008cd4:	4b19      	ldr	r3, [pc, #100]	; (8008d3c <HAL_RCC_ClockConfig+0x1bc>)
 8008cd6:	689b      	ldr	r3, [r3, #8]
 8008cd8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	68db      	ldr	r3, [r3, #12]
 8008ce0:	4916      	ldr	r1, [pc, #88]	; (8008d3c <HAL_RCC_ClockConfig+0x1bc>)
 8008ce2:	4313      	orrs	r3, r2
 8008ce4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f003 0308 	and.w	r3, r3, #8
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d009      	beq.n	8008d06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008cf2:	4b12      	ldr	r3, [pc, #72]	; (8008d3c <HAL_RCC_ClockConfig+0x1bc>)
 8008cf4:	689b      	ldr	r3, [r3, #8]
 8008cf6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	691b      	ldr	r3, [r3, #16]
 8008cfe:	00db      	lsls	r3, r3, #3
 8008d00:	490e      	ldr	r1, [pc, #56]	; (8008d3c <HAL_RCC_ClockConfig+0x1bc>)
 8008d02:	4313      	orrs	r3, r2
 8008d04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008d06:	f000 f82d 	bl	8008d64 <HAL_RCC_GetSysClockFreq>
 8008d0a:	4602      	mov	r2, r0
 8008d0c:	4b0b      	ldr	r3, [pc, #44]	; (8008d3c <HAL_RCC_ClockConfig+0x1bc>)
 8008d0e:	689b      	ldr	r3, [r3, #8]
 8008d10:	091b      	lsrs	r3, r3, #4
 8008d12:	f003 030f 	and.w	r3, r3, #15
 8008d16:	490a      	ldr	r1, [pc, #40]	; (8008d40 <HAL_RCC_ClockConfig+0x1c0>)
 8008d18:	5ccb      	ldrb	r3, [r1, r3]
 8008d1a:	fa22 f303 	lsr.w	r3, r2, r3
 8008d1e:	4a09      	ldr	r2, [pc, #36]	; (8008d44 <HAL_RCC_ClockConfig+0x1c4>)
 8008d20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008d22:	4b09      	ldr	r3, [pc, #36]	; (8008d48 <HAL_RCC_ClockConfig+0x1c8>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	4618      	mov	r0, r3
 8008d28:	f7fc f9fa 	bl	8005120 <HAL_InitTick>

  return HAL_OK;
 8008d2c:	2300      	movs	r3, #0
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	3710      	adds	r7, #16
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}
 8008d36:	bf00      	nop
 8008d38:	40023c00 	.word	0x40023c00
 8008d3c:	40023800 	.word	0x40023800
 8008d40:	0800bc28 	.word	0x0800bc28
 8008d44:	2000000c 	.word	0x2000000c
 8008d48:	20000010 	.word	0x20000010

08008d4c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8008d50:	4b03      	ldr	r3, [pc, #12]	; (8008d60 <HAL_RCC_EnableCSS+0x14>)
 8008d52:	2201      	movs	r2, #1
 8008d54:	601a      	str	r2, [r3, #0]
}
 8008d56:	bf00      	nop
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5e:	4770      	bx	lr
 8008d60:	4247004c 	.word	0x4247004c

08008d64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008d64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008d68:	b094      	sub	sp, #80	; 0x50
 8008d6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	647b      	str	r3, [r7, #68]	; 0x44
 8008d70:	2300      	movs	r3, #0
 8008d72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d74:	2300      	movs	r3, #0
 8008d76:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008d78:	2300      	movs	r3, #0
 8008d7a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008d7c:	4b79      	ldr	r3, [pc, #484]	; (8008f64 <HAL_RCC_GetSysClockFreq+0x200>)
 8008d7e:	689b      	ldr	r3, [r3, #8]
 8008d80:	f003 030c 	and.w	r3, r3, #12
 8008d84:	2b08      	cmp	r3, #8
 8008d86:	d00d      	beq.n	8008da4 <HAL_RCC_GetSysClockFreq+0x40>
 8008d88:	2b08      	cmp	r3, #8
 8008d8a:	f200 80e1 	bhi.w	8008f50 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d002      	beq.n	8008d98 <HAL_RCC_GetSysClockFreq+0x34>
 8008d92:	2b04      	cmp	r3, #4
 8008d94:	d003      	beq.n	8008d9e <HAL_RCC_GetSysClockFreq+0x3a>
 8008d96:	e0db      	b.n	8008f50 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008d98:	4b73      	ldr	r3, [pc, #460]	; (8008f68 <HAL_RCC_GetSysClockFreq+0x204>)
 8008d9a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8008d9c:	e0db      	b.n	8008f56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008d9e:	4b73      	ldr	r3, [pc, #460]	; (8008f6c <HAL_RCC_GetSysClockFreq+0x208>)
 8008da0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008da2:	e0d8      	b.n	8008f56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008da4:	4b6f      	ldr	r3, [pc, #444]	; (8008f64 <HAL_RCC_GetSysClockFreq+0x200>)
 8008da6:	685b      	ldr	r3, [r3, #4]
 8008da8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008dac:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008dae:	4b6d      	ldr	r3, [pc, #436]	; (8008f64 <HAL_RCC_GetSysClockFreq+0x200>)
 8008db0:	685b      	ldr	r3, [r3, #4]
 8008db2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d063      	beq.n	8008e82 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008dba:	4b6a      	ldr	r3, [pc, #424]	; (8008f64 <HAL_RCC_GetSysClockFreq+0x200>)
 8008dbc:	685b      	ldr	r3, [r3, #4]
 8008dbe:	099b      	lsrs	r3, r3, #6
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	63bb      	str	r3, [r7, #56]	; 0x38
 8008dc4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dcc:	633b      	str	r3, [r7, #48]	; 0x30
 8008dce:	2300      	movs	r3, #0
 8008dd0:	637b      	str	r3, [r7, #52]	; 0x34
 8008dd2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008dd6:	4622      	mov	r2, r4
 8008dd8:	462b      	mov	r3, r5
 8008dda:	f04f 0000 	mov.w	r0, #0
 8008dde:	f04f 0100 	mov.w	r1, #0
 8008de2:	0159      	lsls	r1, r3, #5
 8008de4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008de8:	0150      	lsls	r0, r2, #5
 8008dea:	4602      	mov	r2, r0
 8008dec:	460b      	mov	r3, r1
 8008dee:	4621      	mov	r1, r4
 8008df0:	1a51      	subs	r1, r2, r1
 8008df2:	6139      	str	r1, [r7, #16]
 8008df4:	4629      	mov	r1, r5
 8008df6:	eb63 0301 	sbc.w	r3, r3, r1
 8008dfa:	617b      	str	r3, [r7, #20]
 8008dfc:	f04f 0200 	mov.w	r2, #0
 8008e00:	f04f 0300 	mov.w	r3, #0
 8008e04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008e08:	4659      	mov	r1, fp
 8008e0a:	018b      	lsls	r3, r1, #6
 8008e0c:	4651      	mov	r1, sl
 8008e0e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008e12:	4651      	mov	r1, sl
 8008e14:	018a      	lsls	r2, r1, #6
 8008e16:	4651      	mov	r1, sl
 8008e18:	ebb2 0801 	subs.w	r8, r2, r1
 8008e1c:	4659      	mov	r1, fp
 8008e1e:	eb63 0901 	sbc.w	r9, r3, r1
 8008e22:	f04f 0200 	mov.w	r2, #0
 8008e26:	f04f 0300 	mov.w	r3, #0
 8008e2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008e2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008e32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008e36:	4690      	mov	r8, r2
 8008e38:	4699      	mov	r9, r3
 8008e3a:	4623      	mov	r3, r4
 8008e3c:	eb18 0303 	adds.w	r3, r8, r3
 8008e40:	60bb      	str	r3, [r7, #8]
 8008e42:	462b      	mov	r3, r5
 8008e44:	eb49 0303 	adc.w	r3, r9, r3
 8008e48:	60fb      	str	r3, [r7, #12]
 8008e4a:	f04f 0200 	mov.w	r2, #0
 8008e4e:	f04f 0300 	mov.w	r3, #0
 8008e52:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008e56:	4629      	mov	r1, r5
 8008e58:	024b      	lsls	r3, r1, #9
 8008e5a:	4621      	mov	r1, r4
 8008e5c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008e60:	4621      	mov	r1, r4
 8008e62:	024a      	lsls	r2, r1, #9
 8008e64:	4610      	mov	r0, r2
 8008e66:	4619      	mov	r1, r3
 8008e68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8008e6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008e70:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008e74:	f7f7 fa04 	bl	8000280 <__aeabi_uldivmod>
 8008e78:	4602      	mov	r2, r0
 8008e7a:	460b      	mov	r3, r1
 8008e7c:	4613      	mov	r3, r2
 8008e7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e80:	e058      	b.n	8008f34 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008e82:	4b38      	ldr	r3, [pc, #224]	; (8008f64 <HAL_RCC_GetSysClockFreq+0x200>)
 8008e84:	685b      	ldr	r3, [r3, #4]
 8008e86:	099b      	lsrs	r3, r3, #6
 8008e88:	2200      	movs	r2, #0
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	4611      	mov	r1, r2
 8008e8e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008e92:	623b      	str	r3, [r7, #32]
 8008e94:	2300      	movs	r3, #0
 8008e96:	627b      	str	r3, [r7, #36]	; 0x24
 8008e98:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008e9c:	4642      	mov	r2, r8
 8008e9e:	464b      	mov	r3, r9
 8008ea0:	f04f 0000 	mov.w	r0, #0
 8008ea4:	f04f 0100 	mov.w	r1, #0
 8008ea8:	0159      	lsls	r1, r3, #5
 8008eaa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008eae:	0150      	lsls	r0, r2, #5
 8008eb0:	4602      	mov	r2, r0
 8008eb2:	460b      	mov	r3, r1
 8008eb4:	4641      	mov	r1, r8
 8008eb6:	ebb2 0a01 	subs.w	sl, r2, r1
 8008eba:	4649      	mov	r1, r9
 8008ebc:	eb63 0b01 	sbc.w	fp, r3, r1
 8008ec0:	f04f 0200 	mov.w	r2, #0
 8008ec4:	f04f 0300 	mov.w	r3, #0
 8008ec8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008ecc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008ed0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008ed4:	ebb2 040a 	subs.w	r4, r2, sl
 8008ed8:	eb63 050b 	sbc.w	r5, r3, fp
 8008edc:	f04f 0200 	mov.w	r2, #0
 8008ee0:	f04f 0300 	mov.w	r3, #0
 8008ee4:	00eb      	lsls	r3, r5, #3
 8008ee6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008eea:	00e2      	lsls	r2, r4, #3
 8008eec:	4614      	mov	r4, r2
 8008eee:	461d      	mov	r5, r3
 8008ef0:	4643      	mov	r3, r8
 8008ef2:	18e3      	adds	r3, r4, r3
 8008ef4:	603b      	str	r3, [r7, #0]
 8008ef6:	464b      	mov	r3, r9
 8008ef8:	eb45 0303 	adc.w	r3, r5, r3
 8008efc:	607b      	str	r3, [r7, #4]
 8008efe:	f04f 0200 	mov.w	r2, #0
 8008f02:	f04f 0300 	mov.w	r3, #0
 8008f06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008f0a:	4629      	mov	r1, r5
 8008f0c:	028b      	lsls	r3, r1, #10
 8008f0e:	4621      	mov	r1, r4
 8008f10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008f14:	4621      	mov	r1, r4
 8008f16:	028a      	lsls	r2, r1, #10
 8008f18:	4610      	mov	r0, r2
 8008f1a:	4619      	mov	r1, r3
 8008f1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f1e:	2200      	movs	r2, #0
 8008f20:	61bb      	str	r3, [r7, #24]
 8008f22:	61fa      	str	r2, [r7, #28]
 8008f24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008f28:	f7f7 f9aa 	bl	8000280 <__aeabi_uldivmod>
 8008f2c:	4602      	mov	r2, r0
 8008f2e:	460b      	mov	r3, r1
 8008f30:	4613      	mov	r3, r2
 8008f32:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008f34:	4b0b      	ldr	r3, [pc, #44]	; (8008f64 <HAL_RCC_GetSysClockFreq+0x200>)
 8008f36:	685b      	ldr	r3, [r3, #4]
 8008f38:	0c1b      	lsrs	r3, r3, #16
 8008f3a:	f003 0303 	and.w	r3, r3, #3
 8008f3e:	3301      	adds	r3, #1
 8008f40:	005b      	lsls	r3, r3, #1
 8008f42:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8008f44:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008f46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f4c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008f4e:	e002      	b.n	8008f56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008f50:	4b05      	ldr	r3, [pc, #20]	; (8008f68 <HAL_RCC_GetSysClockFreq+0x204>)
 8008f52:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008f54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008f56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3750      	adds	r7, #80	; 0x50
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008f62:	bf00      	nop
 8008f64:	40023800 	.word	0x40023800
 8008f68:	00f42400 	.word	0x00f42400
 8008f6c:	007a1200 	.word	0x007a1200

08008f70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008f70:	b480      	push	{r7}
 8008f72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008f74:	4b03      	ldr	r3, [pc, #12]	; (8008f84 <HAL_RCC_GetHCLKFreq+0x14>)
 8008f76:	681b      	ldr	r3, [r3, #0]
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f80:	4770      	bx	lr
 8008f82:	bf00      	nop
 8008f84:	2000000c 	.word	0x2000000c

08008f88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008f8c:	f7ff fff0 	bl	8008f70 <HAL_RCC_GetHCLKFreq>
 8008f90:	4602      	mov	r2, r0
 8008f92:	4b05      	ldr	r3, [pc, #20]	; (8008fa8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008f94:	689b      	ldr	r3, [r3, #8]
 8008f96:	0a9b      	lsrs	r3, r3, #10
 8008f98:	f003 0307 	and.w	r3, r3, #7
 8008f9c:	4903      	ldr	r1, [pc, #12]	; (8008fac <HAL_RCC_GetPCLK1Freq+0x24>)
 8008f9e:	5ccb      	ldrb	r3, [r1, r3]
 8008fa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	bd80      	pop	{r7, pc}
 8008fa8:	40023800 	.word	0x40023800
 8008fac:	0800bc38 	.word	0x0800bc38

08008fb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008fb4:	f7ff ffdc 	bl	8008f70 <HAL_RCC_GetHCLKFreq>
 8008fb8:	4602      	mov	r2, r0
 8008fba:	4b05      	ldr	r3, [pc, #20]	; (8008fd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008fbc:	689b      	ldr	r3, [r3, #8]
 8008fbe:	0b5b      	lsrs	r3, r3, #13
 8008fc0:	f003 0307 	and.w	r3, r3, #7
 8008fc4:	4903      	ldr	r1, [pc, #12]	; (8008fd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008fc6:	5ccb      	ldrb	r3, [r1, r3]
 8008fc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008fcc:	4618      	mov	r0, r3
 8008fce:	bd80      	pop	{r7, pc}
 8008fd0:	40023800 	.word	0x40023800
 8008fd4:	0800bc38 	.word	0x0800bc38

08008fd8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b088      	sub	sp, #32
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	685b      	ldr	r3, [r3, #4]
 8008fe6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	689b      	ldr	r3, [r3, #8]
 8008fee:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008ff0:	69bb      	ldr	r3, [r7, #24]
 8008ff2:	099b      	lsrs	r3, r3, #6
 8008ff4:	f003 0301 	and.w	r3, r3, #1
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d10f      	bne.n	800901c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008ffc:	69bb      	ldr	r3, [r7, #24]
 8008ffe:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009002:	2b00      	cmp	r3, #0
 8009004:	d00a      	beq.n	800901c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009006:	69fb      	ldr	r3, [r7, #28]
 8009008:	099b      	lsrs	r3, r3, #6
 800900a:	f003 0301 	and.w	r3, r3, #1
 800900e:	2b00      	cmp	r3, #0
 8009010:	d004      	beq.n	800901c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	4798      	blx	r3
    return;
 800901a:	e0d7      	b.n	80091cc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800901c:	69bb      	ldr	r3, [r7, #24]
 800901e:	085b      	lsrs	r3, r3, #1
 8009020:	f003 0301 	and.w	r3, r3, #1
 8009024:	2b00      	cmp	r3, #0
 8009026:	d00a      	beq.n	800903e <HAL_SPI_IRQHandler+0x66>
 8009028:	69fb      	ldr	r3, [r7, #28]
 800902a:	09db      	lsrs	r3, r3, #7
 800902c:	f003 0301 	and.w	r3, r3, #1
 8009030:	2b00      	cmp	r3, #0
 8009032:	d004      	beq.n	800903e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009038:	6878      	ldr	r0, [r7, #4]
 800903a:	4798      	blx	r3
    return;
 800903c:	e0c6      	b.n	80091cc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800903e:	69bb      	ldr	r3, [r7, #24]
 8009040:	095b      	lsrs	r3, r3, #5
 8009042:	f003 0301 	and.w	r3, r3, #1
 8009046:	2b00      	cmp	r3, #0
 8009048:	d10c      	bne.n	8009064 <HAL_SPI_IRQHandler+0x8c>
 800904a:	69bb      	ldr	r3, [r7, #24]
 800904c:	099b      	lsrs	r3, r3, #6
 800904e:	f003 0301 	and.w	r3, r3, #1
 8009052:	2b00      	cmp	r3, #0
 8009054:	d106      	bne.n	8009064 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8009056:	69bb      	ldr	r3, [r7, #24]
 8009058:	0a1b      	lsrs	r3, r3, #8
 800905a:	f003 0301 	and.w	r3, r3, #1
 800905e:	2b00      	cmp	r3, #0
 8009060:	f000 80b4 	beq.w	80091cc <HAL_SPI_IRQHandler+0x1f4>
 8009064:	69fb      	ldr	r3, [r7, #28]
 8009066:	095b      	lsrs	r3, r3, #5
 8009068:	f003 0301 	and.w	r3, r3, #1
 800906c:	2b00      	cmp	r3, #0
 800906e:	f000 80ad 	beq.w	80091cc <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009072:	69bb      	ldr	r3, [r7, #24]
 8009074:	099b      	lsrs	r3, r3, #6
 8009076:	f003 0301 	and.w	r3, r3, #1
 800907a:	2b00      	cmp	r3, #0
 800907c:	d023      	beq.n	80090c6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009084:	b2db      	uxtb	r3, r3
 8009086:	2b03      	cmp	r3, #3
 8009088:	d011      	beq.n	80090ae <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800908e:	f043 0204 	orr.w	r2, r3, #4
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009096:	2300      	movs	r3, #0
 8009098:	617b      	str	r3, [r7, #20]
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	68db      	ldr	r3, [r3, #12]
 80090a0:	617b      	str	r3, [r7, #20]
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	689b      	ldr	r3, [r3, #8]
 80090a8:	617b      	str	r3, [r7, #20]
 80090aa:	697b      	ldr	r3, [r7, #20]
 80090ac:	e00b      	b.n	80090c6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80090ae:	2300      	movs	r3, #0
 80090b0:	613b      	str	r3, [r7, #16]
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	68db      	ldr	r3, [r3, #12]
 80090b8:	613b      	str	r3, [r7, #16]
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	689b      	ldr	r3, [r3, #8]
 80090c0:	613b      	str	r3, [r7, #16]
 80090c2:	693b      	ldr	r3, [r7, #16]
        return;
 80090c4:	e082      	b.n	80091cc <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80090c6:	69bb      	ldr	r3, [r7, #24]
 80090c8:	095b      	lsrs	r3, r3, #5
 80090ca:	f003 0301 	and.w	r3, r3, #1
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d014      	beq.n	80090fc <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090d6:	f043 0201 	orr.w	r2, r3, #1
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80090de:	2300      	movs	r3, #0
 80090e0:	60fb      	str	r3, [r7, #12]
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	689b      	ldr	r3, [r3, #8]
 80090e8:	60fb      	str	r3, [r7, #12]
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	681a      	ldr	r2, [r3, #0]
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80090f8:	601a      	str	r2, [r3, #0]
 80090fa:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80090fc:	69bb      	ldr	r3, [r7, #24]
 80090fe:	0a1b      	lsrs	r3, r3, #8
 8009100:	f003 0301 	and.w	r3, r3, #1
 8009104:	2b00      	cmp	r3, #0
 8009106:	d00c      	beq.n	8009122 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800910c:	f043 0208 	orr.w	r2, r3, #8
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009114:	2300      	movs	r3, #0
 8009116:	60bb      	str	r3, [r7, #8]
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	689b      	ldr	r3, [r3, #8]
 800911e:	60bb      	str	r3, [r7, #8]
 8009120:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009126:	2b00      	cmp	r3, #0
 8009128:	d04f      	beq.n	80091ca <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	685a      	ldr	r2, [r3, #4]
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009138:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2201      	movs	r2, #1
 800913e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8009142:	69fb      	ldr	r3, [r7, #28]
 8009144:	f003 0302 	and.w	r3, r3, #2
 8009148:	2b00      	cmp	r3, #0
 800914a:	d104      	bne.n	8009156 <HAL_SPI_IRQHandler+0x17e>
 800914c:	69fb      	ldr	r3, [r7, #28]
 800914e:	f003 0301 	and.w	r3, r3, #1
 8009152:	2b00      	cmp	r3, #0
 8009154:	d034      	beq.n	80091c0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	685a      	ldr	r2, [r3, #4]
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f022 0203 	bic.w	r2, r2, #3
 8009164:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800916a:	2b00      	cmp	r3, #0
 800916c:	d011      	beq.n	8009192 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009172:	4a18      	ldr	r2, [pc, #96]	; (80091d4 <HAL_SPI_IRQHandler+0x1fc>)
 8009174:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800917a:	4618      	mov	r0, r3
 800917c:	f7fd f980 	bl	8006480 <HAL_DMA_Abort_IT>
 8009180:	4603      	mov	r3, r0
 8009182:	2b00      	cmp	r3, #0
 8009184:	d005      	beq.n	8009192 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800918a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009196:	2b00      	cmp	r3, #0
 8009198:	d016      	beq.n	80091c8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800919e:	4a0d      	ldr	r2, [pc, #52]	; (80091d4 <HAL_SPI_IRQHandler+0x1fc>)
 80091a0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091a6:	4618      	mov	r0, r3
 80091a8:	f7fd f96a 	bl	8006480 <HAL_DMA_Abort_IT>
 80091ac:	4603      	mov	r3, r0
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d00a      	beq.n	80091c8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80091be:	e003      	b.n	80091c8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f000 f809 	bl	80091d8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80091c6:	e000      	b.n	80091ca <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80091c8:	bf00      	nop
    return;
 80091ca:	bf00      	nop
  }
}
 80091cc:	3720      	adds	r7, #32
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}
 80091d2:	bf00      	nop
 80091d4:	080091ed 	.word	0x080091ed

080091d8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80091d8:	b480      	push	{r7}
 80091da:	b083      	sub	sp, #12
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80091e0:	bf00      	nop
 80091e2:	370c      	adds	r7, #12
 80091e4:	46bd      	mov	sp, r7
 80091e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ea:	4770      	bx	lr

080091ec <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b084      	sub	sp, #16
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091f8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	2200      	movs	r2, #0
 80091fe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	2200      	movs	r2, #0
 8009204:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009206:	68f8      	ldr	r0, [r7, #12]
 8009208:	f7ff ffe6 	bl	80091d8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800920c:	bf00      	nop
 800920e:	3710      	adds	r7, #16
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}

08009214 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b082      	sub	sp, #8
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d101      	bne.n	8009226 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009222:	2301      	movs	r3, #1
 8009224:	e01d      	b.n	8009262 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800922c:	b2db      	uxtb	r3, r3
 800922e:	2b00      	cmp	r3, #0
 8009230:	d106      	bne.n	8009240 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2200      	movs	r2, #0
 8009236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	f7f8 faea 	bl	8001814 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2202      	movs	r2, #2
 8009244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681a      	ldr	r2, [r3, #0]
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	3304      	adds	r3, #4
 8009250:	4619      	mov	r1, r3
 8009252:	4610      	mov	r0, r2
 8009254:	f000 fb7e 	bl	8009954 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2201      	movs	r2, #1
 800925c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009260:	2300      	movs	r3, #0
}
 8009262:	4618      	mov	r0, r3
 8009264:	3708      	adds	r7, #8
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}

0800926a <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800926a:	b480      	push	{r7}
 800926c:	b085      	sub	sp, #20
 800926e:	af00      	add	r7, sp, #0
 8009270:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2202      	movs	r2, #2
 8009276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	689b      	ldr	r3, [r3, #8]
 8009280:	f003 0307 	and.w	r3, r3, #7
 8009284:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	2b06      	cmp	r3, #6
 800928a:	d007      	beq.n	800929c <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	681a      	ldr	r2, [r3, #0]
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f042 0201 	orr.w	r2, r2, #1
 800929a:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2201      	movs	r2, #1
 80092a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80092a4:	2300      	movs	r3, #0
}
 80092a6:	4618      	mov	r0, r3
 80092a8:	3714      	adds	r7, #20
 80092aa:	46bd      	mov	sp, r7
 80092ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b0:	4770      	bx	lr

080092b2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80092b2:	b480      	push	{r7}
 80092b4:	b085      	sub	sp, #20
 80092b6:	af00      	add	r7, sp, #0
 80092b8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	68da      	ldr	r2, [r3, #12]
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	f042 0201 	orr.w	r2, r2, #1
 80092c8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	689b      	ldr	r3, [r3, #8]
 80092d0:	f003 0307 	and.w	r3, r3, #7
 80092d4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	2b06      	cmp	r3, #6
 80092da:	d007      	beq.n	80092ec <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	681a      	ldr	r2, [r3, #0]
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f042 0201 	orr.w	r2, r2, #1
 80092ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80092ec:	2300      	movs	r3, #0
}
 80092ee:	4618      	mov	r0, r3
 80092f0:	3714      	adds	r7, #20
 80092f2:	46bd      	mov	sp, r7
 80092f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f8:	4770      	bx	lr

080092fa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80092fa:	b580      	push	{r7, lr}
 80092fc:	b082      	sub	sp, #8
 80092fe:	af00      	add	r7, sp, #0
 8009300:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d101      	bne.n	800930c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009308:	2301      	movs	r3, #1
 800930a:	e01d      	b.n	8009348 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009312:	b2db      	uxtb	r3, r3
 8009314:	2b00      	cmp	r3, #0
 8009316:	d106      	bne.n	8009326 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2200      	movs	r2, #0
 800931c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f7f8 f939 	bl	8001598 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2202      	movs	r2, #2
 800932a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681a      	ldr	r2, [r3, #0]
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	3304      	adds	r3, #4
 8009336:	4619      	mov	r1, r3
 8009338:	4610      	mov	r0, r2
 800933a:	f000 fb0b 	bl	8009954 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2201      	movs	r2, #1
 8009342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009346:	2300      	movs	r3, #0
}
 8009348:	4618      	mov	r0, r3
 800934a:	3708      	adds	r7, #8
 800934c:	46bd      	mov	sp, r7
 800934e:	bd80      	pop	{r7, pc}

08009350 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b084      	sub	sp, #16
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
 8009358:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	2201      	movs	r2, #1
 8009360:	6839      	ldr	r1, [r7, #0]
 8009362:	4618      	mov	r0, r3
 8009364:	f000 fde0 	bl	8009f28 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	4a15      	ldr	r2, [pc, #84]	; (80093c4 <HAL_TIM_PWM_Start+0x74>)
 800936e:	4293      	cmp	r3, r2
 8009370:	d004      	beq.n	800937c <HAL_TIM_PWM_Start+0x2c>
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	4a14      	ldr	r2, [pc, #80]	; (80093c8 <HAL_TIM_PWM_Start+0x78>)
 8009378:	4293      	cmp	r3, r2
 800937a:	d101      	bne.n	8009380 <HAL_TIM_PWM_Start+0x30>
 800937c:	2301      	movs	r3, #1
 800937e:	e000      	b.n	8009382 <HAL_TIM_PWM_Start+0x32>
 8009380:	2300      	movs	r3, #0
 8009382:	2b00      	cmp	r3, #0
 8009384:	d007      	beq.n	8009396 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009394:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	689b      	ldr	r3, [r3, #8]
 800939c:	f003 0307 	and.w	r3, r3, #7
 80093a0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	2b06      	cmp	r3, #6
 80093a6:	d007      	beq.n	80093b8 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	681a      	ldr	r2, [r3, #0]
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f042 0201 	orr.w	r2, r2, #1
 80093b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80093b8:	2300      	movs	r3, #0
}
 80093ba:	4618      	mov	r0, r3
 80093bc:	3710      	adds	r7, #16
 80093be:	46bd      	mov	sp, r7
 80093c0:	bd80      	pop	{r7, pc}
 80093c2:	bf00      	nop
 80093c4:	40010000 	.word	0x40010000
 80093c8:	40010400 	.word	0x40010400

080093cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b082      	sub	sp, #8
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	691b      	ldr	r3, [r3, #16]
 80093da:	f003 0302 	and.w	r3, r3, #2
 80093de:	2b02      	cmp	r3, #2
 80093e0:	d122      	bne.n	8009428 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	68db      	ldr	r3, [r3, #12]
 80093e8:	f003 0302 	and.w	r3, r3, #2
 80093ec:	2b02      	cmp	r3, #2
 80093ee:	d11b      	bne.n	8009428 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	f06f 0202 	mvn.w	r2, #2
 80093f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2201      	movs	r2, #1
 80093fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	699b      	ldr	r3, [r3, #24]
 8009406:	f003 0303 	and.w	r3, r3, #3
 800940a:	2b00      	cmp	r3, #0
 800940c:	d003      	beq.n	8009416 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	f000 fa82 	bl	8009918 <HAL_TIM_IC_CaptureCallback>
 8009414:	e005      	b.n	8009422 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f000 fa74 	bl	8009904 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f000 fa85 	bl	800992c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2200      	movs	r2, #0
 8009426:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	691b      	ldr	r3, [r3, #16]
 800942e:	f003 0304 	and.w	r3, r3, #4
 8009432:	2b04      	cmp	r3, #4
 8009434:	d122      	bne.n	800947c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	68db      	ldr	r3, [r3, #12]
 800943c:	f003 0304 	and.w	r3, r3, #4
 8009440:	2b04      	cmp	r3, #4
 8009442:	d11b      	bne.n	800947c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f06f 0204 	mvn.w	r2, #4
 800944c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2202      	movs	r2, #2
 8009452:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	699b      	ldr	r3, [r3, #24]
 800945a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800945e:	2b00      	cmp	r3, #0
 8009460:	d003      	beq.n	800946a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009462:	6878      	ldr	r0, [r7, #4]
 8009464:	f000 fa58 	bl	8009918 <HAL_TIM_IC_CaptureCallback>
 8009468:	e005      	b.n	8009476 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f000 fa4a 	bl	8009904 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f000 fa5b 	bl	800992c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2200      	movs	r2, #0
 800947a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	691b      	ldr	r3, [r3, #16]
 8009482:	f003 0308 	and.w	r3, r3, #8
 8009486:	2b08      	cmp	r3, #8
 8009488:	d122      	bne.n	80094d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	68db      	ldr	r3, [r3, #12]
 8009490:	f003 0308 	and.w	r3, r3, #8
 8009494:	2b08      	cmp	r3, #8
 8009496:	d11b      	bne.n	80094d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f06f 0208 	mvn.w	r2, #8
 80094a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2204      	movs	r2, #4
 80094a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	69db      	ldr	r3, [r3, #28]
 80094ae:	f003 0303 	and.w	r3, r3, #3
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d003      	beq.n	80094be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f000 fa2e 	bl	8009918 <HAL_TIM_IC_CaptureCallback>
 80094bc:	e005      	b.n	80094ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f000 fa20 	bl	8009904 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f000 fa31 	bl	800992c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2200      	movs	r2, #0
 80094ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	691b      	ldr	r3, [r3, #16]
 80094d6:	f003 0310 	and.w	r3, r3, #16
 80094da:	2b10      	cmp	r3, #16
 80094dc:	d122      	bne.n	8009524 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	68db      	ldr	r3, [r3, #12]
 80094e4:	f003 0310 	and.w	r3, r3, #16
 80094e8:	2b10      	cmp	r3, #16
 80094ea:	d11b      	bne.n	8009524 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f06f 0210 	mvn.w	r2, #16
 80094f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2208      	movs	r2, #8
 80094fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	69db      	ldr	r3, [r3, #28]
 8009502:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009506:	2b00      	cmp	r3, #0
 8009508:	d003      	beq.n	8009512 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f000 fa04 	bl	8009918 <HAL_TIM_IC_CaptureCallback>
 8009510:	e005      	b.n	800951e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f000 f9f6 	bl	8009904 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f000 fa07 	bl	800992c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2200      	movs	r2, #0
 8009522:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	691b      	ldr	r3, [r3, #16]
 800952a:	f003 0301 	and.w	r3, r3, #1
 800952e:	2b01      	cmp	r3, #1
 8009530:	d10e      	bne.n	8009550 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	68db      	ldr	r3, [r3, #12]
 8009538:	f003 0301 	and.w	r3, r3, #1
 800953c:	2b01      	cmp	r3, #1
 800953e:	d107      	bne.n	8009550 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	f06f 0201 	mvn.w	r2, #1
 8009548:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f000 f9d0 	bl	80098f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	691b      	ldr	r3, [r3, #16]
 8009556:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800955a:	2b80      	cmp	r3, #128	; 0x80
 800955c:	d10e      	bne.n	800957c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	68db      	ldr	r3, [r3, #12]
 8009564:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009568:	2b80      	cmp	r3, #128	; 0x80
 800956a:	d107      	bne.n	800957c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009574:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	f000 fd82 	bl	800a080 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	691b      	ldr	r3, [r3, #16]
 8009582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009586:	2b40      	cmp	r3, #64	; 0x40
 8009588:	d10e      	bne.n	80095a8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	68db      	ldr	r3, [r3, #12]
 8009590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009594:	2b40      	cmp	r3, #64	; 0x40
 8009596:	d107      	bne.n	80095a8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80095a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f000 f9cc 	bl	8009940 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	691b      	ldr	r3, [r3, #16]
 80095ae:	f003 0320 	and.w	r3, r3, #32
 80095b2:	2b20      	cmp	r3, #32
 80095b4:	d10e      	bne.n	80095d4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	68db      	ldr	r3, [r3, #12]
 80095bc:	f003 0320 	and.w	r3, r3, #32
 80095c0:	2b20      	cmp	r3, #32
 80095c2:	d107      	bne.n	80095d4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	f06f 0220 	mvn.w	r2, #32
 80095cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f000 fd4c 	bl	800a06c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80095d4:	bf00      	nop
 80095d6:	3708      	adds	r7, #8
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}

080095dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b084      	sub	sp, #16
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	60f8      	str	r0, [r7, #12]
 80095e4:	60b9      	str	r1, [r7, #8]
 80095e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095ee:	2b01      	cmp	r3, #1
 80095f0:	d101      	bne.n	80095f6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80095f2:	2302      	movs	r3, #2
 80095f4:	e0b4      	b.n	8009760 <HAL_TIM_PWM_ConfigChannel+0x184>
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	2201      	movs	r2, #1
 80095fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	2202      	movs	r2, #2
 8009602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2b0c      	cmp	r3, #12
 800960a:	f200 809f 	bhi.w	800974c <HAL_TIM_PWM_ConfigChannel+0x170>
 800960e:	a201      	add	r2, pc, #4	; (adr r2, 8009614 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8009610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009614:	08009649 	.word	0x08009649
 8009618:	0800974d 	.word	0x0800974d
 800961c:	0800974d 	.word	0x0800974d
 8009620:	0800974d 	.word	0x0800974d
 8009624:	08009689 	.word	0x08009689
 8009628:	0800974d 	.word	0x0800974d
 800962c:	0800974d 	.word	0x0800974d
 8009630:	0800974d 	.word	0x0800974d
 8009634:	080096cb 	.word	0x080096cb
 8009638:	0800974d 	.word	0x0800974d
 800963c:	0800974d 	.word	0x0800974d
 8009640:	0800974d 	.word	0x0800974d
 8009644:	0800970b 	.word	0x0800970b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	68b9      	ldr	r1, [r7, #8]
 800964e:	4618      	mov	r0, r3
 8009650:	f000 fa20 	bl	8009a94 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	699a      	ldr	r2, [r3, #24]
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	f042 0208 	orr.w	r2, r2, #8
 8009662:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	699a      	ldr	r2, [r3, #24]
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f022 0204 	bic.w	r2, r2, #4
 8009672:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	6999      	ldr	r1, [r3, #24]
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	691a      	ldr	r2, [r3, #16]
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	430a      	orrs	r2, r1
 8009684:	619a      	str	r2, [r3, #24]
      break;
 8009686:	e062      	b.n	800974e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	68b9      	ldr	r1, [r7, #8]
 800968e:	4618      	mov	r0, r3
 8009690:	f000 fa70 	bl	8009b74 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	699a      	ldr	r2, [r3, #24]
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80096a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	699a      	ldr	r2, [r3, #24]
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80096b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	6999      	ldr	r1, [r3, #24]
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	691b      	ldr	r3, [r3, #16]
 80096be:	021a      	lsls	r2, r3, #8
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	430a      	orrs	r2, r1
 80096c6:	619a      	str	r2, [r3, #24]
      break;
 80096c8:	e041      	b.n	800974e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	68b9      	ldr	r1, [r7, #8]
 80096d0:	4618      	mov	r0, r3
 80096d2:	f000 fac5 	bl	8009c60 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	69da      	ldr	r2, [r3, #28]
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	f042 0208 	orr.w	r2, r2, #8
 80096e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	69da      	ldr	r2, [r3, #28]
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f022 0204 	bic.w	r2, r2, #4
 80096f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	69d9      	ldr	r1, [r3, #28]
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	691a      	ldr	r2, [r3, #16]
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	430a      	orrs	r2, r1
 8009706:	61da      	str	r2, [r3, #28]
      break;
 8009708:	e021      	b.n	800974e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	68b9      	ldr	r1, [r7, #8]
 8009710:	4618      	mov	r0, r3
 8009712:	f000 fb19 	bl	8009d48 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	69da      	ldr	r2, [r3, #28]
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009724:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	69da      	ldr	r2, [r3, #28]
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009734:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	69d9      	ldr	r1, [r3, #28]
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	691b      	ldr	r3, [r3, #16]
 8009740:	021a      	lsls	r2, r3, #8
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	430a      	orrs	r2, r1
 8009748:	61da      	str	r2, [r3, #28]
      break;
 800974a:	e000      	b.n	800974e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800974c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	2201      	movs	r2, #1
 8009752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	2200      	movs	r2, #0
 800975a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800975e:	2300      	movs	r3, #0
}
 8009760:	4618      	mov	r0, r3
 8009762:	3710      	adds	r7, #16
 8009764:	46bd      	mov	sp, r7
 8009766:	bd80      	pop	{r7, pc}

08009768 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b084      	sub	sp, #16
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
 8009770:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009778:	2b01      	cmp	r3, #1
 800977a:	d101      	bne.n	8009780 <HAL_TIM_ConfigClockSource+0x18>
 800977c:	2302      	movs	r3, #2
 800977e:	e0b3      	b.n	80098e8 <HAL_TIM_ConfigClockSource+0x180>
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2201      	movs	r2, #1
 8009784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2202      	movs	r2, #2
 800978c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	689b      	ldr	r3, [r3, #8]
 8009796:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800979e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80097a6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	68fa      	ldr	r2, [r7, #12]
 80097ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80097b8:	d03e      	beq.n	8009838 <HAL_TIM_ConfigClockSource+0xd0>
 80097ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80097be:	f200 8087 	bhi.w	80098d0 <HAL_TIM_ConfigClockSource+0x168>
 80097c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097c6:	f000 8085 	beq.w	80098d4 <HAL_TIM_ConfigClockSource+0x16c>
 80097ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097ce:	d87f      	bhi.n	80098d0 <HAL_TIM_ConfigClockSource+0x168>
 80097d0:	2b70      	cmp	r3, #112	; 0x70
 80097d2:	d01a      	beq.n	800980a <HAL_TIM_ConfigClockSource+0xa2>
 80097d4:	2b70      	cmp	r3, #112	; 0x70
 80097d6:	d87b      	bhi.n	80098d0 <HAL_TIM_ConfigClockSource+0x168>
 80097d8:	2b60      	cmp	r3, #96	; 0x60
 80097da:	d050      	beq.n	800987e <HAL_TIM_ConfigClockSource+0x116>
 80097dc:	2b60      	cmp	r3, #96	; 0x60
 80097de:	d877      	bhi.n	80098d0 <HAL_TIM_ConfigClockSource+0x168>
 80097e0:	2b50      	cmp	r3, #80	; 0x50
 80097e2:	d03c      	beq.n	800985e <HAL_TIM_ConfigClockSource+0xf6>
 80097e4:	2b50      	cmp	r3, #80	; 0x50
 80097e6:	d873      	bhi.n	80098d0 <HAL_TIM_ConfigClockSource+0x168>
 80097e8:	2b40      	cmp	r3, #64	; 0x40
 80097ea:	d058      	beq.n	800989e <HAL_TIM_ConfigClockSource+0x136>
 80097ec:	2b40      	cmp	r3, #64	; 0x40
 80097ee:	d86f      	bhi.n	80098d0 <HAL_TIM_ConfigClockSource+0x168>
 80097f0:	2b30      	cmp	r3, #48	; 0x30
 80097f2:	d064      	beq.n	80098be <HAL_TIM_ConfigClockSource+0x156>
 80097f4:	2b30      	cmp	r3, #48	; 0x30
 80097f6:	d86b      	bhi.n	80098d0 <HAL_TIM_ConfigClockSource+0x168>
 80097f8:	2b20      	cmp	r3, #32
 80097fa:	d060      	beq.n	80098be <HAL_TIM_ConfigClockSource+0x156>
 80097fc:	2b20      	cmp	r3, #32
 80097fe:	d867      	bhi.n	80098d0 <HAL_TIM_ConfigClockSource+0x168>
 8009800:	2b00      	cmp	r3, #0
 8009802:	d05c      	beq.n	80098be <HAL_TIM_ConfigClockSource+0x156>
 8009804:	2b10      	cmp	r3, #16
 8009806:	d05a      	beq.n	80098be <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8009808:	e062      	b.n	80098d0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6818      	ldr	r0, [r3, #0]
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	6899      	ldr	r1, [r3, #8]
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	685a      	ldr	r2, [r3, #4]
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	68db      	ldr	r3, [r3, #12]
 800981a:	f000 fb65 	bl	8009ee8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	689b      	ldr	r3, [r3, #8]
 8009824:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800982c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	68fa      	ldr	r2, [r7, #12]
 8009834:	609a      	str	r2, [r3, #8]
      break;
 8009836:	e04e      	b.n	80098d6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	6818      	ldr	r0, [r3, #0]
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	6899      	ldr	r1, [r3, #8]
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	685a      	ldr	r2, [r3, #4]
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	68db      	ldr	r3, [r3, #12]
 8009848:	f000 fb4e 	bl	8009ee8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	689a      	ldr	r2, [r3, #8]
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800985a:	609a      	str	r2, [r3, #8]
      break;
 800985c:	e03b      	b.n	80098d6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6818      	ldr	r0, [r3, #0]
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	6859      	ldr	r1, [r3, #4]
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	68db      	ldr	r3, [r3, #12]
 800986a:	461a      	mov	r2, r3
 800986c:	f000 fac2 	bl	8009df4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	2150      	movs	r1, #80	; 0x50
 8009876:	4618      	mov	r0, r3
 8009878:	f000 fb1b 	bl	8009eb2 <TIM_ITRx_SetConfig>
      break;
 800987c:	e02b      	b.n	80098d6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6818      	ldr	r0, [r3, #0]
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	6859      	ldr	r1, [r3, #4]
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	68db      	ldr	r3, [r3, #12]
 800988a:	461a      	mov	r2, r3
 800988c:	f000 fae1 	bl	8009e52 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	2160      	movs	r1, #96	; 0x60
 8009896:	4618      	mov	r0, r3
 8009898:	f000 fb0b 	bl	8009eb2 <TIM_ITRx_SetConfig>
      break;
 800989c:	e01b      	b.n	80098d6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6818      	ldr	r0, [r3, #0]
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	6859      	ldr	r1, [r3, #4]
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	68db      	ldr	r3, [r3, #12]
 80098aa:	461a      	mov	r2, r3
 80098ac:	f000 faa2 	bl	8009df4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	2140      	movs	r1, #64	; 0x40
 80098b6:	4618      	mov	r0, r3
 80098b8:	f000 fafb 	bl	8009eb2 <TIM_ITRx_SetConfig>
      break;
 80098bc:	e00b      	b.n	80098d6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681a      	ldr	r2, [r3, #0]
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	4619      	mov	r1, r3
 80098c8:	4610      	mov	r0, r2
 80098ca:	f000 faf2 	bl	8009eb2 <TIM_ITRx_SetConfig>
      break;
 80098ce:	e002      	b.n	80098d6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80098d0:	bf00      	nop
 80098d2:	e000      	b.n	80098d6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80098d4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2201      	movs	r2, #1
 80098da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2200      	movs	r2, #0
 80098e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80098e6:	2300      	movs	r3, #0
}
 80098e8:	4618      	mov	r0, r3
 80098ea:	3710      	adds	r7, #16
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}

080098f0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80098f0:	b480      	push	{r7}
 80098f2:	b083      	sub	sp, #12
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80098f8:	bf00      	nop
 80098fa:	370c      	adds	r7, #12
 80098fc:	46bd      	mov	sp, r7
 80098fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009902:	4770      	bx	lr

08009904 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009904:	b480      	push	{r7}
 8009906:	b083      	sub	sp, #12
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800990c:	bf00      	nop
 800990e:	370c      	adds	r7, #12
 8009910:	46bd      	mov	sp, r7
 8009912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009916:	4770      	bx	lr

08009918 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009918:	b480      	push	{r7}
 800991a:	b083      	sub	sp, #12
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009920:	bf00      	nop
 8009922:	370c      	adds	r7, #12
 8009924:	46bd      	mov	sp, r7
 8009926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992a:	4770      	bx	lr

0800992c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800992c:	b480      	push	{r7}
 800992e:	b083      	sub	sp, #12
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009934:	bf00      	nop
 8009936:	370c      	adds	r7, #12
 8009938:	46bd      	mov	sp, r7
 800993a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993e:	4770      	bx	lr

08009940 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009940:	b480      	push	{r7}
 8009942:	b083      	sub	sp, #12
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009948:	bf00      	nop
 800994a:	370c      	adds	r7, #12
 800994c:	46bd      	mov	sp, r7
 800994e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009952:	4770      	bx	lr

08009954 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009954:	b480      	push	{r7}
 8009956:	b085      	sub	sp, #20
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
 800995c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	4a40      	ldr	r2, [pc, #256]	; (8009a68 <TIM_Base_SetConfig+0x114>)
 8009968:	4293      	cmp	r3, r2
 800996a:	d013      	beq.n	8009994 <TIM_Base_SetConfig+0x40>
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009972:	d00f      	beq.n	8009994 <TIM_Base_SetConfig+0x40>
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	4a3d      	ldr	r2, [pc, #244]	; (8009a6c <TIM_Base_SetConfig+0x118>)
 8009978:	4293      	cmp	r3, r2
 800997a:	d00b      	beq.n	8009994 <TIM_Base_SetConfig+0x40>
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	4a3c      	ldr	r2, [pc, #240]	; (8009a70 <TIM_Base_SetConfig+0x11c>)
 8009980:	4293      	cmp	r3, r2
 8009982:	d007      	beq.n	8009994 <TIM_Base_SetConfig+0x40>
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	4a3b      	ldr	r2, [pc, #236]	; (8009a74 <TIM_Base_SetConfig+0x120>)
 8009988:	4293      	cmp	r3, r2
 800998a:	d003      	beq.n	8009994 <TIM_Base_SetConfig+0x40>
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	4a3a      	ldr	r2, [pc, #232]	; (8009a78 <TIM_Base_SetConfig+0x124>)
 8009990:	4293      	cmp	r3, r2
 8009992:	d108      	bne.n	80099a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800999a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800999c:	683b      	ldr	r3, [r7, #0]
 800999e:	685b      	ldr	r3, [r3, #4]
 80099a0:	68fa      	ldr	r2, [r7, #12]
 80099a2:	4313      	orrs	r3, r2
 80099a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	4a2f      	ldr	r2, [pc, #188]	; (8009a68 <TIM_Base_SetConfig+0x114>)
 80099aa:	4293      	cmp	r3, r2
 80099ac:	d02b      	beq.n	8009a06 <TIM_Base_SetConfig+0xb2>
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099b4:	d027      	beq.n	8009a06 <TIM_Base_SetConfig+0xb2>
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	4a2c      	ldr	r2, [pc, #176]	; (8009a6c <TIM_Base_SetConfig+0x118>)
 80099ba:	4293      	cmp	r3, r2
 80099bc:	d023      	beq.n	8009a06 <TIM_Base_SetConfig+0xb2>
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	4a2b      	ldr	r2, [pc, #172]	; (8009a70 <TIM_Base_SetConfig+0x11c>)
 80099c2:	4293      	cmp	r3, r2
 80099c4:	d01f      	beq.n	8009a06 <TIM_Base_SetConfig+0xb2>
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	4a2a      	ldr	r2, [pc, #168]	; (8009a74 <TIM_Base_SetConfig+0x120>)
 80099ca:	4293      	cmp	r3, r2
 80099cc:	d01b      	beq.n	8009a06 <TIM_Base_SetConfig+0xb2>
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	4a29      	ldr	r2, [pc, #164]	; (8009a78 <TIM_Base_SetConfig+0x124>)
 80099d2:	4293      	cmp	r3, r2
 80099d4:	d017      	beq.n	8009a06 <TIM_Base_SetConfig+0xb2>
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	4a28      	ldr	r2, [pc, #160]	; (8009a7c <TIM_Base_SetConfig+0x128>)
 80099da:	4293      	cmp	r3, r2
 80099dc:	d013      	beq.n	8009a06 <TIM_Base_SetConfig+0xb2>
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	4a27      	ldr	r2, [pc, #156]	; (8009a80 <TIM_Base_SetConfig+0x12c>)
 80099e2:	4293      	cmp	r3, r2
 80099e4:	d00f      	beq.n	8009a06 <TIM_Base_SetConfig+0xb2>
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	4a26      	ldr	r2, [pc, #152]	; (8009a84 <TIM_Base_SetConfig+0x130>)
 80099ea:	4293      	cmp	r3, r2
 80099ec:	d00b      	beq.n	8009a06 <TIM_Base_SetConfig+0xb2>
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	4a25      	ldr	r2, [pc, #148]	; (8009a88 <TIM_Base_SetConfig+0x134>)
 80099f2:	4293      	cmp	r3, r2
 80099f4:	d007      	beq.n	8009a06 <TIM_Base_SetConfig+0xb2>
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	4a24      	ldr	r2, [pc, #144]	; (8009a8c <TIM_Base_SetConfig+0x138>)
 80099fa:	4293      	cmp	r3, r2
 80099fc:	d003      	beq.n	8009a06 <TIM_Base_SetConfig+0xb2>
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	4a23      	ldr	r2, [pc, #140]	; (8009a90 <TIM_Base_SetConfig+0x13c>)
 8009a02:	4293      	cmp	r3, r2
 8009a04:	d108      	bne.n	8009a18 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	68db      	ldr	r3, [r3, #12]
 8009a12:	68fa      	ldr	r2, [r7, #12]
 8009a14:	4313      	orrs	r3, r2
 8009a16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	695b      	ldr	r3, [r3, #20]
 8009a22:	4313      	orrs	r3, r2
 8009a24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	68fa      	ldr	r2, [r7, #12]
 8009a2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	689a      	ldr	r2, [r3, #8]
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	681a      	ldr	r2, [r3, #0]
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	4a0a      	ldr	r2, [pc, #40]	; (8009a68 <TIM_Base_SetConfig+0x114>)
 8009a40:	4293      	cmp	r3, r2
 8009a42:	d003      	beq.n	8009a4c <TIM_Base_SetConfig+0xf8>
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	4a0c      	ldr	r2, [pc, #48]	; (8009a78 <TIM_Base_SetConfig+0x124>)
 8009a48:	4293      	cmp	r3, r2
 8009a4a:	d103      	bne.n	8009a54 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	691a      	ldr	r2, [r3, #16]
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2201      	movs	r2, #1
 8009a58:	615a      	str	r2, [r3, #20]
}
 8009a5a:	bf00      	nop
 8009a5c:	3714      	adds	r7, #20
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a64:	4770      	bx	lr
 8009a66:	bf00      	nop
 8009a68:	40010000 	.word	0x40010000
 8009a6c:	40000400 	.word	0x40000400
 8009a70:	40000800 	.word	0x40000800
 8009a74:	40000c00 	.word	0x40000c00
 8009a78:	40010400 	.word	0x40010400
 8009a7c:	40014000 	.word	0x40014000
 8009a80:	40014400 	.word	0x40014400
 8009a84:	40014800 	.word	0x40014800
 8009a88:	40001800 	.word	0x40001800
 8009a8c:	40001c00 	.word	0x40001c00
 8009a90:	40002000 	.word	0x40002000

08009a94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009a94:	b480      	push	{r7}
 8009a96:	b087      	sub	sp, #28
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
 8009a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6a1b      	ldr	r3, [r3, #32]
 8009aa2:	f023 0201 	bic.w	r2, r3, #1
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	6a1b      	ldr	r3, [r3, #32]
 8009aae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	685b      	ldr	r3, [r3, #4]
 8009ab4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	699b      	ldr	r3, [r3, #24]
 8009aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ac2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	f023 0303 	bic.w	r3, r3, #3
 8009aca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	68fa      	ldr	r2, [r7, #12]
 8009ad2:	4313      	orrs	r3, r2
 8009ad4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009ad6:	697b      	ldr	r3, [r7, #20]
 8009ad8:	f023 0302 	bic.w	r3, r3, #2
 8009adc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	689b      	ldr	r3, [r3, #8]
 8009ae2:	697a      	ldr	r2, [r7, #20]
 8009ae4:	4313      	orrs	r3, r2
 8009ae6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	4a20      	ldr	r2, [pc, #128]	; (8009b6c <TIM_OC1_SetConfig+0xd8>)
 8009aec:	4293      	cmp	r3, r2
 8009aee:	d003      	beq.n	8009af8 <TIM_OC1_SetConfig+0x64>
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	4a1f      	ldr	r2, [pc, #124]	; (8009b70 <TIM_OC1_SetConfig+0xdc>)
 8009af4:	4293      	cmp	r3, r2
 8009af6:	d10c      	bne.n	8009b12 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009af8:	697b      	ldr	r3, [r7, #20]
 8009afa:	f023 0308 	bic.w	r3, r3, #8
 8009afe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	68db      	ldr	r3, [r3, #12]
 8009b04:	697a      	ldr	r2, [r7, #20]
 8009b06:	4313      	orrs	r3, r2
 8009b08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009b0a:	697b      	ldr	r3, [r7, #20]
 8009b0c:	f023 0304 	bic.w	r3, r3, #4
 8009b10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	4a15      	ldr	r2, [pc, #84]	; (8009b6c <TIM_OC1_SetConfig+0xd8>)
 8009b16:	4293      	cmp	r3, r2
 8009b18:	d003      	beq.n	8009b22 <TIM_OC1_SetConfig+0x8e>
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	4a14      	ldr	r2, [pc, #80]	; (8009b70 <TIM_OC1_SetConfig+0xdc>)
 8009b1e:	4293      	cmp	r3, r2
 8009b20:	d111      	bne.n	8009b46 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009b22:	693b      	ldr	r3, [r7, #16]
 8009b24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009b28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009b2a:	693b      	ldr	r3, [r7, #16]
 8009b2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009b30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	695b      	ldr	r3, [r3, #20]
 8009b36:	693a      	ldr	r2, [r7, #16]
 8009b38:	4313      	orrs	r3, r2
 8009b3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	699b      	ldr	r3, [r3, #24]
 8009b40:	693a      	ldr	r2, [r7, #16]
 8009b42:	4313      	orrs	r3, r2
 8009b44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	693a      	ldr	r2, [r7, #16]
 8009b4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	68fa      	ldr	r2, [r7, #12]
 8009b50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	685a      	ldr	r2, [r3, #4]
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	697a      	ldr	r2, [r7, #20]
 8009b5e:	621a      	str	r2, [r3, #32]
}
 8009b60:	bf00      	nop
 8009b62:	371c      	adds	r7, #28
 8009b64:	46bd      	mov	sp, r7
 8009b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6a:	4770      	bx	lr
 8009b6c:	40010000 	.word	0x40010000
 8009b70:	40010400 	.word	0x40010400

08009b74 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009b74:	b480      	push	{r7}
 8009b76:	b087      	sub	sp, #28
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
 8009b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6a1b      	ldr	r3, [r3, #32]
 8009b82:	f023 0210 	bic.w	r2, r3, #16
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6a1b      	ldr	r3, [r3, #32]
 8009b8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	685b      	ldr	r3, [r3, #4]
 8009b94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	699b      	ldr	r3, [r3, #24]
 8009b9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ba2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009baa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	021b      	lsls	r3, r3, #8
 8009bb2:	68fa      	ldr	r2, [r7, #12]
 8009bb4:	4313      	orrs	r3, r2
 8009bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009bb8:	697b      	ldr	r3, [r7, #20]
 8009bba:	f023 0320 	bic.w	r3, r3, #32
 8009bbe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	689b      	ldr	r3, [r3, #8]
 8009bc4:	011b      	lsls	r3, r3, #4
 8009bc6:	697a      	ldr	r2, [r7, #20]
 8009bc8:	4313      	orrs	r3, r2
 8009bca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	4a22      	ldr	r2, [pc, #136]	; (8009c58 <TIM_OC2_SetConfig+0xe4>)
 8009bd0:	4293      	cmp	r3, r2
 8009bd2:	d003      	beq.n	8009bdc <TIM_OC2_SetConfig+0x68>
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	4a21      	ldr	r2, [pc, #132]	; (8009c5c <TIM_OC2_SetConfig+0xe8>)
 8009bd8:	4293      	cmp	r3, r2
 8009bda:	d10d      	bne.n	8009bf8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009bdc:	697b      	ldr	r3, [r7, #20]
 8009bde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009be2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	68db      	ldr	r3, [r3, #12]
 8009be8:	011b      	lsls	r3, r3, #4
 8009bea:	697a      	ldr	r2, [r7, #20]
 8009bec:	4313      	orrs	r3, r2
 8009bee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009bf0:	697b      	ldr	r3, [r7, #20]
 8009bf2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009bf6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	4a17      	ldr	r2, [pc, #92]	; (8009c58 <TIM_OC2_SetConfig+0xe4>)
 8009bfc:	4293      	cmp	r3, r2
 8009bfe:	d003      	beq.n	8009c08 <TIM_OC2_SetConfig+0x94>
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	4a16      	ldr	r2, [pc, #88]	; (8009c5c <TIM_OC2_SetConfig+0xe8>)
 8009c04:	4293      	cmp	r3, r2
 8009c06:	d113      	bne.n	8009c30 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009c08:	693b      	ldr	r3, [r7, #16]
 8009c0a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009c0e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009c10:	693b      	ldr	r3, [r7, #16]
 8009c12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009c16:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	695b      	ldr	r3, [r3, #20]
 8009c1c:	009b      	lsls	r3, r3, #2
 8009c1e:	693a      	ldr	r2, [r7, #16]
 8009c20:	4313      	orrs	r3, r2
 8009c22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	699b      	ldr	r3, [r3, #24]
 8009c28:	009b      	lsls	r3, r3, #2
 8009c2a:	693a      	ldr	r2, [r7, #16]
 8009c2c:	4313      	orrs	r3, r2
 8009c2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	693a      	ldr	r2, [r7, #16]
 8009c34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	68fa      	ldr	r2, [r7, #12]
 8009c3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	685a      	ldr	r2, [r3, #4]
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	697a      	ldr	r2, [r7, #20]
 8009c48:	621a      	str	r2, [r3, #32]
}
 8009c4a:	bf00      	nop
 8009c4c:	371c      	adds	r7, #28
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c54:	4770      	bx	lr
 8009c56:	bf00      	nop
 8009c58:	40010000 	.word	0x40010000
 8009c5c:	40010400 	.word	0x40010400

08009c60 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009c60:	b480      	push	{r7}
 8009c62:	b087      	sub	sp, #28
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
 8009c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	6a1b      	ldr	r3, [r3, #32]
 8009c6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	6a1b      	ldr	r3, [r3, #32]
 8009c7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	685b      	ldr	r3, [r3, #4]
 8009c80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	69db      	ldr	r3, [r3, #28]
 8009c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	f023 0303 	bic.w	r3, r3, #3
 8009c96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	68fa      	ldr	r2, [r7, #12]
 8009c9e:	4313      	orrs	r3, r2
 8009ca0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009ca2:	697b      	ldr	r3, [r7, #20]
 8009ca4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009ca8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	689b      	ldr	r3, [r3, #8]
 8009cae:	021b      	lsls	r3, r3, #8
 8009cb0:	697a      	ldr	r2, [r7, #20]
 8009cb2:	4313      	orrs	r3, r2
 8009cb4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	4a21      	ldr	r2, [pc, #132]	; (8009d40 <TIM_OC3_SetConfig+0xe0>)
 8009cba:	4293      	cmp	r3, r2
 8009cbc:	d003      	beq.n	8009cc6 <TIM_OC3_SetConfig+0x66>
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	4a20      	ldr	r2, [pc, #128]	; (8009d44 <TIM_OC3_SetConfig+0xe4>)
 8009cc2:	4293      	cmp	r3, r2
 8009cc4:	d10d      	bne.n	8009ce2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009cc6:	697b      	ldr	r3, [r7, #20]
 8009cc8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009ccc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	68db      	ldr	r3, [r3, #12]
 8009cd2:	021b      	lsls	r3, r3, #8
 8009cd4:	697a      	ldr	r2, [r7, #20]
 8009cd6:	4313      	orrs	r3, r2
 8009cd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009cda:	697b      	ldr	r3, [r7, #20]
 8009cdc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009ce0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	4a16      	ldr	r2, [pc, #88]	; (8009d40 <TIM_OC3_SetConfig+0xe0>)
 8009ce6:	4293      	cmp	r3, r2
 8009ce8:	d003      	beq.n	8009cf2 <TIM_OC3_SetConfig+0x92>
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	4a15      	ldr	r2, [pc, #84]	; (8009d44 <TIM_OC3_SetConfig+0xe4>)
 8009cee:	4293      	cmp	r3, r2
 8009cf0:	d113      	bne.n	8009d1a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009cf2:	693b      	ldr	r3, [r7, #16]
 8009cf4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009cf8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009cfa:	693b      	ldr	r3, [r7, #16]
 8009cfc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009d00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	695b      	ldr	r3, [r3, #20]
 8009d06:	011b      	lsls	r3, r3, #4
 8009d08:	693a      	ldr	r2, [r7, #16]
 8009d0a:	4313      	orrs	r3, r2
 8009d0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	699b      	ldr	r3, [r3, #24]
 8009d12:	011b      	lsls	r3, r3, #4
 8009d14:	693a      	ldr	r2, [r7, #16]
 8009d16:	4313      	orrs	r3, r2
 8009d18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	693a      	ldr	r2, [r7, #16]
 8009d1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	68fa      	ldr	r2, [r7, #12]
 8009d24:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	685a      	ldr	r2, [r3, #4]
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	697a      	ldr	r2, [r7, #20]
 8009d32:	621a      	str	r2, [r3, #32]
}
 8009d34:	bf00      	nop
 8009d36:	371c      	adds	r7, #28
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3e:	4770      	bx	lr
 8009d40:	40010000 	.word	0x40010000
 8009d44:	40010400 	.word	0x40010400

08009d48 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009d48:	b480      	push	{r7}
 8009d4a:	b087      	sub	sp, #28
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
 8009d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	6a1b      	ldr	r3, [r3, #32]
 8009d56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	6a1b      	ldr	r3, [r3, #32]
 8009d62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	685b      	ldr	r3, [r3, #4]
 8009d68:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	69db      	ldr	r3, [r3, #28]
 8009d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	021b      	lsls	r3, r3, #8
 8009d86:	68fa      	ldr	r2, [r7, #12]
 8009d88:	4313      	orrs	r3, r2
 8009d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009d8c:	693b      	ldr	r3, [r7, #16]
 8009d8e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009d92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	689b      	ldr	r3, [r3, #8]
 8009d98:	031b      	lsls	r3, r3, #12
 8009d9a:	693a      	ldr	r2, [r7, #16]
 8009d9c:	4313      	orrs	r3, r2
 8009d9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	4a12      	ldr	r2, [pc, #72]	; (8009dec <TIM_OC4_SetConfig+0xa4>)
 8009da4:	4293      	cmp	r3, r2
 8009da6:	d003      	beq.n	8009db0 <TIM_OC4_SetConfig+0x68>
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	4a11      	ldr	r2, [pc, #68]	; (8009df0 <TIM_OC4_SetConfig+0xa8>)
 8009dac:	4293      	cmp	r3, r2
 8009dae:	d109      	bne.n	8009dc4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009db0:	697b      	ldr	r3, [r7, #20]
 8009db2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009db6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	695b      	ldr	r3, [r3, #20]
 8009dbc:	019b      	lsls	r3, r3, #6
 8009dbe:	697a      	ldr	r2, [r7, #20]
 8009dc0:	4313      	orrs	r3, r2
 8009dc2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	697a      	ldr	r2, [r7, #20]
 8009dc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	68fa      	ldr	r2, [r7, #12]
 8009dce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	685a      	ldr	r2, [r3, #4]
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	693a      	ldr	r2, [r7, #16]
 8009ddc:	621a      	str	r2, [r3, #32]
}
 8009dde:	bf00      	nop
 8009de0:	371c      	adds	r7, #28
 8009de2:	46bd      	mov	sp, r7
 8009de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de8:	4770      	bx	lr
 8009dea:	bf00      	nop
 8009dec:	40010000 	.word	0x40010000
 8009df0:	40010400 	.word	0x40010400

08009df4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009df4:	b480      	push	{r7}
 8009df6:	b087      	sub	sp, #28
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	60f8      	str	r0, [r7, #12]
 8009dfc:	60b9      	str	r1, [r7, #8]
 8009dfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	6a1b      	ldr	r3, [r3, #32]
 8009e04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	6a1b      	ldr	r3, [r3, #32]
 8009e0a:	f023 0201 	bic.w	r2, r3, #1
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	699b      	ldr	r3, [r3, #24]
 8009e16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009e18:	693b      	ldr	r3, [r7, #16]
 8009e1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009e1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	011b      	lsls	r3, r3, #4
 8009e24:	693a      	ldr	r2, [r7, #16]
 8009e26:	4313      	orrs	r3, r2
 8009e28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009e2a:	697b      	ldr	r3, [r7, #20]
 8009e2c:	f023 030a 	bic.w	r3, r3, #10
 8009e30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009e32:	697a      	ldr	r2, [r7, #20]
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	4313      	orrs	r3, r2
 8009e38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	693a      	ldr	r2, [r7, #16]
 8009e3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	697a      	ldr	r2, [r7, #20]
 8009e44:	621a      	str	r2, [r3, #32]
}
 8009e46:	bf00      	nop
 8009e48:	371c      	adds	r7, #28
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e50:	4770      	bx	lr

08009e52 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009e52:	b480      	push	{r7}
 8009e54:	b087      	sub	sp, #28
 8009e56:	af00      	add	r7, sp, #0
 8009e58:	60f8      	str	r0, [r7, #12]
 8009e5a:	60b9      	str	r1, [r7, #8]
 8009e5c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	6a1b      	ldr	r3, [r3, #32]
 8009e62:	f023 0210 	bic.w	r2, r3, #16
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	699b      	ldr	r3, [r3, #24]
 8009e6e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	6a1b      	ldr	r3, [r3, #32]
 8009e74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009e76:	697b      	ldr	r3, [r7, #20]
 8009e78:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009e7c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	031b      	lsls	r3, r3, #12
 8009e82:	697a      	ldr	r2, [r7, #20]
 8009e84:	4313      	orrs	r3, r2
 8009e86:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009e88:	693b      	ldr	r3, [r7, #16]
 8009e8a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009e8e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009e90:	68bb      	ldr	r3, [r7, #8]
 8009e92:	011b      	lsls	r3, r3, #4
 8009e94:	693a      	ldr	r2, [r7, #16]
 8009e96:	4313      	orrs	r3, r2
 8009e98:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	697a      	ldr	r2, [r7, #20]
 8009e9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	693a      	ldr	r2, [r7, #16]
 8009ea4:	621a      	str	r2, [r3, #32]
}
 8009ea6:	bf00      	nop
 8009ea8:	371c      	adds	r7, #28
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb0:	4770      	bx	lr

08009eb2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009eb2:	b480      	push	{r7}
 8009eb4:	b085      	sub	sp, #20
 8009eb6:	af00      	add	r7, sp, #0
 8009eb8:	6078      	str	r0, [r7, #4]
 8009eba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	689b      	ldr	r3, [r3, #8]
 8009ec0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ec8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009eca:	683a      	ldr	r2, [r7, #0]
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	4313      	orrs	r3, r2
 8009ed0:	f043 0307 	orr.w	r3, r3, #7
 8009ed4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	68fa      	ldr	r2, [r7, #12]
 8009eda:	609a      	str	r2, [r3, #8]
}
 8009edc:	bf00      	nop
 8009ede:	3714      	adds	r7, #20
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee6:	4770      	bx	lr

08009ee8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009ee8:	b480      	push	{r7}
 8009eea:	b087      	sub	sp, #28
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	60f8      	str	r0, [r7, #12]
 8009ef0:	60b9      	str	r1, [r7, #8]
 8009ef2:	607a      	str	r2, [r7, #4]
 8009ef4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	689b      	ldr	r3, [r3, #8]
 8009efa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009efc:	697b      	ldr	r3, [r7, #20]
 8009efe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009f02:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	021a      	lsls	r2, r3, #8
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	431a      	orrs	r2, r3
 8009f0c:	68bb      	ldr	r3, [r7, #8]
 8009f0e:	4313      	orrs	r3, r2
 8009f10:	697a      	ldr	r2, [r7, #20]
 8009f12:	4313      	orrs	r3, r2
 8009f14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	697a      	ldr	r2, [r7, #20]
 8009f1a:	609a      	str	r2, [r3, #8]
}
 8009f1c:	bf00      	nop
 8009f1e:	371c      	adds	r7, #28
 8009f20:	46bd      	mov	sp, r7
 8009f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f26:	4770      	bx	lr

08009f28 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009f28:	b480      	push	{r7}
 8009f2a:	b087      	sub	sp, #28
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	60f8      	str	r0, [r7, #12]
 8009f30:	60b9      	str	r1, [r7, #8]
 8009f32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009f34:	68bb      	ldr	r3, [r7, #8]
 8009f36:	f003 031f 	and.w	r3, r3, #31
 8009f3a:	2201      	movs	r2, #1
 8009f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8009f40:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	6a1a      	ldr	r2, [r3, #32]
 8009f46:	697b      	ldr	r3, [r7, #20]
 8009f48:	43db      	mvns	r3, r3
 8009f4a:	401a      	ands	r2, r3
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	6a1a      	ldr	r2, [r3, #32]
 8009f54:	68bb      	ldr	r3, [r7, #8]
 8009f56:	f003 031f 	and.w	r3, r3, #31
 8009f5a:	6879      	ldr	r1, [r7, #4]
 8009f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8009f60:	431a      	orrs	r2, r3
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	621a      	str	r2, [r3, #32]
}
 8009f66:	bf00      	nop
 8009f68:	371c      	adds	r7, #28
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f70:	4770      	bx	lr
	...

08009f74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009f74:	b480      	push	{r7}
 8009f76:	b085      	sub	sp, #20
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
 8009f7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f84:	2b01      	cmp	r3, #1
 8009f86:	d101      	bne.n	8009f8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009f88:	2302      	movs	r3, #2
 8009f8a:	e05a      	b.n	800a042 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2201      	movs	r2, #1
 8009f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2202      	movs	r2, #2
 8009f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	685b      	ldr	r3, [r3, #4]
 8009fa2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	689b      	ldr	r3, [r3, #8]
 8009faa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fb2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	68fa      	ldr	r2, [r7, #12]
 8009fba:	4313      	orrs	r3, r2
 8009fbc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	68fa      	ldr	r2, [r7, #12]
 8009fc4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	4a21      	ldr	r2, [pc, #132]	; (800a050 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009fcc:	4293      	cmp	r3, r2
 8009fce:	d022      	beq.n	800a016 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fd8:	d01d      	beq.n	800a016 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	4a1d      	ldr	r2, [pc, #116]	; (800a054 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009fe0:	4293      	cmp	r3, r2
 8009fe2:	d018      	beq.n	800a016 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	4a1b      	ldr	r2, [pc, #108]	; (800a058 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009fea:	4293      	cmp	r3, r2
 8009fec:	d013      	beq.n	800a016 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	4a1a      	ldr	r2, [pc, #104]	; (800a05c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009ff4:	4293      	cmp	r3, r2
 8009ff6:	d00e      	beq.n	800a016 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	4a18      	ldr	r2, [pc, #96]	; (800a060 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009ffe:	4293      	cmp	r3, r2
 800a000:	d009      	beq.n	800a016 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	4a17      	ldr	r2, [pc, #92]	; (800a064 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a008:	4293      	cmp	r3, r2
 800a00a:	d004      	beq.n	800a016 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	4a15      	ldr	r2, [pc, #84]	; (800a068 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a012:	4293      	cmp	r3, r2
 800a014:	d10c      	bne.n	800a030 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a016:	68bb      	ldr	r3, [r7, #8]
 800a018:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a01c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	685b      	ldr	r3, [r3, #4]
 800a022:	68ba      	ldr	r2, [r7, #8]
 800a024:	4313      	orrs	r3, r2
 800a026:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	68ba      	ldr	r2, [r7, #8]
 800a02e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2201      	movs	r2, #1
 800a034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2200      	movs	r2, #0
 800a03c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a040:	2300      	movs	r3, #0
}
 800a042:	4618      	mov	r0, r3
 800a044:	3714      	adds	r7, #20
 800a046:	46bd      	mov	sp, r7
 800a048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04c:	4770      	bx	lr
 800a04e:	bf00      	nop
 800a050:	40010000 	.word	0x40010000
 800a054:	40000400 	.word	0x40000400
 800a058:	40000800 	.word	0x40000800
 800a05c:	40000c00 	.word	0x40000c00
 800a060:	40010400 	.word	0x40010400
 800a064:	40014000 	.word	0x40014000
 800a068:	40001800 	.word	0x40001800

0800a06c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a06c:	b480      	push	{r7}
 800a06e:	b083      	sub	sp, #12
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a074:	bf00      	nop
 800a076:	370c      	adds	r7, #12
 800a078:	46bd      	mov	sp, r7
 800a07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07e:	4770      	bx	lr

0800a080 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a080:	b480      	push	{r7}
 800a082:	b083      	sub	sp, #12
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a088:	bf00      	nop
 800a08a:	370c      	adds	r7, #12
 800a08c:	46bd      	mov	sp, r7
 800a08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a092:	4770      	bx	lr

0800a094 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b082      	sub	sp, #8
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d101      	bne.n	800a0a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	e03f      	b.n	800a126 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a0ac:	b2db      	uxtb	r3, r3
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d106      	bne.n	800a0c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a0ba:	6878      	ldr	r0, [r7, #4]
 800a0bc:	f7f7 fce8 	bl	8001a90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2224      	movs	r2, #36	; 0x24
 800a0c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	68da      	ldr	r2, [r3, #12]
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a0d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a0d8:	6878      	ldr	r0, [r7, #4]
 800a0da:	f000 fa69 	bl	800a5b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	691a      	ldr	r2, [r3, #16]
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a0ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	695a      	ldr	r2, [r3, #20]
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a0fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	68da      	ldr	r2, [r3, #12]
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a10c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	2200      	movs	r2, #0
 800a112:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2220      	movs	r2, #32
 800a118:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2220      	movs	r2, #32
 800a120:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800a124:	2300      	movs	r3, #0
}
 800a126:	4618      	mov	r0, r3
 800a128:	3708      	adds	r7, #8
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bd80      	pop	{r7, pc}
	...

0800a130 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b088      	sub	sp, #32
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	68db      	ldr	r3, [r3, #12]
 800a146:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	695b      	ldr	r3, [r3, #20]
 800a14e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800a150:	2300      	movs	r3, #0
 800a152:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800a154:	2300      	movs	r3, #0
 800a156:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a158:	69fb      	ldr	r3, [r7, #28]
 800a15a:	f003 030f 	and.w	r3, r3, #15
 800a15e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800a160:	693b      	ldr	r3, [r7, #16]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d10d      	bne.n	800a182 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a166:	69fb      	ldr	r3, [r7, #28]
 800a168:	f003 0320 	and.w	r3, r3, #32
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d008      	beq.n	800a182 <HAL_UART_IRQHandler+0x52>
 800a170:	69bb      	ldr	r3, [r7, #24]
 800a172:	f003 0320 	and.w	r3, r3, #32
 800a176:	2b00      	cmp	r3, #0
 800a178:	d003      	beq.n	800a182 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800a17a:	6878      	ldr	r0, [r7, #4]
 800a17c:	f000 f996 	bl	800a4ac <UART_Receive_IT>
      return;
 800a180:	e0d0      	b.n	800a324 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a182:	693b      	ldr	r3, [r7, #16]
 800a184:	2b00      	cmp	r3, #0
 800a186:	f000 80b0 	beq.w	800a2ea <HAL_UART_IRQHandler+0x1ba>
 800a18a:	697b      	ldr	r3, [r7, #20]
 800a18c:	f003 0301 	and.w	r3, r3, #1
 800a190:	2b00      	cmp	r3, #0
 800a192:	d105      	bne.n	800a1a0 <HAL_UART_IRQHandler+0x70>
 800a194:	69bb      	ldr	r3, [r7, #24]
 800a196:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	f000 80a5 	beq.w	800a2ea <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a1a0:	69fb      	ldr	r3, [r7, #28]
 800a1a2:	f003 0301 	and.w	r3, r3, #1
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d00a      	beq.n	800a1c0 <HAL_UART_IRQHandler+0x90>
 800a1aa:	69bb      	ldr	r3, [r7, #24]
 800a1ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d005      	beq.n	800a1c0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1b8:	f043 0201 	orr.w	r2, r3, #1
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a1c0:	69fb      	ldr	r3, [r7, #28]
 800a1c2:	f003 0304 	and.w	r3, r3, #4
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d00a      	beq.n	800a1e0 <HAL_UART_IRQHandler+0xb0>
 800a1ca:	697b      	ldr	r3, [r7, #20]
 800a1cc:	f003 0301 	and.w	r3, r3, #1
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d005      	beq.n	800a1e0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1d8:	f043 0202 	orr.w	r2, r3, #2
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a1e0:	69fb      	ldr	r3, [r7, #28]
 800a1e2:	f003 0302 	and.w	r3, r3, #2
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d00a      	beq.n	800a200 <HAL_UART_IRQHandler+0xd0>
 800a1ea:	697b      	ldr	r3, [r7, #20]
 800a1ec:	f003 0301 	and.w	r3, r3, #1
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d005      	beq.n	800a200 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1f8:	f043 0204 	orr.w	r2, r3, #4
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800a200:	69fb      	ldr	r3, [r7, #28]
 800a202:	f003 0308 	and.w	r3, r3, #8
 800a206:	2b00      	cmp	r3, #0
 800a208:	d00f      	beq.n	800a22a <HAL_UART_IRQHandler+0xfa>
 800a20a:	69bb      	ldr	r3, [r7, #24]
 800a20c:	f003 0320 	and.w	r3, r3, #32
 800a210:	2b00      	cmp	r3, #0
 800a212:	d104      	bne.n	800a21e <HAL_UART_IRQHandler+0xee>
 800a214:	697b      	ldr	r3, [r7, #20]
 800a216:	f003 0301 	and.w	r3, r3, #1
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d005      	beq.n	800a22a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a222:	f043 0208 	orr.w	r2, r3, #8
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d077      	beq.n	800a322 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a232:	69fb      	ldr	r3, [r7, #28]
 800a234:	f003 0320 	and.w	r3, r3, #32
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d007      	beq.n	800a24c <HAL_UART_IRQHandler+0x11c>
 800a23c:	69bb      	ldr	r3, [r7, #24]
 800a23e:	f003 0320 	and.w	r3, r3, #32
 800a242:	2b00      	cmp	r3, #0
 800a244:	d002      	beq.n	800a24c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800a246:	6878      	ldr	r0, [r7, #4]
 800a248:	f000 f930 	bl	800a4ac <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	695b      	ldr	r3, [r3, #20]
 800a252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a256:	2b40      	cmp	r3, #64	; 0x40
 800a258:	bf0c      	ite	eq
 800a25a:	2301      	moveq	r3, #1
 800a25c:	2300      	movne	r3, #0
 800a25e:	b2db      	uxtb	r3, r3
 800a260:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a266:	f003 0308 	and.w	r3, r3, #8
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d102      	bne.n	800a274 <HAL_UART_IRQHandler+0x144>
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d031      	beq.n	800a2d8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a274:	6878      	ldr	r0, [r7, #4]
 800a276:	f000 f879 	bl	800a36c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	695b      	ldr	r3, [r3, #20]
 800a280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a284:	2b40      	cmp	r3, #64	; 0x40
 800a286:	d123      	bne.n	800a2d0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	695a      	ldr	r2, [r3, #20]
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a296:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d013      	beq.n	800a2c8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2a4:	4a21      	ldr	r2, [pc, #132]	; (800a32c <HAL_UART_IRQHandler+0x1fc>)
 800a2a6:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	f7fc f8e7 	bl	8006480 <HAL_DMA_Abort_IT>
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d016      	beq.n	800a2e6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2be:	687a      	ldr	r2, [r7, #4]
 800a2c0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a2c2:	4610      	mov	r0, r2
 800a2c4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2c6:	e00e      	b.n	800a2e6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a2c8:	6878      	ldr	r0, [r7, #4]
 800a2ca:	f000 f845 	bl	800a358 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2ce:	e00a      	b.n	800a2e6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a2d0:	6878      	ldr	r0, [r7, #4]
 800a2d2:	f000 f841 	bl	800a358 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2d6:	e006      	b.n	800a2e6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a2d8:	6878      	ldr	r0, [r7, #4]
 800a2da:	f000 f83d 	bl	800a358 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800a2e4:	e01d      	b.n	800a322 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2e6:	bf00      	nop
    return;
 800a2e8:	e01b      	b.n	800a322 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a2ea:	69fb      	ldr	r3, [r7, #28]
 800a2ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d008      	beq.n	800a306 <HAL_UART_IRQHandler+0x1d6>
 800a2f4:	69bb      	ldr	r3, [r7, #24]
 800a2f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d003      	beq.n	800a306 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800a2fe:	6878      	ldr	r0, [r7, #4]
 800a300:	f000 f866 	bl	800a3d0 <UART_Transmit_IT>
    return;
 800a304:	e00e      	b.n	800a324 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a306:	69fb      	ldr	r3, [r7, #28]
 800a308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d009      	beq.n	800a324 <HAL_UART_IRQHandler+0x1f4>
 800a310:	69bb      	ldr	r3, [r7, #24]
 800a312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a316:	2b00      	cmp	r3, #0
 800a318:	d004      	beq.n	800a324 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	f000 f8ae 	bl	800a47c <UART_EndTransmit_IT>
    return;
 800a320:	e000      	b.n	800a324 <HAL_UART_IRQHandler+0x1f4>
    return;
 800a322:	bf00      	nop
  }
}
 800a324:	3720      	adds	r7, #32
 800a326:	46bd      	mov	sp, r7
 800a328:	bd80      	pop	{r7, pc}
 800a32a:	bf00      	nop
 800a32c:	0800a3a9 	.word	0x0800a3a9

0800a330 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a330:	b480      	push	{r7}
 800a332:	b083      	sub	sp, #12
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a338:	bf00      	nop
 800a33a:	370c      	adds	r7, #12
 800a33c:	46bd      	mov	sp, r7
 800a33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a342:	4770      	bx	lr

0800a344 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a344:	b480      	push	{r7}
 800a346:	b083      	sub	sp, #12
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800a34c:	bf00      	nop
 800a34e:	370c      	adds	r7, #12
 800a350:	46bd      	mov	sp, r7
 800a352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a356:	4770      	bx	lr

0800a358 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a358:	b480      	push	{r7}
 800a35a:	b083      	sub	sp, #12
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a360:	bf00      	nop
 800a362:	370c      	adds	r7, #12
 800a364:	46bd      	mov	sp, r7
 800a366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36a:	4770      	bx	lr

0800a36c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a36c:	b480      	push	{r7}
 800a36e:	b083      	sub	sp, #12
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	68da      	ldr	r2, [r3, #12]
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a382:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	695a      	ldr	r2, [r3, #20]
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	f022 0201 	bic.w	r2, r2, #1
 800a392:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2220      	movs	r2, #32
 800a398:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800a39c:	bf00      	nop
 800a39e:	370c      	adds	r7, #12
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a6:	4770      	bx	lr

0800a3a8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b084      	sub	sp, #16
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3b4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	2200      	movs	r2, #0
 800a3c0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a3c2:	68f8      	ldr	r0, [r7, #12]
 800a3c4:	f7ff ffc8 	bl	800a358 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a3c8:	bf00      	nop
 800a3ca:	3710      	adds	r7, #16
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	bd80      	pop	{r7, pc}

0800a3d0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a3d0:	b480      	push	{r7}
 800a3d2:	b085      	sub	sp, #20
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a3de:	b2db      	uxtb	r3, r3
 800a3e0:	2b21      	cmp	r3, #33	; 0x21
 800a3e2:	d144      	bne.n	800a46e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	689b      	ldr	r3, [r3, #8]
 800a3e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a3ec:	d11a      	bne.n	800a424 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6a1b      	ldr	r3, [r3, #32]
 800a3f2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	881b      	ldrh	r3, [r3, #0]
 800a3f8:	461a      	mov	r2, r3
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a402:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	691b      	ldr	r3, [r3, #16]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d105      	bne.n	800a418 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	6a1b      	ldr	r3, [r3, #32]
 800a410:	1c9a      	adds	r2, r3, #2
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	621a      	str	r2, [r3, #32]
 800a416:	e00e      	b.n	800a436 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	6a1b      	ldr	r3, [r3, #32]
 800a41c:	1c5a      	adds	r2, r3, #1
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	621a      	str	r2, [r3, #32]
 800a422:	e008      	b.n	800a436 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	6a1b      	ldr	r3, [r3, #32]
 800a428:	1c59      	adds	r1, r3, #1
 800a42a:	687a      	ldr	r2, [r7, #4]
 800a42c:	6211      	str	r1, [r2, #32]
 800a42e:	781a      	ldrb	r2, [r3, #0]
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a43a:	b29b      	uxth	r3, r3
 800a43c:	3b01      	subs	r3, #1
 800a43e:	b29b      	uxth	r3, r3
 800a440:	687a      	ldr	r2, [r7, #4]
 800a442:	4619      	mov	r1, r3
 800a444:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a446:	2b00      	cmp	r3, #0
 800a448:	d10f      	bne.n	800a46a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	68da      	ldr	r2, [r3, #12]
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a458:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	68da      	ldr	r2, [r3, #12]
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a468:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a46a:	2300      	movs	r3, #0
 800a46c:	e000      	b.n	800a470 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800a46e:	2302      	movs	r3, #2
  }
}
 800a470:	4618      	mov	r0, r3
 800a472:	3714      	adds	r7, #20
 800a474:	46bd      	mov	sp, r7
 800a476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47a:	4770      	bx	lr

0800a47c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b082      	sub	sp, #8
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	68da      	ldr	r2, [r3, #12]
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a492:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2220      	movs	r2, #32
 800a498:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a49c:	6878      	ldr	r0, [r7, #4]
 800a49e:	f7ff ff47 	bl	800a330 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a4a2:	2300      	movs	r3, #0
}
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	3708      	adds	r7, #8
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	bd80      	pop	{r7, pc}

0800a4ac <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b084      	sub	sp, #16
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a4ba:	b2db      	uxtb	r3, r3
 800a4bc:	2b22      	cmp	r3, #34	; 0x22
 800a4be:	d171      	bne.n	800a5a4 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	689b      	ldr	r3, [r3, #8]
 800a4c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4c8:	d123      	bne.n	800a512 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4ce:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	691b      	ldr	r3, [r3, #16]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d10e      	bne.n	800a4f6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	685b      	ldr	r3, [r3, #4]
 800a4de:	b29b      	uxth	r3, r3
 800a4e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4e4:	b29a      	uxth	r2, r3
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4ee:	1c9a      	adds	r2, r3, #2
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	629a      	str	r2, [r3, #40]	; 0x28
 800a4f4:	e029      	b.n	800a54a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	685b      	ldr	r3, [r3, #4]
 800a4fc:	b29b      	uxth	r3, r3
 800a4fe:	b2db      	uxtb	r3, r3
 800a500:	b29a      	uxth	r2, r3
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a50a:	1c5a      	adds	r2, r3, #1
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	629a      	str	r2, [r3, #40]	; 0x28
 800a510:	e01b      	b.n	800a54a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	691b      	ldr	r3, [r3, #16]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d10a      	bne.n	800a530 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	6858      	ldr	r0, [r3, #4]
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a524:	1c59      	adds	r1, r3, #1
 800a526:	687a      	ldr	r2, [r7, #4]
 800a528:	6291      	str	r1, [r2, #40]	; 0x28
 800a52a:	b2c2      	uxtb	r2, r0
 800a52c:	701a      	strb	r2, [r3, #0]
 800a52e:	e00c      	b.n	800a54a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	685b      	ldr	r3, [r3, #4]
 800a536:	b2da      	uxtb	r2, r3
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a53c:	1c58      	adds	r0, r3, #1
 800a53e:	6879      	ldr	r1, [r7, #4]
 800a540:	6288      	str	r0, [r1, #40]	; 0x28
 800a542:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a546:	b2d2      	uxtb	r2, r2
 800a548:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a54e:	b29b      	uxth	r3, r3
 800a550:	3b01      	subs	r3, #1
 800a552:	b29b      	uxth	r3, r3
 800a554:	687a      	ldr	r2, [r7, #4]
 800a556:	4619      	mov	r1, r3
 800a558:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d120      	bne.n	800a5a0 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	68da      	ldr	r2, [r3, #12]
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	f022 0220 	bic.w	r2, r2, #32
 800a56c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	68da      	ldr	r2, [r3, #12]
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a57c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	695a      	ldr	r2, [r3, #20]
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	f022 0201 	bic.w	r2, r2, #1
 800a58c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2220      	movs	r2, #32
 800a592:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800a596:	6878      	ldr	r0, [r7, #4]
 800a598:	f7ff fed4 	bl	800a344 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800a59c:	2300      	movs	r3, #0
 800a59e:	e002      	b.n	800a5a6 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	e000      	b.n	800a5a6 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800a5a4:	2302      	movs	r3, #2
  }
}
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	3710      	adds	r7, #16
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bd80      	pop	{r7, pc}
	...

0800a5b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a5b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a5b4:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a5be:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	691b      	ldr	r3, [r3, #16]
 800a5c6:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a5ca:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800a5ce:	68d9      	ldr	r1, [r3, #12]
 800a5d0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800a5d4:	681a      	ldr	r2, [r3, #0]
 800a5d6:	ea40 0301 	orr.w	r3, r0, r1
 800a5da:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a5dc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800a5e0:	689a      	ldr	r2, [r3, #8]
 800a5e2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800a5e6:	691b      	ldr	r3, [r3, #16]
 800a5e8:	431a      	orrs	r2, r3
 800a5ea:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800a5ee:	695b      	ldr	r3, [r3, #20]
 800a5f0:	431a      	orrs	r2, r3
 800a5f2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800a5f6:	69db      	ldr	r3, [r3, #28]
 800a5f8:	4313      	orrs	r3, r2
 800a5fa:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  MODIFY_REG(huart->Instance->CR1,
 800a5fe:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	68db      	ldr	r3, [r3, #12]
 800a606:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a60a:	f021 010c 	bic.w	r1, r1, #12
 800a60e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800a612:	681a      	ldr	r2, [r3, #0]
 800a614:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800a618:	430b      	orrs	r3, r1
 800a61a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a61c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	695b      	ldr	r3, [r3, #20]
 800a624:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a628:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800a62c:	6999      	ldr	r1, [r3, #24]
 800a62e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800a632:	681a      	ldr	r2, [r3, #0]
 800a634:	ea40 0301 	orr.w	r3, r0, r1
 800a638:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a63a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800a63e:	69db      	ldr	r3, [r3, #28]
 800a640:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a644:	f040 824a 	bne.w	800aadc <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a648:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800a64c:	681a      	ldr	r2, [r3, #0]
 800a64e:	4b96      	ldr	r3, [pc, #600]	; (800a8a8 <UART_SetConfig+0x2f8>)
 800a650:	429a      	cmp	r2, r3
 800a652:	d006      	beq.n	800a662 <UART_SetConfig+0xb2>
 800a654:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800a658:	681a      	ldr	r2, [r3, #0]
 800a65a:	4b94      	ldr	r3, [pc, #592]	; (800a8ac <UART_SetConfig+0x2fc>)
 800a65c:	429a      	cmp	r2, r3
 800a65e:	f040 8129 	bne.w	800a8b4 <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a662:	f7fe fca5 	bl	8008fb0 <HAL_RCC_GetPCLK2Freq>
 800a666:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a66a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800a66e:	2200      	movs	r2, #0
 800a670:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800a674:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 800a678:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 800a67c:	4622      	mov	r2, r4
 800a67e:	462b      	mov	r3, r5
 800a680:	1891      	adds	r1, r2, r2
 800a682:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 800a686:	415b      	adcs	r3, r3
 800a688:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a68c:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800a690:	4621      	mov	r1, r4
 800a692:	1851      	adds	r1, r2, r1
 800a694:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 800a698:	4629      	mov	r1, r5
 800a69a:	414b      	adcs	r3, r1
 800a69c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a6a0:	f04f 0200 	mov.w	r2, #0
 800a6a4:	f04f 0300 	mov.w	r3, #0
 800a6a8:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 800a6ac:	4649      	mov	r1, r9
 800a6ae:	00cb      	lsls	r3, r1, #3
 800a6b0:	4641      	mov	r1, r8
 800a6b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a6b6:	4641      	mov	r1, r8
 800a6b8:	00ca      	lsls	r2, r1, #3
 800a6ba:	4610      	mov	r0, r2
 800a6bc:	4619      	mov	r1, r3
 800a6be:	4603      	mov	r3, r0
 800a6c0:	4622      	mov	r2, r4
 800a6c2:	189b      	adds	r3, r3, r2
 800a6c4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800a6c8:	462b      	mov	r3, r5
 800a6ca:	460a      	mov	r2, r1
 800a6cc:	eb42 0303 	adc.w	r3, r2, r3
 800a6d0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800a6d4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800a6d8:	685b      	ldr	r3, [r3, #4]
 800a6da:	2200      	movs	r2, #0
 800a6dc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800a6e0:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 800a6e4:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 800a6e8:	460b      	mov	r3, r1
 800a6ea:	18db      	adds	r3, r3, r3
 800a6ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a6f0:	4613      	mov	r3, r2
 800a6f2:	eb42 0303 	adc.w	r3, r2, r3
 800a6f6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a6fa:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 800a6fe:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 800a702:	f7f5 fdbd 	bl	8000280 <__aeabi_uldivmod>
 800a706:	4602      	mov	r2, r0
 800a708:	460b      	mov	r3, r1
 800a70a:	4b69      	ldr	r3, [pc, #420]	; (800a8b0 <UART_SetConfig+0x300>)
 800a70c:	fba3 2302 	umull	r2, r3, r3, r2
 800a710:	095b      	lsrs	r3, r3, #5
 800a712:	011c      	lsls	r4, r3, #4
 800a714:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800a718:	2200      	movs	r2, #0
 800a71a:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 800a71e:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800a722:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	; 0x1d8
 800a726:	4642      	mov	r2, r8
 800a728:	464b      	mov	r3, r9
 800a72a:	1891      	adds	r1, r2, r2
 800a72c:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800a730:	415b      	adcs	r3, r3
 800a732:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a736:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800a73a:	4641      	mov	r1, r8
 800a73c:	1851      	adds	r1, r2, r1
 800a73e:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 800a742:	4649      	mov	r1, r9
 800a744:	414b      	adcs	r3, r1
 800a746:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a74a:	f04f 0200 	mov.w	r2, #0
 800a74e:	f04f 0300 	mov.w	r3, #0
 800a752:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 800a756:	4659      	mov	r1, fp
 800a758:	00cb      	lsls	r3, r1, #3
 800a75a:	4651      	mov	r1, sl
 800a75c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a760:	4651      	mov	r1, sl
 800a762:	00ca      	lsls	r2, r1, #3
 800a764:	4610      	mov	r0, r2
 800a766:	4619      	mov	r1, r3
 800a768:	4603      	mov	r3, r0
 800a76a:	4642      	mov	r2, r8
 800a76c:	189b      	adds	r3, r3, r2
 800a76e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 800a772:	464b      	mov	r3, r9
 800a774:	460a      	mov	r2, r1
 800a776:	eb42 0303 	adc.w	r3, r2, r3
 800a77a:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 800a77e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800a782:	685b      	ldr	r3, [r3, #4]
 800a784:	2200      	movs	r2, #0
 800a786:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800a78a:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 800a78e:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	; 0x1c8
 800a792:	460b      	mov	r3, r1
 800a794:	18db      	adds	r3, r3, r3
 800a796:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a79a:	4613      	mov	r3, r2
 800a79c:	eb42 0303 	adc.w	r3, r2, r3
 800a7a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a7a4:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 800a7a8:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 800a7ac:	f7f5 fd68 	bl	8000280 <__aeabi_uldivmod>
 800a7b0:	4602      	mov	r2, r0
 800a7b2:	460b      	mov	r3, r1
 800a7b4:	4611      	mov	r1, r2
 800a7b6:	4b3e      	ldr	r3, [pc, #248]	; (800a8b0 <UART_SetConfig+0x300>)
 800a7b8:	fba3 2301 	umull	r2, r3, r3, r1
 800a7bc:	095b      	lsrs	r3, r3, #5
 800a7be:	2264      	movs	r2, #100	; 0x64
 800a7c0:	fb02 f303 	mul.w	r3, r2, r3
 800a7c4:	1acb      	subs	r3, r1, r3
 800a7c6:	00db      	lsls	r3, r3, #3
 800a7c8:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a7cc:	4b38      	ldr	r3, [pc, #224]	; (800a8b0 <UART_SetConfig+0x300>)
 800a7ce:	fba3 2302 	umull	r2, r3, r3, r2
 800a7d2:	095b      	lsrs	r3, r3, #5
 800a7d4:	005b      	lsls	r3, r3, #1
 800a7d6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a7da:	441c      	add	r4, r3
 800a7dc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800a7e6:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 800a7ea:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 800a7ee:	4642      	mov	r2, r8
 800a7f0:	464b      	mov	r3, r9
 800a7f2:	1891      	adds	r1, r2, r2
 800a7f4:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 800a7f8:	415b      	adcs	r3, r3
 800a7fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a7fe:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800a802:	4641      	mov	r1, r8
 800a804:	1851      	adds	r1, r2, r1
 800a806:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 800a80a:	4649      	mov	r1, r9
 800a80c:	414b      	adcs	r3, r1
 800a80e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a812:	f04f 0200 	mov.w	r2, #0
 800a816:	f04f 0300 	mov.w	r3, #0
 800a81a:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	; 0x98
 800a81e:	4659      	mov	r1, fp
 800a820:	00cb      	lsls	r3, r1, #3
 800a822:	4651      	mov	r1, sl
 800a824:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a828:	4651      	mov	r1, sl
 800a82a:	00ca      	lsls	r2, r1, #3
 800a82c:	4610      	mov	r0, r2
 800a82e:	4619      	mov	r1, r3
 800a830:	4603      	mov	r3, r0
 800a832:	4642      	mov	r2, r8
 800a834:	189b      	adds	r3, r3, r2
 800a836:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 800a83a:	464b      	mov	r3, r9
 800a83c:	460a      	mov	r2, r1
 800a83e:	eb42 0303 	adc.w	r3, r2, r3
 800a842:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800a846:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800a84a:	685b      	ldr	r3, [r3, #4]
 800a84c:	2200      	movs	r2, #0
 800a84e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 800a852:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 800a856:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 800a85a:	460b      	mov	r3, r1
 800a85c:	18db      	adds	r3, r3, r3
 800a85e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a862:	4613      	mov	r3, r2
 800a864:	eb42 0303 	adc.w	r3, r2, r3
 800a868:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a86c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800a870:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 800a874:	f7f5 fd04 	bl	8000280 <__aeabi_uldivmod>
 800a878:	4602      	mov	r2, r0
 800a87a:	460b      	mov	r3, r1
 800a87c:	4b0c      	ldr	r3, [pc, #48]	; (800a8b0 <UART_SetConfig+0x300>)
 800a87e:	fba3 1302 	umull	r1, r3, r3, r2
 800a882:	095b      	lsrs	r3, r3, #5
 800a884:	2164      	movs	r1, #100	; 0x64
 800a886:	fb01 f303 	mul.w	r3, r1, r3
 800a88a:	1ad3      	subs	r3, r2, r3
 800a88c:	00db      	lsls	r3, r3, #3
 800a88e:	3332      	adds	r3, #50	; 0x32
 800a890:	4a07      	ldr	r2, [pc, #28]	; (800a8b0 <UART_SetConfig+0x300>)
 800a892:	fba2 2303 	umull	r2, r3, r2, r3
 800a896:	095b      	lsrs	r3, r3, #5
 800a898:	f003 0207 	and.w	r2, r3, #7
 800a89c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	4422      	add	r2, r4
 800a8a4:	609a      	str	r2, [r3, #8]
 800a8a6:	e349      	b.n	800af3c <UART_SetConfig+0x98c>
 800a8a8:	40011000 	.word	0x40011000
 800a8ac:	40011400 	.word	0x40011400
 800a8b0:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a8b4:	f7fe fb68 	bl	8008f88 <HAL_RCC_GetPCLK1Freq>
 800a8b8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a8bc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800a8c6:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 800a8ca:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 800a8ce:	4622      	mov	r2, r4
 800a8d0:	462b      	mov	r3, r5
 800a8d2:	1891      	adds	r1, r2, r2
 800a8d4:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800a8d8:	415b      	adcs	r3, r3
 800a8da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a8de:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800a8e2:	4621      	mov	r1, r4
 800a8e4:	eb12 0a01 	adds.w	sl, r2, r1
 800a8e8:	4629      	mov	r1, r5
 800a8ea:	eb43 0b01 	adc.w	fp, r3, r1
 800a8ee:	f04f 0200 	mov.w	r2, #0
 800a8f2:	f04f 0300 	mov.w	r3, #0
 800a8f6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a8fa:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a8fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a902:	4692      	mov	sl, r2
 800a904:	469b      	mov	fp, r3
 800a906:	4623      	mov	r3, r4
 800a908:	eb1a 0303 	adds.w	r3, sl, r3
 800a90c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800a910:	462b      	mov	r3, r5
 800a912:	eb4b 0303 	adc.w	r3, fp, r3
 800a916:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800a91a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800a91e:	685b      	ldr	r3, [r3, #4]
 800a920:	2200      	movs	r2, #0
 800a922:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 800a926:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800a92a:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 800a92e:	460b      	mov	r3, r1
 800a930:	18db      	adds	r3, r3, r3
 800a932:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a936:	4613      	mov	r3, r2
 800a938:	eb42 0303 	adc.w	r3, r2, r3
 800a93c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a940:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800a944:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 800a948:	f7f5 fc9a 	bl	8000280 <__aeabi_uldivmod>
 800a94c:	4602      	mov	r2, r0
 800a94e:	460b      	mov	r3, r1
 800a950:	4b61      	ldr	r3, [pc, #388]	; (800aad8 <UART_SetConfig+0x528>)
 800a952:	fba3 2302 	umull	r2, r3, r3, r2
 800a956:	095b      	lsrs	r3, r3, #5
 800a958:	011c      	lsls	r4, r3, #4
 800a95a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800a95e:	2200      	movs	r2, #0
 800a960:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 800a964:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 800a968:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	; 0x190
 800a96c:	4642      	mov	r2, r8
 800a96e:	464b      	mov	r3, r9
 800a970:	1891      	adds	r1, r2, r2
 800a972:	67b9      	str	r1, [r7, #120]	; 0x78
 800a974:	415b      	adcs	r3, r3
 800a976:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a978:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800a97c:	4641      	mov	r1, r8
 800a97e:	1851      	adds	r1, r2, r1
 800a980:	6739      	str	r1, [r7, #112]	; 0x70
 800a982:	4649      	mov	r1, r9
 800a984:	414b      	adcs	r3, r1
 800a986:	677b      	str	r3, [r7, #116]	; 0x74
 800a988:	f04f 0200 	mov.w	r2, #0
 800a98c:	f04f 0300 	mov.w	r3, #0
 800a990:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	; 0x70
 800a994:	4659      	mov	r1, fp
 800a996:	00cb      	lsls	r3, r1, #3
 800a998:	4651      	mov	r1, sl
 800a99a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a99e:	4651      	mov	r1, sl
 800a9a0:	00ca      	lsls	r2, r1, #3
 800a9a2:	4610      	mov	r0, r2
 800a9a4:	4619      	mov	r1, r3
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	4642      	mov	r2, r8
 800a9aa:	189b      	adds	r3, r3, r2
 800a9ac:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800a9b0:	464b      	mov	r3, r9
 800a9b2:	460a      	mov	r2, r1
 800a9b4:	eb42 0303 	adc.w	r3, r2, r3
 800a9b8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 800a9bc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800a9c0:	685b      	ldr	r3, [r3, #4]
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800a9c8:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 800a9cc:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 800a9d0:	460b      	mov	r3, r1
 800a9d2:	18db      	adds	r3, r3, r3
 800a9d4:	66bb      	str	r3, [r7, #104]	; 0x68
 800a9d6:	4613      	mov	r3, r2
 800a9d8:	eb42 0303 	adc.w	r3, r2, r3
 800a9dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a9de:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800a9e2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800a9e6:	f7f5 fc4b 	bl	8000280 <__aeabi_uldivmod>
 800a9ea:	4602      	mov	r2, r0
 800a9ec:	460b      	mov	r3, r1
 800a9ee:	4611      	mov	r1, r2
 800a9f0:	4b39      	ldr	r3, [pc, #228]	; (800aad8 <UART_SetConfig+0x528>)
 800a9f2:	fba3 2301 	umull	r2, r3, r3, r1
 800a9f6:	095b      	lsrs	r3, r3, #5
 800a9f8:	2264      	movs	r2, #100	; 0x64
 800a9fa:	fb02 f303 	mul.w	r3, r2, r3
 800a9fe:	1acb      	subs	r3, r1, r3
 800aa00:	00db      	lsls	r3, r3, #3
 800aa02:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800aa06:	4b34      	ldr	r3, [pc, #208]	; (800aad8 <UART_SetConfig+0x528>)
 800aa08:	fba3 2302 	umull	r2, r3, r3, r2
 800aa0c:	095b      	lsrs	r3, r3, #5
 800aa0e:	005b      	lsls	r3, r3, #1
 800aa10:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800aa14:	441c      	add	r4, r3
 800aa16:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 800aa20:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800aa24:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	; 0x178
 800aa28:	4642      	mov	r2, r8
 800aa2a:	464b      	mov	r3, r9
 800aa2c:	1891      	adds	r1, r2, r2
 800aa2e:	6639      	str	r1, [r7, #96]	; 0x60
 800aa30:	415b      	adcs	r3, r3
 800aa32:	667b      	str	r3, [r7, #100]	; 0x64
 800aa34:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800aa38:	4641      	mov	r1, r8
 800aa3a:	1851      	adds	r1, r2, r1
 800aa3c:	65b9      	str	r1, [r7, #88]	; 0x58
 800aa3e:	4649      	mov	r1, r9
 800aa40:	414b      	adcs	r3, r1
 800aa42:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aa44:	f04f 0200 	mov.w	r2, #0
 800aa48:	f04f 0300 	mov.w	r3, #0
 800aa4c:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 800aa50:	4659      	mov	r1, fp
 800aa52:	00cb      	lsls	r3, r1, #3
 800aa54:	4651      	mov	r1, sl
 800aa56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800aa5a:	4651      	mov	r1, sl
 800aa5c:	00ca      	lsls	r2, r1, #3
 800aa5e:	4610      	mov	r0, r2
 800aa60:	4619      	mov	r1, r3
 800aa62:	4603      	mov	r3, r0
 800aa64:	4642      	mov	r2, r8
 800aa66:	189b      	adds	r3, r3, r2
 800aa68:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 800aa6c:	464b      	mov	r3, r9
 800aa6e:	460a      	mov	r2, r1
 800aa70:	eb42 0303 	adc.w	r3, r2, r3
 800aa74:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 800aa78:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800aa7c:	685b      	ldr	r3, [r3, #4]
 800aa7e:	2200      	movs	r2, #0
 800aa80:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 800aa84:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 800aa88:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 800aa8c:	460b      	mov	r3, r1
 800aa8e:	18db      	adds	r3, r3, r3
 800aa90:	653b      	str	r3, [r7, #80]	; 0x50
 800aa92:	4613      	mov	r3, r2
 800aa94:	eb42 0303 	adc.w	r3, r2, r3
 800aa98:	657b      	str	r3, [r7, #84]	; 0x54
 800aa9a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800aa9e:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 800aaa2:	f7f5 fbed 	bl	8000280 <__aeabi_uldivmod>
 800aaa6:	4602      	mov	r2, r0
 800aaa8:	460b      	mov	r3, r1
 800aaaa:	4b0b      	ldr	r3, [pc, #44]	; (800aad8 <UART_SetConfig+0x528>)
 800aaac:	fba3 1302 	umull	r1, r3, r3, r2
 800aab0:	095b      	lsrs	r3, r3, #5
 800aab2:	2164      	movs	r1, #100	; 0x64
 800aab4:	fb01 f303 	mul.w	r3, r1, r3
 800aab8:	1ad3      	subs	r3, r2, r3
 800aaba:	00db      	lsls	r3, r3, #3
 800aabc:	3332      	adds	r3, #50	; 0x32
 800aabe:	4a06      	ldr	r2, [pc, #24]	; (800aad8 <UART_SetConfig+0x528>)
 800aac0:	fba2 2303 	umull	r2, r3, r2, r3
 800aac4:	095b      	lsrs	r3, r3, #5
 800aac6:	f003 0207 	and.w	r2, r3, #7
 800aaca:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	4422      	add	r2, r4
 800aad2:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800aad4:	e232      	b.n	800af3c <UART_SetConfig+0x98c>
 800aad6:	bf00      	nop
 800aad8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800aadc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800aae0:	681a      	ldr	r2, [r3, #0]
 800aae2:	4b8d      	ldr	r3, [pc, #564]	; (800ad18 <UART_SetConfig+0x768>)
 800aae4:	429a      	cmp	r2, r3
 800aae6:	d006      	beq.n	800aaf6 <UART_SetConfig+0x546>
 800aae8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800aaec:	681a      	ldr	r2, [r3, #0]
 800aaee:	4b8b      	ldr	r3, [pc, #556]	; (800ad1c <UART_SetConfig+0x76c>)
 800aaf0:	429a      	cmp	r2, r3
 800aaf2:	f040 8117 	bne.w	800ad24 <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 800aaf6:	f7fe fa5b 	bl	8008fb0 <HAL_RCC_GetPCLK2Freq>
 800aafa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800aafe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800ab02:	2200      	movs	r2, #0
 800ab04:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 800ab08:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 800ab0c:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 800ab10:	4622      	mov	r2, r4
 800ab12:	462b      	mov	r3, r5
 800ab14:	1891      	adds	r1, r2, r2
 800ab16:	64b9      	str	r1, [r7, #72]	; 0x48
 800ab18:	415b      	adcs	r3, r3
 800ab1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ab1c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800ab20:	4621      	mov	r1, r4
 800ab22:	eb12 0801 	adds.w	r8, r2, r1
 800ab26:	4629      	mov	r1, r5
 800ab28:	eb43 0901 	adc.w	r9, r3, r1
 800ab2c:	f04f 0200 	mov.w	r2, #0
 800ab30:	f04f 0300 	mov.w	r3, #0
 800ab34:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ab38:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ab3c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ab40:	4690      	mov	r8, r2
 800ab42:	4699      	mov	r9, r3
 800ab44:	4623      	mov	r3, r4
 800ab46:	eb18 0303 	adds.w	r3, r8, r3
 800ab4a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800ab4e:	462b      	mov	r3, r5
 800ab50:	eb49 0303 	adc.w	r3, r9, r3
 800ab54:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 800ab58:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800ab5c:	685b      	ldr	r3, [r3, #4]
 800ab5e:	2200      	movs	r2, #0
 800ab60:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800ab64:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 800ab68:	f04f 0200 	mov.w	r2, #0
 800ab6c:	f04f 0300 	mov.w	r3, #0
 800ab70:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 800ab74:	4629      	mov	r1, r5
 800ab76:	008b      	lsls	r3, r1, #2
 800ab78:	4621      	mov	r1, r4
 800ab7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ab7e:	4621      	mov	r1, r4
 800ab80:	008a      	lsls	r2, r1, #2
 800ab82:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 800ab86:	f7f5 fb7b 	bl	8000280 <__aeabi_uldivmod>
 800ab8a:	4602      	mov	r2, r0
 800ab8c:	460b      	mov	r3, r1
 800ab8e:	4b64      	ldr	r3, [pc, #400]	; (800ad20 <UART_SetConfig+0x770>)
 800ab90:	fba3 2302 	umull	r2, r3, r3, r2
 800ab94:	095b      	lsrs	r3, r3, #5
 800ab96:	011c      	lsls	r4, r3, #4
 800ab98:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800aba2:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800aba6:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	; 0x148
 800abaa:	4642      	mov	r2, r8
 800abac:	464b      	mov	r3, r9
 800abae:	1891      	adds	r1, r2, r2
 800abb0:	6439      	str	r1, [r7, #64]	; 0x40
 800abb2:	415b      	adcs	r3, r3
 800abb4:	647b      	str	r3, [r7, #68]	; 0x44
 800abb6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800abba:	4641      	mov	r1, r8
 800abbc:	1851      	adds	r1, r2, r1
 800abbe:	63b9      	str	r1, [r7, #56]	; 0x38
 800abc0:	4649      	mov	r1, r9
 800abc2:	414b      	adcs	r3, r1
 800abc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800abc6:	f04f 0200 	mov.w	r2, #0
 800abca:	f04f 0300 	mov.w	r3, #0
 800abce:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 800abd2:	4659      	mov	r1, fp
 800abd4:	00cb      	lsls	r3, r1, #3
 800abd6:	4651      	mov	r1, sl
 800abd8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800abdc:	4651      	mov	r1, sl
 800abde:	00ca      	lsls	r2, r1, #3
 800abe0:	4610      	mov	r0, r2
 800abe2:	4619      	mov	r1, r3
 800abe4:	4603      	mov	r3, r0
 800abe6:	4642      	mov	r2, r8
 800abe8:	189b      	adds	r3, r3, r2
 800abea:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 800abee:	464b      	mov	r3, r9
 800abf0:	460a      	mov	r2, r1
 800abf2:	eb42 0303 	adc.w	r3, r2, r3
 800abf6:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 800abfa:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800abfe:	685b      	ldr	r3, [r3, #4]
 800ac00:	2200      	movs	r2, #0
 800ac02:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800ac06:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 800ac0a:	f04f 0200 	mov.w	r2, #0
 800ac0e:	f04f 0300 	mov.w	r3, #0
 800ac12:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 800ac16:	4649      	mov	r1, r9
 800ac18:	008b      	lsls	r3, r1, #2
 800ac1a:	4641      	mov	r1, r8
 800ac1c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ac20:	4641      	mov	r1, r8
 800ac22:	008a      	lsls	r2, r1, #2
 800ac24:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 800ac28:	f7f5 fb2a 	bl	8000280 <__aeabi_uldivmod>
 800ac2c:	4602      	mov	r2, r0
 800ac2e:	460b      	mov	r3, r1
 800ac30:	4b3b      	ldr	r3, [pc, #236]	; (800ad20 <UART_SetConfig+0x770>)
 800ac32:	fba3 1302 	umull	r1, r3, r3, r2
 800ac36:	095b      	lsrs	r3, r3, #5
 800ac38:	2164      	movs	r1, #100	; 0x64
 800ac3a:	fb01 f303 	mul.w	r3, r1, r3
 800ac3e:	1ad3      	subs	r3, r2, r3
 800ac40:	011b      	lsls	r3, r3, #4
 800ac42:	3332      	adds	r3, #50	; 0x32
 800ac44:	4a36      	ldr	r2, [pc, #216]	; (800ad20 <UART_SetConfig+0x770>)
 800ac46:	fba2 2303 	umull	r2, r3, r2, r3
 800ac4a:	095b      	lsrs	r3, r3, #5
 800ac4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ac50:	441c      	add	r4, r3
 800ac52:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800ac56:	2200      	movs	r2, #0
 800ac58:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800ac5c:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 800ac60:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 800ac64:	4642      	mov	r2, r8
 800ac66:	464b      	mov	r3, r9
 800ac68:	1891      	adds	r1, r2, r2
 800ac6a:	6339      	str	r1, [r7, #48]	; 0x30
 800ac6c:	415b      	adcs	r3, r3
 800ac6e:	637b      	str	r3, [r7, #52]	; 0x34
 800ac70:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800ac74:	4641      	mov	r1, r8
 800ac76:	1851      	adds	r1, r2, r1
 800ac78:	62b9      	str	r1, [r7, #40]	; 0x28
 800ac7a:	4649      	mov	r1, r9
 800ac7c:	414b      	adcs	r3, r1
 800ac7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ac80:	f04f 0200 	mov.w	r2, #0
 800ac84:	f04f 0300 	mov.w	r3, #0
 800ac88:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 800ac8c:	4659      	mov	r1, fp
 800ac8e:	00cb      	lsls	r3, r1, #3
 800ac90:	4651      	mov	r1, sl
 800ac92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ac96:	4651      	mov	r1, sl
 800ac98:	00ca      	lsls	r2, r1, #3
 800ac9a:	4610      	mov	r0, r2
 800ac9c:	4619      	mov	r1, r3
 800ac9e:	4603      	mov	r3, r0
 800aca0:	4642      	mov	r2, r8
 800aca2:	189b      	adds	r3, r3, r2
 800aca4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800aca8:	464b      	mov	r3, r9
 800acaa:	460a      	mov	r2, r1
 800acac:	eb42 0303 	adc.w	r3, r2, r3
 800acb0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800acb4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800acb8:	685b      	ldr	r3, [r3, #4]
 800acba:	2200      	movs	r2, #0
 800acbc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800acc0:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 800acc4:	f04f 0200 	mov.w	r2, #0
 800acc8:	f04f 0300 	mov.w	r3, #0
 800accc:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 800acd0:	4649      	mov	r1, r9
 800acd2:	008b      	lsls	r3, r1, #2
 800acd4:	4641      	mov	r1, r8
 800acd6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800acda:	4641      	mov	r1, r8
 800acdc:	008a      	lsls	r2, r1, #2
 800acde:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800ace2:	f7f5 facd 	bl	8000280 <__aeabi_uldivmod>
 800ace6:	4602      	mov	r2, r0
 800ace8:	460b      	mov	r3, r1
 800acea:	4b0d      	ldr	r3, [pc, #52]	; (800ad20 <UART_SetConfig+0x770>)
 800acec:	fba3 1302 	umull	r1, r3, r3, r2
 800acf0:	095b      	lsrs	r3, r3, #5
 800acf2:	2164      	movs	r1, #100	; 0x64
 800acf4:	fb01 f303 	mul.w	r3, r1, r3
 800acf8:	1ad3      	subs	r3, r2, r3
 800acfa:	011b      	lsls	r3, r3, #4
 800acfc:	3332      	adds	r3, #50	; 0x32
 800acfe:	4a08      	ldr	r2, [pc, #32]	; (800ad20 <UART_SetConfig+0x770>)
 800ad00:	fba2 2303 	umull	r2, r3, r2, r3
 800ad04:	095b      	lsrs	r3, r3, #5
 800ad06:	f003 020f 	and.w	r2, r3, #15
 800ad0a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	4422      	add	r2, r4
 800ad12:	609a      	str	r2, [r3, #8]
 800ad14:	e112      	b.n	800af3c <UART_SetConfig+0x98c>
 800ad16:	bf00      	nop
 800ad18:	40011000 	.word	0x40011000
 800ad1c:	40011400 	.word	0x40011400
 800ad20:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 800ad24:	f7fe f930 	bl	8008f88 <HAL_RCC_GetPCLK1Freq>
 800ad28:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ad2c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800ad30:	2200      	movs	r2, #0
 800ad32:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800ad36:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800ad3a:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 800ad3e:	4642      	mov	r2, r8
 800ad40:	464b      	mov	r3, r9
 800ad42:	1891      	adds	r1, r2, r2
 800ad44:	6239      	str	r1, [r7, #32]
 800ad46:	415b      	adcs	r3, r3
 800ad48:	627b      	str	r3, [r7, #36]	; 0x24
 800ad4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ad4e:	4641      	mov	r1, r8
 800ad50:	1854      	adds	r4, r2, r1
 800ad52:	4649      	mov	r1, r9
 800ad54:	eb43 0501 	adc.w	r5, r3, r1
 800ad58:	f04f 0200 	mov.w	r2, #0
 800ad5c:	f04f 0300 	mov.w	r3, #0
 800ad60:	00eb      	lsls	r3, r5, #3
 800ad62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ad66:	00e2      	lsls	r2, r4, #3
 800ad68:	4614      	mov	r4, r2
 800ad6a:	461d      	mov	r5, r3
 800ad6c:	4643      	mov	r3, r8
 800ad6e:	18e3      	adds	r3, r4, r3
 800ad70:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800ad74:	464b      	mov	r3, r9
 800ad76:	eb45 0303 	adc.w	r3, r5, r3
 800ad7a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800ad7e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800ad82:	685b      	ldr	r3, [r3, #4]
 800ad84:	2200      	movs	r2, #0
 800ad86:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800ad8a:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 800ad8e:	f04f 0200 	mov.w	r2, #0
 800ad92:	f04f 0300 	mov.w	r3, #0
 800ad96:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 800ad9a:	4629      	mov	r1, r5
 800ad9c:	008b      	lsls	r3, r1, #2
 800ad9e:	4621      	mov	r1, r4
 800ada0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ada4:	4621      	mov	r1, r4
 800ada6:	008a      	lsls	r2, r1, #2
 800ada8:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 800adac:	f7f5 fa68 	bl	8000280 <__aeabi_uldivmod>
 800adb0:	4602      	mov	r2, r0
 800adb2:	460b      	mov	r3, r1
 800adb4:	4b64      	ldr	r3, [pc, #400]	; (800af48 <UART_SetConfig+0x998>)
 800adb6:	fba3 2302 	umull	r2, r3, r3, r2
 800adba:	095b      	lsrs	r3, r3, #5
 800adbc:	011c      	lsls	r4, r3, #4
 800adbe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800adc2:	2200      	movs	r2, #0
 800adc4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800adc8:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 800adcc:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 800add0:	4642      	mov	r2, r8
 800add2:	464b      	mov	r3, r9
 800add4:	1891      	adds	r1, r2, r2
 800add6:	61b9      	str	r1, [r7, #24]
 800add8:	415b      	adcs	r3, r3
 800adda:	61fb      	str	r3, [r7, #28]
 800addc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ade0:	4641      	mov	r1, r8
 800ade2:	1851      	adds	r1, r2, r1
 800ade4:	6139      	str	r1, [r7, #16]
 800ade6:	4649      	mov	r1, r9
 800ade8:	414b      	adcs	r3, r1
 800adea:	617b      	str	r3, [r7, #20]
 800adec:	f04f 0200 	mov.w	r2, #0
 800adf0:	f04f 0300 	mov.w	r3, #0
 800adf4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800adf8:	4659      	mov	r1, fp
 800adfa:	00cb      	lsls	r3, r1, #3
 800adfc:	4651      	mov	r1, sl
 800adfe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ae02:	4651      	mov	r1, sl
 800ae04:	00ca      	lsls	r2, r1, #3
 800ae06:	4610      	mov	r0, r2
 800ae08:	4619      	mov	r1, r3
 800ae0a:	4603      	mov	r3, r0
 800ae0c:	4642      	mov	r2, r8
 800ae0e:	189b      	adds	r3, r3, r2
 800ae10:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ae14:	464b      	mov	r3, r9
 800ae16:	460a      	mov	r2, r1
 800ae18:	eb42 0303 	adc.w	r3, r2, r3
 800ae1c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800ae20:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800ae24:	685b      	ldr	r3, [r3, #4]
 800ae26:	2200      	movs	r2, #0
 800ae28:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ae2c:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800ae30:	f04f 0200 	mov.w	r2, #0
 800ae34:	f04f 0300 	mov.w	r3, #0
 800ae38:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 800ae3c:	4649      	mov	r1, r9
 800ae3e:	008b      	lsls	r3, r1, #2
 800ae40:	4641      	mov	r1, r8
 800ae42:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ae46:	4641      	mov	r1, r8
 800ae48:	008a      	lsls	r2, r1, #2
 800ae4a:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 800ae4e:	f7f5 fa17 	bl	8000280 <__aeabi_uldivmod>
 800ae52:	4602      	mov	r2, r0
 800ae54:	460b      	mov	r3, r1
 800ae56:	4b3c      	ldr	r3, [pc, #240]	; (800af48 <UART_SetConfig+0x998>)
 800ae58:	fba3 1302 	umull	r1, r3, r3, r2
 800ae5c:	095b      	lsrs	r3, r3, #5
 800ae5e:	2164      	movs	r1, #100	; 0x64
 800ae60:	fb01 f303 	mul.w	r3, r1, r3
 800ae64:	1ad3      	subs	r3, r2, r3
 800ae66:	011b      	lsls	r3, r3, #4
 800ae68:	3332      	adds	r3, #50	; 0x32
 800ae6a:	4a37      	ldr	r2, [pc, #220]	; (800af48 <UART_SetConfig+0x998>)
 800ae6c:	fba2 2303 	umull	r2, r3, r2, r3
 800ae70:	095b      	lsrs	r3, r3, #5
 800ae72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ae76:	441c      	add	r4, r3
 800ae78:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800ae7c:	2200      	movs	r2, #0
 800ae7e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ae82:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800ae86:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 800ae8a:	4642      	mov	r2, r8
 800ae8c:	464b      	mov	r3, r9
 800ae8e:	1891      	adds	r1, r2, r2
 800ae90:	60b9      	str	r1, [r7, #8]
 800ae92:	415b      	adcs	r3, r3
 800ae94:	60fb      	str	r3, [r7, #12]
 800ae96:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ae9a:	4641      	mov	r1, r8
 800ae9c:	1851      	adds	r1, r2, r1
 800ae9e:	6039      	str	r1, [r7, #0]
 800aea0:	4649      	mov	r1, r9
 800aea2:	414b      	adcs	r3, r1
 800aea4:	607b      	str	r3, [r7, #4]
 800aea6:	f04f 0200 	mov.w	r2, #0
 800aeaa:	f04f 0300 	mov.w	r3, #0
 800aeae:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800aeb2:	4659      	mov	r1, fp
 800aeb4:	00cb      	lsls	r3, r1, #3
 800aeb6:	4651      	mov	r1, sl
 800aeb8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800aebc:	4651      	mov	r1, sl
 800aebe:	00ca      	lsls	r2, r1, #3
 800aec0:	4610      	mov	r0, r2
 800aec2:	4619      	mov	r1, r3
 800aec4:	4603      	mov	r3, r0
 800aec6:	4642      	mov	r2, r8
 800aec8:	189b      	adds	r3, r3, r2
 800aeca:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800aece:	464b      	mov	r3, r9
 800aed0:	460a      	mov	r2, r1
 800aed2:	eb42 0303 	adc.w	r3, r2, r3
 800aed6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800aeda:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800aede:	685b      	ldr	r3, [r3, #4]
 800aee0:	2200      	movs	r2, #0
 800aee2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800aee6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800aeea:	f04f 0200 	mov.w	r2, #0
 800aeee:	f04f 0300 	mov.w	r3, #0
 800aef2:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 800aef6:	4649      	mov	r1, r9
 800aef8:	008b      	lsls	r3, r1, #2
 800aefa:	4641      	mov	r1, r8
 800aefc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800af00:	4641      	mov	r1, r8
 800af02:	008a      	lsls	r2, r1, #2
 800af04:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800af08:	f7f5 f9ba 	bl	8000280 <__aeabi_uldivmod>
 800af0c:	4602      	mov	r2, r0
 800af0e:	460b      	mov	r3, r1
 800af10:	4b0d      	ldr	r3, [pc, #52]	; (800af48 <UART_SetConfig+0x998>)
 800af12:	fba3 1302 	umull	r1, r3, r3, r2
 800af16:	095b      	lsrs	r3, r3, #5
 800af18:	2164      	movs	r1, #100	; 0x64
 800af1a:	fb01 f303 	mul.w	r3, r1, r3
 800af1e:	1ad3      	subs	r3, r2, r3
 800af20:	011b      	lsls	r3, r3, #4
 800af22:	3332      	adds	r3, #50	; 0x32
 800af24:	4a08      	ldr	r2, [pc, #32]	; (800af48 <UART_SetConfig+0x998>)
 800af26:	fba2 2303 	umull	r2, r3, r2, r3
 800af2a:	095b      	lsrs	r3, r3, #5
 800af2c:	f003 020f 	and.w	r2, r3, #15
 800af30:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	4422      	add	r2, r4
 800af38:	609a      	str	r2, [r3, #8]
}
 800af3a:	e7ff      	b.n	800af3c <UART_SetConfig+0x98c>
 800af3c:	bf00      	nop
 800af3e:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800af42:	46bd      	mov	sp, r7
 800af44:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800af48:	51eb851f 	.word	0x51eb851f

0800af4c <__cxa_pure_virtual>:
 800af4c:	b508      	push	{r3, lr}
 800af4e:	f000 f80d 	bl	800af6c <_ZSt9terminatev>

0800af52 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800af52:	b508      	push	{r3, lr}
 800af54:	4780      	blx	r0
 800af56:	f000 f80e 	bl	800af76 <abort>
	...

0800af5c <_ZSt13get_terminatev>:
 800af5c:	4b02      	ldr	r3, [pc, #8]	; (800af68 <_ZSt13get_terminatev+0xc>)
 800af5e:	6818      	ldr	r0, [r3, #0]
 800af60:	f3bf 8f5b 	dmb	ish
 800af64:	4770      	bx	lr
 800af66:	bf00      	nop
 800af68:	20000018 	.word	0x20000018

0800af6c <_ZSt9terminatev>:
 800af6c:	b508      	push	{r3, lr}
 800af6e:	f7ff fff5 	bl	800af5c <_ZSt13get_terminatev>
 800af72:	f7ff ffee 	bl	800af52 <_ZN10__cxxabiv111__terminateEPFvvE>

0800af76 <abort>:
 800af76:	b508      	push	{r3, lr}
 800af78:	2006      	movs	r0, #6
 800af7a:	f000 f873 	bl	800b064 <raise>
 800af7e:	2001      	movs	r0, #1
 800af80:	f7fa f82b 	bl	8004fda <_exit>

0800af84 <__errno>:
 800af84:	4b01      	ldr	r3, [pc, #4]	; (800af8c <__errno+0x8>)
 800af86:	6818      	ldr	r0, [r3, #0]
 800af88:	4770      	bx	lr
 800af8a:	bf00      	nop
 800af8c:	2000001c 	.word	0x2000001c

0800af90 <__libc_init_array>:
 800af90:	b570      	push	{r4, r5, r6, lr}
 800af92:	4d0d      	ldr	r5, [pc, #52]	; (800afc8 <__libc_init_array+0x38>)
 800af94:	4c0d      	ldr	r4, [pc, #52]	; (800afcc <__libc_init_array+0x3c>)
 800af96:	1b64      	subs	r4, r4, r5
 800af98:	10a4      	asrs	r4, r4, #2
 800af9a:	2600      	movs	r6, #0
 800af9c:	42a6      	cmp	r6, r4
 800af9e:	d109      	bne.n	800afb4 <__libc_init_array+0x24>
 800afa0:	4d0b      	ldr	r5, [pc, #44]	; (800afd0 <__libc_init_array+0x40>)
 800afa2:	4c0c      	ldr	r4, [pc, #48]	; (800afd4 <__libc_init_array+0x44>)
 800afa4:	f000 fcd8 	bl	800b958 <_init>
 800afa8:	1b64      	subs	r4, r4, r5
 800afaa:	10a4      	asrs	r4, r4, #2
 800afac:	2600      	movs	r6, #0
 800afae:	42a6      	cmp	r6, r4
 800afb0:	d105      	bne.n	800afbe <__libc_init_array+0x2e>
 800afb2:	bd70      	pop	{r4, r5, r6, pc}
 800afb4:	f855 3b04 	ldr.w	r3, [r5], #4
 800afb8:	4798      	blx	r3
 800afba:	3601      	adds	r6, #1
 800afbc:	e7ee      	b.n	800af9c <__libc_init_array+0xc>
 800afbe:	f855 3b04 	ldr.w	r3, [r5], #4
 800afc2:	4798      	blx	r3
 800afc4:	3601      	adds	r6, #1
 800afc6:	e7f2      	b.n	800afae <__libc_init_array+0x1e>
 800afc8:	0800bce4 	.word	0x0800bce4
 800afcc:	0800bce4 	.word	0x0800bce4
 800afd0:	0800bce4 	.word	0x0800bce4
 800afd4:	0800bcec 	.word	0x0800bcec

0800afd8 <memcpy>:
 800afd8:	440a      	add	r2, r1
 800afda:	4291      	cmp	r1, r2
 800afdc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800afe0:	d100      	bne.n	800afe4 <memcpy+0xc>
 800afe2:	4770      	bx	lr
 800afe4:	b510      	push	{r4, lr}
 800afe6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800afea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800afee:	4291      	cmp	r1, r2
 800aff0:	d1f9      	bne.n	800afe6 <memcpy+0xe>
 800aff2:	bd10      	pop	{r4, pc}

0800aff4 <memset>:
 800aff4:	4402      	add	r2, r0
 800aff6:	4603      	mov	r3, r0
 800aff8:	4293      	cmp	r3, r2
 800affa:	d100      	bne.n	800affe <memset+0xa>
 800affc:	4770      	bx	lr
 800affe:	f803 1b01 	strb.w	r1, [r3], #1
 800b002:	e7f9      	b.n	800aff8 <memset+0x4>

0800b004 <realloc>:
 800b004:	4b02      	ldr	r3, [pc, #8]	; (800b010 <realloc+0xc>)
 800b006:	460a      	mov	r2, r1
 800b008:	4601      	mov	r1, r0
 800b00a:	6818      	ldr	r0, [r3, #0]
 800b00c:	f000 b8fa 	b.w	800b204 <_realloc_r>
 800b010:	2000001c 	.word	0x2000001c

0800b014 <_raise_r>:
 800b014:	291f      	cmp	r1, #31
 800b016:	b538      	push	{r3, r4, r5, lr}
 800b018:	4604      	mov	r4, r0
 800b01a:	460d      	mov	r5, r1
 800b01c:	d904      	bls.n	800b028 <_raise_r+0x14>
 800b01e:	2316      	movs	r3, #22
 800b020:	6003      	str	r3, [r0, #0]
 800b022:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b026:	bd38      	pop	{r3, r4, r5, pc}
 800b028:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b02a:	b112      	cbz	r2, 800b032 <_raise_r+0x1e>
 800b02c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b030:	b94b      	cbnz	r3, 800b046 <_raise_r+0x32>
 800b032:	4620      	mov	r0, r4
 800b034:	f000 f830 	bl	800b098 <_getpid_r>
 800b038:	462a      	mov	r2, r5
 800b03a:	4601      	mov	r1, r0
 800b03c:	4620      	mov	r0, r4
 800b03e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b042:	f000 b817 	b.w	800b074 <_kill_r>
 800b046:	2b01      	cmp	r3, #1
 800b048:	d00a      	beq.n	800b060 <_raise_r+0x4c>
 800b04a:	1c59      	adds	r1, r3, #1
 800b04c:	d103      	bne.n	800b056 <_raise_r+0x42>
 800b04e:	2316      	movs	r3, #22
 800b050:	6003      	str	r3, [r0, #0]
 800b052:	2001      	movs	r0, #1
 800b054:	e7e7      	b.n	800b026 <_raise_r+0x12>
 800b056:	2400      	movs	r4, #0
 800b058:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b05c:	4628      	mov	r0, r5
 800b05e:	4798      	blx	r3
 800b060:	2000      	movs	r0, #0
 800b062:	e7e0      	b.n	800b026 <_raise_r+0x12>

0800b064 <raise>:
 800b064:	4b02      	ldr	r3, [pc, #8]	; (800b070 <raise+0xc>)
 800b066:	4601      	mov	r1, r0
 800b068:	6818      	ldr	r0, [r3, #0]
 800b06a:	f7ff bfd3 	b.w	800b014 <_raise_r>
 800b06e:	bf00      	nop
 800b070:	2000001c 	.word	0x2000001c

0800b074 <_kill_r>:
 800b074:	b538      	push	{r3, r4, r5, lr}
 800b076:	4d07      	ldr	r5, [pc, #28]	; (800b094 <_kill_r+0x20>)
 800b078:	2300      	movs	r3, #0
 800b07a:	4604      	mov	r4, r0
 800b07c:	4608      	mov	r0, r1
 800b07e:	4611      	mov	r1, r2
 800b080:	602b      	str	r3, [r5, #0]
 800b082:	f7f9 ff9a 	bl	8004fba <_kill>
 800b086:	1c43      	adds	r3, r0, #1
 800b088:	d102      	bne.n	800b090 <_kill_r+0x1c>
 800b08a:	682b      	ldr	r3, [r5, #0]
 800b08c:	b103      	cbz	r3, 800b090 <_kill_r+0x1c>
 800b08e:	6023      	str	r3, [r4, #0]
 800b090:	bd38      	pop	{r3, r4, r5, pc}
 800b092:	bf00      	nop
 800b094:	20000f1c 	.word	0x20000f1c

0800b098 <_getpid_r>:
 800b098:	f7f9 bf87 	b.w	8004faa <_getpid>

0800b09c <siprintf>:
 800b09c:	b40e      	push	{r1, r2, r3}
 800b09e:	b500      	push	{lr}
 800b0a0:	b09c      	sub	sp, #112	; 0x70
 800b0a2:	ab1d      	add	r3, sp, #116	; 0x74
 800b0a4:	9002      	str	r0, [sp, #8]
 800b0a6:	9006      	str	r0, [sp, #24]
 800b0a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b0ac:	4809      	ldr	r0, [pc, #36]	; (800b0d4 <siprintf+0x38>)
 800b0ae:	9107      	str	r1, [sp, #28]
 800b0b0:	9104      	str	r1, [sp, #16]
 800b0b2:	4909      	ldr	r1, [pc, #36]	; (800b0d8 <siprintf+0x3c>)
 800b0b4:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0b8:	9105      	str	r1, [sp, #20]
 800b0ba:	6800      	ldr	r0, [r0, #0]
 800b0bc:	9301      	str	r3, [sp, #4]
 800b0be:	a902      	add	r1, sp, #8
 800b0c0:	f000 f92a 	bl	800b318 <_svfiprintf_r>
 800b0c4:	9b02      	ldr	r3, [sp, #8]
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	701a      	strb	r2, [r3, #0]
 800b0ca:	b01c      	add	sp, #112	; 0x70
 800b0cc:	f85d eb04 	ldr.w	lr, [sp], #4
 800b0d0:	b003      	add	sp, #12
 800b0d2:	4770      	bx	lr
 800b0d4:	2000001c 	.word	0x2000001c
 800b0d8:	ffff0208 	.word	0xffff0208

0800b0dc <sbrk_aligned>:
 800b0dc:	b570      	push	{r4, r5, r6, lr}
 800b0de:	4e0e      	ldr	r6, [pc, #56]	; (800b118 <sbrk_aligned+0x3c>)
 800b0e0:	460c      	mov	r4, r1
 800b0e2:	6831      	ldr	r1, [r6, #0]
 800b0e4:	4605      	mov	r5, r0
 800b0e6:	b911      	cbnz	r1, 800b0ee <sbrk_aligned+0x12>
 800b0e8:	f000 fbaa 	bl	800b840 <_sbrk_r>
 800b0ec:	6030      	str	r0, [r6, #0]
 800b0ee:	4621      	mov	r1, r4
 800b0f0:	4628      	mov	r0, r5
 800b0f2:	f000 fba5 	bl	800b840 <_sbrk_r>
 800b0f6:	1c43      	adds	r3, r0, #1
 800b0f8:	d00a      	beq.n	800b110 <sbrk_aligned+0x34>
 800b0fa:	1cc4      	adds	r4, r0, #3
 800b0fc:	f024 0403 	bic.w	r4, r4, #3
 800b100:	42a0      	cmp	r0, r4
 800b102:	d007      	beq.n	800b114 <sbrk_aligned+0x38>
 800b104:	1a21      	subs	r1, r4, r0
 800b106:	4628      	mov	r0, r5
 800b108:	f000 fb9a 	bl	800b840 <_sbrk_r>
 800b10c:	3001      	adds	r0, #1
 800b10e:	d101      	bne.n	800b114 <sbrk_aligned+0x38>
 800b110:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b114:	4620      	mov	r0, r4
 800b116:	bd70      	pop	{r4, r5, r6, pc}
 800b118:	20000f18 	.word	0x20000f18

0800b11c <_malloc_r>:
 800b11c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b120:	1ccd      	adds	r5, r1, #3
 800b122:	f025 0503 	bic.w	r5, r5, #3
 800b126:	3508      	adds	r5, #8
 800b128:	2d0c      	cmp	r5, #12
 800b12a:	bf38      	it	cc
 800b12c:	250c      	movcc	r5, #12
 800b12e:	2d00      	cmp	r5, #0
 800b130:	4607      	mov	r7, r0
 800b132:	db01      	blt.n	800b138 <_malloc_r+0x1c>
 800b134:	42a9      	cmp	r1, r5
 800b136:	d905      	bls.n	800b144 <_malloc_r+0x28>
 800b138:	230c      	movs	r3, #12
 800b13a:	603b      	str	r3, [r7, #0]
 800b13c:	2600      	movs	r6, #0
 800b13e:	4630      	mov	r0, r6
 800b140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b144:	4e2e      	ldr	r6, [pc, #184]	; (800b200 <_malloc_r+0xe4>)
 800b146:	f000 fba7 	bl	800b898 <__malloc_lock>
 800b14a:	6833      	ldr	r3, [r6, #0]
 800b14c:	461c      	mov	r4, r3
 800b14e:	bb34      	cbnz	r4, 800b19e <_malloc_r+0x82>
 800b150:	4629      	mov	r1, r5
 800b152:	4638      	mov	r0, r7
 800b154:	f7ff ffc2 	bl	800b0dc <sbrk_aligned>
 800b158:	1c43      	adds	r3, r0, #1
 800b15a:	4604      	mov	r4, r0
 800b15c:	d14d      	bne.n	800b1fa <_malloc_r+0xde>
 800b15e:	6834      	ldr	r4, [r6, #0]
 800b160:	4626      	mov	r6, r4
 800b162:	2e00      	cmp	r6, #0
 800b164:	d140      	bne.n	800b1e8 <_malloc_r+0xcc>
 800b166:	6823      	ldr	r3, [r4, #0]
 800b168:	4631      	mov	r1, r6
 800b16a:	4638      	mov	r0, r7
 800b16c:	eb04 0803 	add.w	r8, r4, r3
 800b170:	f000 fb66 	bl	800b840 <_sbrk_r>
 800b174:	4580      	cmp	r8, r0
 800b176:	d13a      	bne.n	800b1ee <_malloc_r+0xd2>
 800b178:	6821      	ldr	r1, [r4, #0]
 800b17a:	3503      	adds	r5, #3
 800b17c:	1a6d      	subs	r5, r5, r1
 800b17e:	f025 0503 	bic.w	r5, r5, #3
 800b182:	3508      	adds	r5, #8
 800b184:	2d0c      	cmp	r5, #12
 800b186:	bf38      	it	cc
 800b188:	250c      	movcc	r5, #12
 800b18a:	4629      	mov	r1, r5
 800b18c:	4638      	mov	r0, r7
 800b18e:	f7ff ffa5 	bl	800b0dc <sbrk_aligned>
 800b192:	3001      	adds	r0, #1
 800b194:	d02b      	beq.n	800b1ee <_malloc_r+0xd2>
 800b196:	6823      	ldr	r3, [r4, #0]
 800b198:	442b      	add	r3, r5
 800b19a:	6023      	str	r3, [r4, #0]
 800b19c:	e00e      	b.n	800b1bc <_malloc_r+0xa0>
 800b19e:	6822      	ldr	r2, [r4, #0]
 800b1a0:	1b52      	subs	r2, r2, r5
 800b1a2:	d41e      	bmi.n	800b1e2 <_malloc_r+0xc6>
 800b1a4:	2a0b      	cmp	r2, #11
 800b1a6:	d916      	bls.n	800b1d6 <_malloc_r+0xba>
 800b1a8:	1961      	adds	r1, r4, r5
 800b1aa:	42a3      	cmp	r3, r4
 800b1ac:	6025      	str	r5, [r4, #0]
 800b1ae:	bf18      	it	ne
 800b1b0:	6059      	strne	r1, [r3, #4]
 800b1b2:	6863      	ldr	r3, [r4, #4]
 800b1b4:	bf08      	it	eq
 800b1b6:	6031      	streq	r1, [r6, #0]
 800b1b8:	5162      	str	r2, [r4, r5]
 800b1ba:	604b      	str	r3, [r1, #4]
 800b1bc:	4638      	mov	r0, r7
 800b1be:	f104 060b 	add.w	r6, r4, #11
 800b1c2:	f000 fb6f 	bl	800b8a4 <__malloc_unlock>
 800b1c6:	f026 0607 	bic.w	r6, r6, #7
 800b1ca:	1d23      	adds	r3, r4, #4
 800b1cc:	1af2      	subs	r2, r6, r3
 800b1ce:	d0b6      	beq.n	800b13e <_malloc_r+0x22>
 800b1d0:	1b9b      	subs	r3, r3, r6
 800b1d2:	50a3      	str	r3, [r4, r2]
 800b1d4:	e7b3      	b.n	800b13e <_malloc_r+0x22>
 800b1d6:	6862      	ldr	r2, [r4, #4]
 800b1d8:	42a3      	cmp	r3, r4
 800b1da:	bf0c      	ite	eq
 800b1dc:	6032      	streq	r2, [r6, #0]
 800b1de:	605a      	strne	r2, [r3, #4]
 800b1e0:	e7ec      	b.n	800b1bc <_malloc_r+0xa0>
 800b1e2:	4623      	mov	r3, r4
 800b1e4:	6864      	ldr	r4, [r4, #4]
 800b1e6:	e7b2      	b.n	800b14e <_malloc_r+0x32>
 800b1e8:	4634      	mov	r4, r6
 800b1ea:	6876      	ldr	r6, [r6, #4]
 800b1ec:	e7b9      	b.n	800b162 <_malloc_r+0x46>
 800b1ee:	230c      	movs	r3, #12
 800b1f0:	603b      	str	r3, [r7, #0]
 800b1f2:	4638      	mov	r0, r7
 800b1f4:	f000 fb56 	bl	800b8a4 <__malloc_unlock>
 800b1f8:	e7a1      	b.n	800b13e <_malloc_r+0x22>
 800b1fa:	6025      	str	r5, [r4, #0]
 800b1fc:	e7de      	b.n	800b1bc <_malloc_r+0xa0>
 800b1fe:	bf00      	nop
 800b200:	20000f14 	.word	0x20000f14

0800b204 <_realloc_r>:
 800b204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b208:	4680      	mov	r8, r0
 800b20a:	4614      	mov	r4, r2
 800b20c:	460e      	mov	r6, r1
 800b20e:	b921      	cbnz	r1, 800b21a <_realloc_r+0x16>
 800b210:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b214:	4611      	mov	r1, r2
 800b216:	f7ff bf81 	b.w	800b11c <_malloc_r>
 800b21a:	b92a      	cbnz	r2, 800b228 <_realloc_r+0x24>
 800b21c:	f000 fb48 	bl	800b8b0 <_free_r>
 800b220:	4625      	mov	r5, r4
 800b222:	4628      	mov	r0, r5
 800b224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b228:	f000 fb8e 	bl	800b948 <_malloc_usable_size_r>
 800b22c:	4284      	cmp	r4, r0
 800b22e:	4607      	mov	r7, r0
 800b230:	d802      	bhi.n	800b238 <_realloc_r+0x34>
 800b232:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b236:	d812      	bhi.n	800b25e <_realloc_r+0x5a>
 800b238:	4621      	mov	r1, r4
 800b23a:	4640      	mov	r0, r8
 800b23c:	f7ff ff6e 	bl	800b11c <_malloc_r>
 800b240:	4605      	mov	r5, r0
 800b242:	2800      	cmp	r0, #0
 800b244:	d0ed      	beq.n	800b222 <_realloc_r+0x1e>
 800b246:	42bc      	cmp	r4, r7
 800b248:	4622      	mov	r2, r4
 800b24a:	4631      	mov	r1, r6
 800b24c:	bf28      	it	cs
 800b24e:	463a      	movcs	r2, r7
 800b250:	f7ff fec2 	bl	800afd8 <memcpy>
 800b254:	4631      	mov	r1, r6
 800b256:	4640      	mov	r0, r8
 800b258:	f000 fb2a 	bl	800b8b0 <_free_r>
 800b25c:	e7e1      	b.n	800b222 <_realloc_r+0x1e>
 800b25e:	4635      	mov	r5, r6
 800b260:	e7df      	b.n	800b222 <_realloc_r+0x1e>

0800b262 <__ssputs_r>:
 800b262:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b266:	688e      	ldr	r6, [r1, #8]
 800b268:	429e      	cmp	r6, r3
 800b26a:	4682      	mov	sl, r0
 800b26c:	460c      	mov	r4, r1
 800b26e:	4690      	mov	r8, r2
 800b270:	461f      	mov	r7, r3
 800b272:	d838      	bhi.n	800b2e6 <__ssputs_r+0x84>
 800b274:	898a      	ldrh	r2, [r1, #12]
 800b276:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b27a:	d032      	beq.n	800b2e2 <__ssputs_r+0x80>
 800b27c:	6825      	ldr	r5, [r4, #0]
 800b27e:	6909      	ldr	r1, [r1, #16]
 800b280:	eba5 0901 	sub.w	r9, r5, r1
 800b284:	6965      	ldr	r5, [r4, #20]
 800b286:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b28a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b28e:	3301      	adds	r3, #1
 800b290:	444b      	add	r3, r9
 800b292:	106d      	asrs	r5, r5, #1
 800b294:	429d      	cmp	r5, r3
 800b296:	bf38      	it	cc
 800b298:	461d      	movcc	r5, r3
 800b29a:	0553      	lsls	r3, r2, #21
 800b29c:	d531      	bpl.n	800b302 <__ssputs_r+0xa0>
 800b29e:	4629      	mov	r1, r5
 800b2a0:	f7ff ff3c 	bl	800b11c <_malloc_r>
 800b2a4:	4606      	mov	r6, r0
 800b2a6:	b950      	cbnz	r0, 800b2be <__ssputs_r+0x5c>
 800b2a8:	230c      	movs	r3, #12
 800b2aa:	f8ca 3000 	str.w	r3, [sl]
 800b2ae:	89a3      	ldrh	r3, [r4, #12]
 800b2b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2b4:	81a3      	strh	r3, [r4, #12]
 800b2b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b2ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2be:	6921      	ldr	r1, [r4, #16]
 800b2c0:	464a      	mov	r2, r9
 800b2c2:	f7ff fe89 	bl	800afd8 <memcpy>
 800b2c6:	89a3      	ldrh	r3, [r4, #12]
 800b2c8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b2cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2d0:	81a3      	strh	r3, [r4, #12]
 800b2d2:	6126      	str	r6, [r4, #16]
 800b2d4:	6165      	str	r5, [r4, #20]
 800b2d6:	444e      	add	r6, r9
 800b2d8:	eba5 0509 	sub.w	r5, r5, r9
 800b2dc:	6026      	str	r6, [r4, #0]
 800b2de:	60a5      	str	r5, [r4, #8]
 800b2e0:	463e      	mov	r6, r7
 800b2e2:	42be      	cmp	r6, r7
 800b2e4:	d900      	bls.n	800b2e8 <__ssputs_r+0x86>
 800b2e6:	463e      	mov	r6, r7
 800b2e8:	6820      	ldr	r0, [r4, #0]
 800b2ea:	4632      	mov	r2, r6
 800b2ec:	4641      	mov	r1, r8
 800b2ee:	f000 fab9 	bl	800b864 <memmove>
 800b2f2:	68a3      	ldr	r3, [r4, #8]
 800b2f4:	1b9b      	subs	r3, r3, r6
 800b2f6:	60a3      	str	r3, [r4, #8]
 800b2f8:	6823      	ldr	r3, [r4, #0]
 800b2fa:	4433      	add	r3, r6
 800b2fc:	6023      	str	r3, [r4, #0]
 800b2fe:	2000      	movs	r0, #0
 800b300:	e7db      	b.n	800b2ba <__ssputs_r+0x58>
 800b302:	462a      	mov	r2, r5
 800b304:	f7ff ff7e 	bl	800b204 <_realloc_r>
 800b308:	4606      	mov	r6, r0
 800b30a:	2800      	cmp	r0, #0
 800b30c:	d1e1      	bne.n	800b2d2 <__ssputs_r+0x70>
 800b30e:	6921      	ldr	r1, [r4, #16]
 800b310:	4650      	mov	r0, sl
 800b312:	f000 facd 	bl	800b8b0 <_free_r>
 800b316:	e7c7      	b.n	800b2a8 <__ssputs_r+0x46>

0800b318 <_svfiprintf_r>:
 800b318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b31c:	4698      	mov	r8, r3
 800b31e:	898b      	ldrh	r3, [r1, #12]
 800b320:	061b      	lsls	r3, r3, #24
 800b322:	b09d      	sub	sp, #116	; 0x74
 800b324:	4607      	mov	r7, r0
 800b326:	460d      	mov	r5, r1
 800b328:	4614      	mov	r4, r2
 800b32a:	d50e      	bpl.n	800b34a <_svfiprintf_r+0x32>
 800b32c:	690b      	ldr	r3, [r1, #16]
 800b32e:	b963      	cbnz	r3, 800b34a <_svfiprintf_r+0x32>
 800b330:	2140      	movs	r1, #64	; 0x40
 800b332:	f7ff fef3 	bl	800b11c <_malloc_r>
 800b336:	6028      	str	r0, [r5, #0]
 800b338:	6128      	str	r0, [r5, #16]
 800b33a:	b920      	cbnz	r0, 800b346 <_svfiprintf_r+0x2e>
 800b33c:	230c      	movs	r3, #12
 800b33e:	603b      	str	r3, [r7, #0]
 800b340:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b344:	e0d1      	b.n	800b4ea <_svfiprintf_r+0x1d2>
 800b346:	2340      	movs	r3, #64	; 0x40
 800b348:	616b      	str	r3, [r5, #20]
 800b34a:	2300      	movs	r3, #0
 800b34c:	9309      	str	r3, [sp, #36]	; 0x24
 800b34e:	2320      	movs	r3, #32
 800b350:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b354:	f8cd 800c 	str.w	r8, [sp, #12]
 800b358:	2330      	movs	r3, #48	; 0x30
 800b35a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b504 <_svfiprintf_r+0x1ec>
 800b35e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b362:	f04f 0901 	mov.w	r9, #1
 800b366:	4623      	mov	r3, r4
 800b368:	469a      	mov	sl, r3
 800b36a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b36e:	b10a      	cbz	r2, 800b374 <_svfiprintf_r+0x5c>
 800b370:	2a25      	cmp	r2, #37	; 0x25
 800b372:	d1f9      	bne.n	800b368 <_svfiprintf_r+0x50>
 800b374:	ebba 0b04 	subs.w	fp, sl, r4
 800b378:	d00b      	beq.n	800b392 <_svfiprintf_r+0x7a>
 800b37a:	465b      	mov	r3, fp
 800b37c:	4622      	mov	r2, r4
 800b37e:	4629      	mov	r1, r5
 800b380:	4638      	mov	r0, r7
 800b382:	f7ff ff6e 	bl	800b262 <__ssputs_r>
 800b386:	3001      	adds	r0, #1
 800b388:	f000 80aa 	beq.w	800b4e0 <_svfiprintf_r+0x1c8>
 800b38c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b38e:	445a      	add	r2, fp
 800b390:	9209      	str	r2, [sp, #36]	; 0x24
 800b392:	f89a 3000 	ldrb.w	r3, [sl]
 800b396:	2b00      	cmp	r3, #0
 800b398:	f000 80a2 	beq.w	800b4e0 <_svfiprintf_r+0x1c8>
 800b39c:	2300      	movs	r3, #0
 800b39e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b3a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b3a6:	f10a 0a01 	add.w	sl, sl, #1
 800b3aa:	9304      	str	r3, [sp, #16]
 800b3ac:	9307      	str	r3, [sp, #28]
 800b3ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b3b2:	931a      	str	r3, [sp, #104]	; 0x68
 800b3b4:	4654      	mov	r4, sl
 800b3b6:	2205      	movs	r2, #5
 800b3b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3bc:	4851      	ldr	r0, [pc, #324]	; (800b504 <_svfiprintf_r+0x1ec>)
 800b3be:	f7f4 ff0f 	bl	80001e0 <memchr>
 800b3c2:	9a04      	ldr	r2, [sp, #16]
 800b3c4:	b9d8      	cbnz	r0, 800b3fe <_svfiprintf_r+0xe6>
 800b3c6:	06d0      	lsls	r0, r2, #27
 800b3c8:	bf44      	itt	mi
 800b3ca:	2320      	movmi	r3, #32
 800b3cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b3d0:	0711      	lsls	r1, r2, #28
 800b3d2:	bf44      	itt	mi
 800b3d4:	232b      	movmi	r3, #43	; 0x2b
 800b3d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b3da:	f89a 3000 	ldrb.w	r3, [sl]
 800b3de:	2b2a      	cmp	r3, #42	; 0x2a
 800b3e0:	d015      	beq.n	800b40e <_svfiprintf_r+0xf6>
 800b3e2:	9a07      	ldr	r2, [sp, #28]
 800b3e4:	4654      	mov	r4, sl
 800b3e6:	2000      	movs	r0, #0
 800b3e8:	f04f 0c0a 	mov.w	ip, #10
 800b3ec:	4621      	mov	r1, r4
 800b3ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b3f2:	3b30      	subs	r3, #48	; 0x30
 800b3f4:	2b09      	cmp	r3, #9
 800b3f6:	d94e      	bls.n	800b496 <_svfiprintf_r+0x17e>
 800b3f8:	b1b0      	cbz	r0, 800b428 <_svfiprintf_r+0x110>
 800b3fa:	9207      	str	r2, [sp, #28]
 800b3fc:	e014      	b.n	800b428 <_svfiprintf_r+0x110>
 800b3fe:	eba0 0308 	sub.w	r3, r0, r8
 800b402:	fa09 f303 	lsl.w	r3, r9, r3
 800b406:	4313      	orrs	r3, r2
 800b408:	9304      	str	r3, [sp, #16]
 800b40a:	46a2      	mov	sl, r4
 800b40c:	e7d2      	b.n	800b3b4 <_svfiprintf_r+0x9c>
 800b40e:	9b03      	ldr	r3, [sp, #12]
 800b410:	1d19      	adds	r1, r3, #4
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	9103      	str	r1, [sp, #12]
 800b416:	2b00      	cmp	r3, #0
 800b418:	bfbb      	ittet	lt
 800b41a:	425b      	neglt	r3, r3
 800b41c:	f042 0202 	orrlt.w	r2, r2, #2
 800b420:	9307      	strge	r3, [sp, #28]
 800b422:	9307      	strlt	r3, [sp, #28]
 800b424:	bfb8      	it	lt
 800b426:	9204      	strlt	r2, [sp, #16]
 800b428:	7823      	ldrb	r3, [r4, #0]
 800b42a:	2b2e      	cmp	r3, #46	; 0x2e
 800b42c:	d10c      	bne.n	800b448 <_svfiprintf_r+0x130>
 800b42e:	7863      	ldrb	r3, [r4, #1]
 800b430:	2b2a      	cmp	r3, #42	; 0x2a
 800b432:	d135      	bne.n	800b4a0 <_svfiprintf_r+0x188>
 800b434:	9b03      	ldr	r3, [sp, #12]
 800b436:	1d1a      	adds	r2, r3, #4
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	9203      	str	r2, [sp, #12]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	bfb8      	it	lt
 800b440:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b444:	3402      	adds	r4, #2
 800b446:	9305      	str	r3, [sp, #20]
 800b448:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b514 <_svfiprintf_r+0x1fc>
 800b44c:	7821      	ldrb	r1, [r4, #0]
 800b44e:	2203      	movs	r2, #3
 800b450:	4650      	mov	r0, sl
 800b452:	f7f4 fec5 	bl	80001e0 <memchr>
 800b456:	b140      	cbz	r0, 800b46a <_svfiprintf_r+0x152>
 800b458:	2340      	movs	r3, #64	; 0x40
 800b45a:	eba0 000a 	sub.w	r0, r0, sl
 800b45e:	fa03 f000 	lsl.w	r0, r3, r0
 800b462:	9b04      	ldr	r3, [sp, #16]
 800b464:	4303      	orrs	r3, r0
 800b466:	3401      	adds	r4, #1
 800b468:	9304      	str	r3, [sp, #16]
 800b46a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b46e:	4826      	ldr	r0, [pc, #152]	; (800b508 <_svfiprintf_r+0x1f0>)
 800b470:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b474:	2206      	movs	r2, #6
 800b476:	f7f4 feb3 	bl	80001e0 <memchr>
 800b47a:	2800      	cmp	r0, #0
 800b47c:	d038      	beq.n	800b4f0 <_svfiprintf_r+0x1d8>
 800b47e:	4b23      	ldr	r3, [pc, #140]	; (800b50c <_svfiprintf_r+0x1f4>)
 800b480:	bb1b      	cbnz	r3, 800b4ca <_svfiprintf_r+0x1b2>
 800b482:	9b03      	ldr	r3, [sp, #12]
 800b484:	3307      	adds	r3, #7
 800b486:	f023 0307 	bic.w	r3, r3, #7
 800b48a:	3308      	adds	r3, #8
 800b48c:	9303      	str	r3, [sp, #12]
 800b48e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b490:	4433      	add	r3, r6
 800b492:	9309      	str	r3, [sp, #36]	; 0x24
 800b494:	e767      	b.n	800b366 <_svfiprintf_r+0x4e>
 800b496:	fb0c 3202 	mla	r2, ip, r2, r3
 800b49a:	460c      	mov	r4, r1
 800b49c:	2001      	movs	r0, #1
 800b49e:	e7a5      	b.n	800b3ec <_svfiprintf_r+0xd4>
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	3401      	adds	r4, #1
 800b4a4:	9305      	str	r3, [sp, #20]
 800b4a6:	4619      	mov	r1, r3
 800b4a8:	f04f 0c0a 	mov.w	ip, #10
 800b4ac:	4620      	mov	r0, r4
 800b4ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b4b2:	3a30      	subs	r2, #48	; 0x30
 800b4b4:	2a09      	cmp	r2, #9
 800b4b6:	d903      	bls.n	800b4c0 <_svfiprintf_r+0x1a8>
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d0c5      	beq.n	800b448 <_svfiprintf_r+0x130>
 800b4bc:	9105      	str	r1, [sp, #20]
 800b4be:	e7c3      	b.n	800b448 <_svfiprintf_r+0x130>
 800b4c0:	fb0c 2101 	mla	r1, ip, r1, r2
 800b4c4:	4604      	mov	r4, r0
 800b4c6:	2301      	movs	r3, #1
 800b4c8:	e7f0      	b.n	800b4ac <_svfiprintf_r+0x194>
 800b4ca:	ab03      	add	r3, sp, #12
 800b4cc:	9300      	str	r3, [sp, #0]
 800b4ce:	462a      	mov	r2, r5
 800b4d0:	4b0f      	ldr	r3, [pc, #60]	; (800b510 <_svfiprintf_r+0x1f8>)
 800b4d2:	a904      	add	r1, sp, #16
 800b4d4:	4638      	mov	r0, r7
 800b4d6:	f3af 8000 	nop.w
 800b4da:	1c42      	adds	r2, r0, #1
 800b4dc:	4606      	mov	r6, r0
 800b4de:	d1d6      	bne.n	800b48e <_svfiprintf_r+0x176>
 800b4e0:	89ab      	ldrh	r3, [r5, #12]
 800b4e2:	065b      	lsls	r3, r3, #25
 800b4e4:	f53f af2c 	bmi.w	800b340 <_svfiprintf_r+0x28>
 800b4e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b4ea:	b01d      	add	sp, #116	; 0x74
 800b4ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4f0:	ab03      	add	r3, sp, #12
 800b4f2:	9300      	str	r3, [sp, #0]
 800b4f4:	462a      	mov	r2, r5
 800b4f6:	4b06      	ldr	r3, [pc, #24]	; (800b510 <_svfiprintf_r+0x1f8>)
 800b4f8:	a904      	add	r1, sp, #16
 800b4fa:	4638      	mov	r0, r7
 800b4fc:	f000 f87a 	bl	800b5f4 <_printf_i>
 800b500:	e7eb      	b.n	800b4da <_svfiprintf_r+0x1c2>
 800b502:	bf00      	nop
 800b504:	0800bc48 	.word	0x0800bc48
 800b508:	0800bc52 	.word	0x0800bc52
 800b50c:	00000000 	.word	0x00000000
 800b510:	0800b263 	.word	0x0800b263
 800b514:	0800bc4e 	.word	0x0800bc4e

0800b518 <_printf_common>:
 800b518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b51c:	4616      	mov	r6, r2
 800b51e:	4699      	mov	r9, r3
 800b520:	688a      	ldr	r2, [r1, #8]
 800b522:	690b      	ldr	r3, [r1, #16]
 800b524:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b528:	4293      	cmp	r3, r2
 800b52a:	bfb8      	it	lt
 800b52c:	4613      	movlt	r3, r2
 800b52e:	6033      	str	r3, [r6, #0]
 800b530:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b534:	4607      	mov	r7, r0
 800b536:	460c      	mov	r4, r1
 800b538:	b10a      	cbz	r2, 800b53e <_printf_common+0x26>
 800b53a:	3301      	adds	r3, #1
 800b53c:	6033      	str	r3, [r6, #0]
 800b53e:	6823      	ldr	r3, [r4, #0]
 800b540:	0699      	lsls	r1, r3, #26
 800b542:	bf42      	ittt	mi
 800b544:	6833      	ldrmi	r3, [r6, #0]
 800b546:	3302      	addmi	r3, #2
 800b548:	6033      	strmi	r3, [r6, #0]
 800b54a:	6825      	ldr	r5, [r4, #0]
 800b54c:	f015 0506 	ands.w	r5, r5, #6
 800b550:	d106      	bne.n	800b560 <_printf_common+0x48>
 800b552:	f104 0a19 	add.w	sl, r4, #25
 800b556:	68e3      	ldr	r3, [r4, #12]
 800b558:	6832      	ldr	r2, [r6, #0]
 800b55a:	1a9b      	subs	r3, r3, r2
 800b55c:	42ab      	cmp	r3, r5
 800b55e:	dc26      	bgt.n	800b5ae <_printf_common+0x96>
 800b560:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b564:	1e13      	subs	r3, r2, #0
 800b566:	6822      	ldr	r2, [r4, #0]
 800b568:	bf18      	it	ne
 800b56a:	2301      	movne	r3, #1
 800b56c:	0692      	lsls	r2, r2, #26
 800b56e:	d42b      	bmi.n	800b5c8 <_printf_common+0xb0>
 800b570:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b574:	4649      	mov	r1, r9
 800b576:	4638      	mov	r0, r7
 800b578:	47c0      	blx	r8
 800b57a:	3001      	adds	r0, #1
 800b57c:	d01e      	beq.n	800b5bc <_printf_common+0xa4>
 800b57e:	6823      	ldr	r3, [r4, #0]
 800b580:	68e5      	ldr	r5, [r4, #12]
 800b582:	6832      	ldr	r2, [r6, #0]
 800b584:	f003 0306 	and.w	r3, r3, #6
 800b588:	2b04      	cmp	r3, #4
 800b58a:	bf08      	it	eq
 800b58c:	1aad      	subeq	r5, r5, r2
 800b58e:	68a3      	ldr	r3, [r4, #8]
 800b590:	6922      	ldr	r2, [r4, #16]
 800b592:	bf0c      	ite	eq
 800b594:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b598:	2500      	movne	r5, #0
 800b59a:	4293      	cmp	r3, r2
 800b59c:	bfc4      	itt	gt
 800b59e:	1a9b      	subgt	r3, r3, r2
 800b5a0:	18ed      	addgt	r5, r5, r3
 800b5a2:	2600      	movs	r6, #0
 800b5a4:	341a      	adds	r4, #26
 800b5a6:	42b5      	cmp	r5, r6
 800b5a8:	d11a      	bne.n	800b5e0 <_printf_common+0xc8>
 800b5aa:	2000      	movs	r0, #0
 800b5ac:	e008      	b.n	800b5c0 <_printf_common+0xa8>
 800b5ae:	2301      	movs	r3, #1
 800b5b0:	4652      	mov	r2, sl
 800b5b2:	4649      	mov	r1, r9
 800b5b4:	4638      	mov	r0, r7
 800b5b6:	47c0      	blx	r8
 800b5b8:	3001      	adds	r0, #1
 800b5ba:	d103      	bne.n	800b5c4 <_printf_common+0xac>
 800b5bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b5c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5c4:	3501      	adds	r5, #1
 800b5c6:	e7c6      	b.n	800b556 <_printf_common+0x3e>
 800b5c8:	18e1      	adds	r1, r4, r3
 800b5ca:	1c5a      	adds	r2, r3, #1
 800b5cc:	2030      	movs	r0, #48	; 0x30
 800b5ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b5d2:	4422      	add	r2, r4
 800b5d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b5d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b5dc:	3302      	adds	r3, #2
 800b5de:	e7c7      	b.n	800b570 <_printf_common+0x58>
 800b5e0:	2301      	movs	r3, #1
 800b5e2:	4622      	mov	r2, r4
 800b5e4:	4649      	mov	r1, r9
 800b5e6:	4638      	mov	r0, r7
 800b5e8:	47c0      	blx	r8
 800b5ea:	3001      	adds	r0, #1
 800b5ec:	d0e6      	beq.n	800b5bc <_printf_common+0xa4>
 800b5ee:	3601      	adds	r6, #1
 800b5f0:	e7d9      	b.n	800b5a6 <_printf_common+0x8e>
	...

0800b5f4 <_printf_i>:
 800b5f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b5f8:	7e0f      	ldrb	r7, [r1, #24]
 800b5fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b5fc:	2f78      	cmp	r7, #120	; 0x78
 800b5fe:	4691      	mov	r9, r2
 800b600:	4680      	mov	r8, r0
 800b602:	460c      	mov	r4, r1
 800b604:	469a      	mov	sl, r3
 800b606:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b60a:	d807      	bhi.n	800b61c <_printf_i+0x28>
 800b60c:	2f62      	cmp	r7, #98	; 0x62
 800b60e:	d80a      	bhi.n	800b626 <_printf_i+0x32>
 800b610:	2f00      	cmp	r7, #0
 800b612:	f000 80d8 	beq.w	800b7c6 <_printf_i+0x1d2>
 800b616:	2f58      	cmp	r7, #88	; 0x58
 800b618:	f000 80a3 	beq.w	800b762 <_printf_i+0x16e>
 800b61c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b620:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b624:	e03a      	b.n	800b69c <_printf_i+0xa8>
 800b626:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b62a:	2b15      	cmp	r3, #21
 800b62c:	d8f6      	bhi.n	800b61c <_printf_i+0x28>
 800b62e:	a101      	add	r1, pc, #4	; (adr r1, 800b634 <_printf_i+0x40>)
 800b630:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b634:	0800b68d 	.word	0x0800b68d
 800b638:	0800b6a1 	.word	0x0800b6a1
 800b63c:	0800b61d 	.word	0x0800b61d
 800b640:	0800b61d 	.word	0x0800b61d
 800b644:	0800b61d 	.word	0x0800b61d
 800b648:	0800b61d 	.word	0x0800b61d
 800b64c:	0800b6a1 	.word	0x0800b6a1
 800b650:	0800b61d 	.word	0x0800b61d
 800b654:	0800b61d 	.word	0x0800b61d
 800b658:	0800b61d 	.word	0x0800b61d
 800b65c:	0800b61d 	.word	0x0800b61d
 800b660:	0800b7ad 	.word	0x0800b7ad
 800b664:	0800b6d1 	.word	0x0800b6d1
 800b668:	0800b78f 	.word	0x0800b78f
 800b66c:	0800b61d 	.word	0x0800b61d
 800b670:	0800b61d 	.word	0x0800b61d
 800b674:	0800b7cf 	.word	0x0800b7cf
 800b678:	0800b61d 	.word	0x0800b61d
 800b67c:	0800b6d1 	.word	0x0800b6d1
 800b680:	0800b61d 	.word	0x0800b61d
 800b684:	0800b61d 	.word	0x0800b61d
 800b688:	0800b797 	.word	0x0800b797
 800b68c:	682b      	ldr	r3, [r5, #0]
 800b68e:	1d1a      	adds	r2, r3, #4
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	602a      	str	r2, [r5, #0]
 800b694:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b698:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b69c:	2301      	movs	r3, #1
 800b69e:	e0a3      	b.n	800b7e8 <_printf_i+0x1f4>
 800b6a0:	6820      	ldr	r0, [r4, #0]
 800b6a2:	6829      	ldr	r1, [r5, #0]
 800b6a4:	0606      	lsls	r6, r0, #24
 800b6a6:	f101 0304 	add.w	r3, r1, #4
 800b6aa:	d50a      	bpl.n	800b6c2 <_printf_i+0xce>
 800b6ac:	680e      	ldr	r6, [r1, #0]
 800b6ae:	602b      	str	r3, [r5, #0]
 800b6b0:	2e00      	cmp	r6, #0
 800b6b2:	da03      	bge.n	800b6bc <_printf_i+0xc8>
 800b6b4:	232d      	movs	r3, #45	; 0x2d
 800b6b6:	4276      	negs	r6, r6
 800b6b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b6bc:	485e      	ldr	r0, [pc, #376]	; (800b838 <_printf_i+0x244>)
 800b6be:	230a      	movs	r3, #10
 800b6c0:	e019      	b.n	800b6f6 <_printf_i+0x102>
 800b6c2:	680e      	ldr	r6, [r1, #0]
 800b6c4:	602b      	str	r3, [r5, #0]
 800b6c6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b6ca:	bf18      	it	ne
 800b6cc:	b236      	sxthne	r6, r6
 800b6ce:	e7ef      	b.n	800b6b0 <_printf_i+0xbc>
 800b6d0:	682b      	ldr	r3, [r5, #0]
 800b6d2:	6820      	ldr	r0, [r4, #0]
 800b6d4:	1d19      	adds	r1, r3, #4
 800b6d6:	6029      	str	r1, [r5, #0]
 800b6d8:	0601      	lsls	r1, r0, #24
 800b6da:	d501      	bpl.n	800b6e0 <_printf_i+0xec>
 800b6dc:	681e      	ldr	r6, [r3, #0]
 800b6de:	e002      	b.n	800b6e6 <_printf_i+0xf2>
 800b6e0:	0646      	lsls	r6, r0, #25
 800b6e2:	d5fb      	bpl.n	800b6dc <_printf_i+0xe8>
 800b6e4:	881e      	ldrh	r6, [r3, #0]
 800b6e6:	4854      	ldr	r0, [pc, #336]	; (800b838 <_printf_i+0x244>)
 800b6e8:	2f6f      	cmp	r7, #111	; 0x6f
 800b6ea:	bf0c      	ite	eq
 800b6ec:	2308      	moveq	r3, #8
 800b6ee:	230a      	movne	r3, #10
 800b6f0:	2100      	movs	r1, #0
 800b6f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b6f6:	6865      	ldr	r5, [r4, #4]
 800b6f8:	60a5      	str	r5, [r4, #8]
 800b6fa:	2d00      	cmp	r5, #0
 800b6fc:	bfa2      	ittt	ge
 800b6fe:	6821      	ldrge	r1, [r4, #0]
 800b700:	f021 0104 	bicge.w	r1, r1, #4
 800b704:	6021      	strge	r1, [r4, #0]
 800b706:	b90e      	cbnz	r6, 800b70c <_printf_i+0x118>
 800b708:	2d00      	cmp	r5, #0
 800b70a:	d04d      	beq.n	800b7a8 <_printf_i+0x1b4>
 800b70c:	4615      	mov	r5, r2
 800b70e:	fbb6 f1f3 	udiv	r1, r6, r3
 800b712:	fb03 6711 	mls	r7, r3, r1, r6
 800b716:	5dc7      	ldrb	r7, [r0, r7]
 800b718:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b71c:	4637      	mov	r7, r6
 800b71e:	42bb      	cmp	r3, r7
 800b720:	460e      	mov	r6, r1
 800b722:	d9f4      	bls.n	800b70e <_printf_i+0x11a>
 800b724:	2b08      	cmp	r3, #8
 800b726:	d10b      	bne.n	800b740 <_printf_i+0x14c>
 800b728:	6823      	ldr	r3, [r4, #0]
 800b72a:	07de      	lsls	r6, r3, #31
 800b72c:	d508      	bpl.n	800b740 <_printf_i+0x14c>
 800b72e:	6923      	ldr	r3, [r4, #16]
 800b730:	6861      	ldr	r1, [r4, #4]
 800b732:	4299      	cmp	r1, r3
 800b734:	bfde      	ittt	le
 800b736:	2330      	movle	r3, #48	; 0x30
 800b738:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b73c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b740:	1b52      	subs	r2, r2, r5
 800b742:	6122      	str	r2, [r4, #16]
 800b744:	f8cd a000 	str.w	sl, [sp]
 800b748:	464b      	mov	r3, r9
 800b74a:	aa03      	add	r2, sp, #12
 800b74c:	4621      	mov	r1, r4
 800b74e:	4640      	mov	r0, r8
 800b750:	f7ff fee2 	bl	800b518 <_printf_common>
 800b754:	3001      	adds	r0, #1
 800b756:	d14c      	bne.n	800b7f2 <_printf_i+0x1fe>
 800b758:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b75c:	b004      	add	sp, #16
 800b75e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b762:	4835      	ldr	r0, [pc, #212]	; (800b838 <_printf_i+0x244>)
 800b764:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b768:	6829      	ldr	r1, [r5, #0]
 800b76a:	6823      	ldr	r3, [r4, #0]
 800b76c:	f851 6b04 	ldr.w	r6, [r1], #4
 800b770:	6029      	str	r1, [r5, #0]
 800b772:	061d      	lsls	r5, r3, #24
 800b774:	d514      	bpl.n	800b7a0 <_printf_i+0x1ac>
 800b776:	07df      	lsls	r7, r3, #31
 800b778:	bf44      	itt	mi
 800b77a:	f043 0320 	orrmi.w	r3, r3, #32
 800b77e:	6023      	strmi	r3, [r4, #0]
 800b780:	b91e      	cbnz	r6, 800b78a <_printf_i+0x196>
 800b782:	6823      	ldr	r3, [r4, #0]
 800b784:	f023 0320 	bic.w	r3, r3, #32
 800b788:	6023      	str	r3, [r4, #0]
 800b78a:	2310      	movs	r3, #16
 800b78c:	e7b0      	b.n	800b6f0 <_printf_i+0xfc>
 800b78e:	6823      	ldr	r3, [r4, #0]
 800b790:	f043 0320 	orr.w	r3, r3, #32
 800b794:	6023      	str	r3, [r4, #0]
 800b796:	2378      	movs	r3, #120	; 0x78
 800b798:	4828      	ldr	r0, [pc, #160]	; (800b83c <_printf_i+0x248>)
 800b79a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b79e:	e7e3      	b.n	800b768 <_printf_i+0x174>
 800b7a0:	0659      	lsls	r1, r3, #25
 800b7a2:	bf48      	it	mi
 800b7a4:	b2b6      	uxthmi	r6, r6
 800b7a6:	e7e6      	b.n	800b776 <_printf_i+0x182>
 800b7a8:	4615      	mov	r5, r2
 800b7aa:	e7bb      	b.n	800b724 <_printf_i+0x130>
 800b7ac:	682b      	ldr	r3, [r5, #0]
 800b7ae:	6826      	ldr	r6, [r4, #0]
 800b7b0:	6961      	ldr	r1, [r4, #20]
 800b7b2:	1d18      	adds	r0, r3, #4
 800b7b4:	6028      	str	r0, [r5, #0]
 800b7b6:	0635      	lsls	r5, r6, #24
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	d501      	bpl.n	800b7c0 <_printf_i+0x1cc>
 800b7bc:	6019      	str	r1, [r3, #0]
 800b7be:	e002      	b.n	800b7c6 <_printf_i+0x1d2>
 800b7c0:	0670      	lsls	r0, r6, #25
 800b7c2:	d5fb      	bpl.n	800b7bc <_printf_i+0x1c8>
 800b7c4:	8019      	strh	r1, [r3, #0]
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	6123      	str	r3, [r4, #16]
 800b7ca:	4615      	mov	r5, r2
 800b7cc:	e7ba      	b.n	800b744 <_printf_i+0x150>
 800b7ce:	682b      	ldr	r3, [r5, #0]
 800b7d0:	1d1a      	adds	r2, r3, #4
 800b7d2:	602a      	str	r2, [r5, #0]
 800b7d4:	681d      	ldr	r5, [r3, #0]
 800b7d6:	6862      	ldr	r2, [r4, #4]
 800b7d8:	2100      	movs	r1, #0
 800b7da:	4628      	mov	r0, r5
 800b7dc:	f7f4 fd00 	bl	80001e0 <memchr>
 800b7e0:	b108      	cbz	r0, 800b7e6 <_printf_i+0x1f2>
 800b7e2:	1b40      	subs	r0, r0, r5
 800b7e4:	6060      	str	r0, [r4, #4]
 800b7e6:	6863      	ldr	r3, [r4, #4]
 800b7e8:	6123      	str	r3, [r4, #16]
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b7f0:	e7a8      	b.n	800b744 <_printf_i+0x150>
 800b7f2:	6923      	ldr	r3, [r4, #16]
 800b7f4:	462a      	mov	r2, r5
 800b7f6:	4649      	mov	r1, r9
 800b7f8:	4640      	mov	r0, r8
 800b7fa:	47d0      	blx	sl
 800b7fc:	3001      	adds	r0, #1
 800b7fe:	d0ab      	beq.n	800b758 <_printf_i+0x164>
 800b800:	6823      	ldr	r3, [r4, #0]
 800b802:	079b      	lsls	r3, r3, #30
 800b804:	d413      	bmi.n	800b82e <_printf_i+0x23a>
 800b806:	68e0      	ldr	r0, [r4, #12]
 800b808:	9b03      	ldr	r3, [sp, #12]
 800b80a:	4298      	cmp	r0, r3
 800b80c:	bfb8      	it	lt
 800b80e:	4618      	movlt	r0, r3
 800b810:	e7a4      	b.n	800b75c <_printf_i+0x168>
 800b812:	2301      	movs	r3, #1
 800b814:	4632      	mov	r2, r6
 800b816:	4649      	mov	r1, r9
 800b818:	4640      	mov	r0, r8
 800b81a:	47d0      	blx	sl
 800b81c:	3001      	adds	r0, #1
 800b81e:	d09b      	beq.n	800b758 <_printf_i+0x164>
 800b820:	3501      	adds	r5, #1
 800b822:	68e3      	ldr	r3, [r4, #12]
 800b824:	9903      	ldr	r1, [sp, #12]
 800b826:	1a5b      	subs	r3, r3, r1
 800b828:	42ab      	cmp	r3, r5
 800b82a:	dcf2      	bgt.n	800b812 <_printf_i+0x21e>
 800b82c:	e7eb      	b.n	800b806 <_printf_i+0x212>
 800b82e:	2500      	movs	r5, #0
 800b830:	f104 0619 	add.w	r6, r4, #25
 800b834:	e7f5      	b.n	800b822 <_printf_i+0x22e>
 800b836:	bf00      	nop
 800b838:	0800bc59 	.word	0x0800bc59
 800b83c:	0800bc6a 	.word	0x0800bc6a

0800b840 <_sbrk_r>:
 800b840:	b538      	push	{r3, r4, r5, lr}
 800b842:	4d06      	ldr	r5, [pc, #24]	; (800b85c <_sbrk_r+0x1c>)
 800b844:	2300      	movs	r3, #0
 800b846:	4604      	mov	r4, r0
 800b848:	4608      	mov	r0, r1
 800b84a:	602b      	str	r3, [r5, #0]
 800b84c:	f7f9 fbd0 	bl	8004ff0 <_sbrk>
 800b850:	1c43      	adds	r3, r0, #1
 800b852:	d102      	bne.n	800b85a <_sbrk_r+0x1a>
 800b854:	682b      	ldr	r3, [r5, #0]
 800b856:	b103      	cbz	r3, 800b85a <_sbrk_r+0x1a>
 800b858:	6023      	str	r3, [r4, #0]
 800b85a:	bd38      	pop	{r3, r4, r5, pc}
 800b85c:	20000f1c 	.word	0x20000f1c

0800b860 <__retarget_lock_acquire_recursive>:
 800b860:	4770      	bx	lr

0800b862 <__retarget_lock_release_recursive>:
 800b862:	4770      	bx	lr

0800b864 <memmove>:
 800b864:	4288      	cmp	r0, r1
 800b866:	b510      	push	{r4, lr}
 800b868:	eb01 0402 	add.w	r4, r1, r2
 800b86c:	d902      	bls.n	800b874 <memmove+0x10>
 800b86e:	4284      	cmp	r4, r0
 800b870:	4623      	mov	r3, r4
 800b872:	d807      	bhi.n	800b884 <memmove+0x20>
 800b874:	1e43      	subs	r3, r0, #1
 800b876:	42a1      	cmp	r1, r4
 800b878:	d008      	beq.n	800b88c <memmove+0x28>
 800b87a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b87e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b882:	e7f8      	b.n	800b876 <memmove+0x12>
 800b884:	4402      	add	r2, r0
 800b886:	4601      	mov	r1, r0
 800b888:	428a      	cmp	r2, r1
 800b88a:	d100      	bne.n	800b88e <memmove+0x2a>
 800b88c:	bd10      	pop	{r4, pc}
 800b88e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b892:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b896:	e7f7      	b.n	800b888 <memmove+0x24>

0800b898 <__malloc_lock>:
 800b898:	4801      	ldr	r0, [pc, #4]	; (800b8a0 <__malloc_lock+0x8>)
 800b89a:	f7ff bfe1 	b.w	800b860 <__retarget_lock_acquire_recursive>
 800b89e:	bf00      	nop
 800b8a0:	20000f20 	.word	0x20000f20

0800b8a4 <__malloc_unlock>:
 800b8a4:	4801      	ldr	r0, [pc, #4]	; (800b8ac <__malloc_unlock+0x8>)
 800b8a6:	f7ff bfdc 	b.w	800b862 <__retarget_lock_release_recursive>
 800b8aa:	bf00      	nop
 800b8ac:	20000f20 	.word	0x20000f20

0800b8b0 <_free_r>:
 800b8b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b8b2:	2900      	cmp	r1, #0
 800b8b4:	d044      	beq.n	800b940 <_free_r+0x90>
 800b8b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b8ba:	9001      	str	r0, [sp, #4]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	f1a1 0404 	sub.w	r4, r1, #4
 800b8c2:	bfb8      	it	lt
 800b8c4:	18e4      	addlt	r4, r4, r3
 800b8c6:	f7ff ffe7 	bl	800b898 <__malloc_lock>
 800b8ca:	4a1e      	ldr	r2, [pc, #120]	; (800b944 <_free_r+0x94>)
 800b8cc:	9801      	ldr	r0, [sp, #4]
 800b8ce:	6813      	ldr	r3, [r2, #0]
 800b8d0:	b933      	cbnz	r3, 800b8e0 <_free_r+0x30>
 800b8d2:	6063      	str	r3, [r4, #4]
 800b8d4:	6014      	str	r4, [r2, #0]
 800b8d6:	b003      	add	sp, #12
 800b8d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b8dc:	f7ff bfe2 	b.w	800b8a4 <__malloc_unlock>
 800b8e0:	42a3      	cmp	r3, r4
 800b8e2:	d908      	bls.n	800b8f6 <_free_r+0x46>
 800b8e4:	6825      	ldr	r5, [r4, #0]
 800b8e6:	1961      	adds	r1, r4, r5
 800b8e8:	428b      	cmp	r3, r1
 800b8ea:	bf01      	itttt	eq
 800b8ec:	6819      	ldreq	r1, [r3, #0]
 800b8ee:	685b      	ldreq	r3, [r3, #4]
 800b8f0:	1949      	addeq	r1, r1, r5
 800b8f2:	6021      	streq	r1, [r4, #0]
 800b8f4:	e7ed      	b.n	800b8d2 <_free_r+0x22>
 800b8f6:	461a      	mov	r2, r3
 800b8f8:	685b      	ldr	r3, [r3, #4]
 800b8fa:	b10b      	cbz	r3, 800b900 <_free_r+0x50>
 800b8fc:	42a3      	cmp	r3, r4
 800b8fe:	d9fa      	bls.n	800b8f6 <_free_r+0x46>
 800b900:	6811      	ldr	r1, [r2, #0]
 800b902:	1855      	adds	r5, r2, r1
 800b904:	42a5      	cmp	r5, r4
 800b906:	d10b      	bne.n	800b920 <_free_r+0x70>
 800b908:	6824      	ldr	r4, [r4, #0]
 800b90a:	4421      	add	r1, r4
 800b90c:	1854      	adds	r4, r2, r1
 800b90e:	42a3      	cmp	r3, r4
 800b910:	6011      	str	r1, [r2, #0]
 800b912:	d1e0      	bne.n	800b8d6 <_free_r+0x26>
 800b914:	681c      	ldr	r4, [r3, #0]
 800b916:	685b      	ldr	r3, [r3, #4]
 800b918:	6053      	str	r3, [r2, #4]
 800b91a:	4421      	add	r1, r4
 800b91c:	6011      	str	r1, [r2, #0]
 800b91e:	e7da      	b.n	800b8d6 <_free_r+0x26>
 800b920:	d902      	bls.n	800b928 <_free_r+0x78>
 800b922:	230c      	movs	r3, #12
 800b924:	6003      	str	r3, [r0, #0]
 800b926:	e7d6      	b.n	800b8d6 <_free_r+0x26>
 800b928:	6825      	ldr	r5, [r4, #0]
 800b92a:	1961      	adds	r1, r4, r5
 800b92c:	428b      	cmp	r3, r1
 800b92e:	bf04      	itt	eq
 800b930:	6819      	ldreq	r1, [r3, #0]
 800b932:	685b      	ldreq	r3, [r3, #4]
 800b934:	6063      	str	r3, [r4, #4]
 800b936:	bf04      	itt	eq
 800b938:	1949      	addeq	r1, r1, r5
 800b93a:	6021      	streq	r1, [r4, #0]
 800b93c:	6054      	str	r4, [r2, #4]
 800b93e:	e7ca      	b.n	800b8d6 <_free_r+0x26>
 800b940:	b003      	add	sp, #12
 800b942:	bd30      	pop	{r4, r5, pc}
 800b944:	20000f14 	.word	0x20000f14

0800b948 <_malloc_usable_size_r>:
 800b948:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b94c:	1f18      	subs	r0, r3, #4
 800b94e:	2b00      	cmp	r3, #0
 800b950:	bfbc      	itt	lt
 800b952:	580b      	ldrlt	r3, [r1, r0]
 800b954:	18c0      	addlt	r0, r0, r3
 800b956:	4770      	bx	lr

0800b958 <_init>:
 800b958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b95a:	bf00      	nop
 800b95c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b95e:	bc08      	pop	{r3}
 800b960:	469e      	mov	lr, r3
 800b962:	4770      	bx	lr

0800b964 <_fini>:
 800b964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b966:	bf00      	nop
 800b968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b96a:	bc08      	pop	{r3}
 800b96c:	469e      	mov	lr, r3
 800b96e:	4770      	bx	lr
